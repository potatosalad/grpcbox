%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.2
-module(grpcbox_channelz_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_channel_connectivity_state.State'/1, 'enum_value_by_symbol_channel_connectivity_state.State'/1]).
-export(['enum_symbol_by_value_channel_trace_event.Severity'/1, 'enum_value_by_symbol_channel_trace_event.Severity'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([descriptor/0, descriptor/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'channel_connectivity_state.State'() :: 'UNKNOWN' | 'IDLE' | 'CONNECTING' | 'READY' | 'TRANSIENT_FAILURE' | 'SHUTDOWN'.
-type 'channel_trace_event.Severity'() :: 'CT_UNKNOWN' | 'CT_INFO' | 'CT_WARNING' | 'CT_ERROR'.
-export_type(['channel_connectivity_state.State'/0, 'channel_trace_event.Severity'/0]).

%% message types
-type channel() ::
      #{ref                     => channel_ref(),   % = 1
        data                    => channel_data(),  % = 2
        channel_ref             => [channel_ref()], % = 3
        subchannel_ref          => [subchannel_ref()], % = 4
        socket_ref              => [socket_ref()]   % = 5
       }.

-type subchannel() ::
      #{ref                     => subchannel_ref(), % = 1
        data                    => channel_data(),  % = 2
        channel_ref             => [channel_ref()], % = 3
        subchannel_ref          => [subchannel_ref()], % = 4
        socket_ref              => [socket_ref()]   % = 5
       }.

-type channel_connectivity_state() ::
      #{state                   => 'UNKNOWN' | 'IDLE' | 'CONNECTING' | 'READY' | 'TRANSIENT_FAILURE' | 'SHUTDOWN' | integer() % = 1, enum channel_connectivity_state.State
       }.

-type channel_data() ::
      #{state                   => channel_connectivity_state(), % = 1
        target                  => iodata(),        % = 2
        trace                   => channel_trace(), % = 3
        calls_started           => integer(),       % = 4, 32 bits
        calls_succeeded         => integer(),       % = 5, 32 bits
        calls_failed            => integer(),       % = 6, 32 bits
        last_call_started_timestamp => timestamp()  % = 7
       }.

-type channel_trace_event() ::
      #{description             => iodata(),        % = 1
        severity                => 'CT_UNKNOWN' | 'CT_INFO' | 'CT_WARNING' | 'CT_ERROR' | integer(), % = 2, enum channel_trace_event.Severity
        timestamp               => timestamp(),     % = 3
        child_ref               => {channel_ref, channel_ref()} | {subchannel_ref, subchannel_ref()} % oneof
       }.

-type channel_trace() ::
      #{num_events_logged       => integer(),       % = 1, 32 bits
        creation_timestamp      => timestamp(),     % = 2
        events                  => [channel_trace_event()] % = 3
       }.

-type channel_ref() ::
      #{channel_id              => integer(),       % = 1, 32 bits
        name                    => iodata()         % = 2
       }.

-type subchannel_ref() ::
      #{subchannel_id           => integer(),       % = 7, 32 bits
        name                    => iodata()         % = 8
       }.

-type socket_ref() ::
      #{socket_id               => integer(),       % = 3, 32 bits
        name                    => iodata()         % = 4
       }.

-type server_ref() ::
      #{server_id               => integer(),       % = 5, 32 bits
        name                    => iodata()         % = 6
       }.

-type server() ::
      #{ref                     => server_ref(),    % = 1
        data                    => server_data(),   % = 2
        listen_socket           => [socket_ref()]   % = 3
       }.

-type server_data() ::
      #{trace                   => channel_trace(), % = 1
        calls_started           => integer(),       % = 2, 32 bits
        calls_succeeded         => integer(),       % = 3, 32 bits
        calls_failed            => integer(),       % = 4, 32 bits
        last_call_started_timestamp => timestamp()  % = 5
       }.

-type socket() ::
      #{ref                     => socket_ref(),    % = 1
        data                    => socket_data(),   % = 2
        local                   => address(),       % = 3
        remote                  => address(),       % = 4
        security                => security(),      % = 5
        remote_name             => iodata()         % = 6
       }.

-type socket_data() ::
      #{streams_started         => integer(),       % = 1, 32 bits
        streams_succeeded       => integer(),       % = 2, 32 bits
        streams_failed          => integer(),       % = 3, 32 bits
        messages_sent           => integer(),       % = 4, 32 bits
        messages_received       => integer(),       % = 5, 32 bits
        keep_alives_sent        => integer(),       % = 6, 32 bits
        last_local_stream_created_timestamp => timestamp(), % = 7
        last_remote_stream_created_timestamp => timestamp(), % = 8
        last_message_sent_timestamp => timestamp(), % = 9
        last_message_received_timestamp => timestamp(), % = 10
        local_flow_control_window => int_64_value(), % = 11
        remote_flow_control_window => int_64_value(), % = 12
        option                  => [socket_option()] % = 13
       }.

-type tcp_ip_address() ::
      #{ip_address              => iodata(),        % = 1
        port                    => integer()        % = 2, 32 bits
       }.

-type uds_address() ::
      #{filename                => iodata()         % = 1
       }.

-type other_address() ::
      #{name                    => iodata(),        % = 1
        value                   => google_protobuf_any()            % = 2
       }.

-type address() ::
      #{address                 => {tcpip_address, tcp_ip_address()} | {uds_address, uds_address()} | {other_address, other_address()} % oneof
       }.

-type tls() ::
      #{cipher_suite            => {standard_name, iodata()} | {other_name, iodata()}, % oneof
        local_certificate       => iodata(),        % = 3
        remote_certificate      => iodata()         % = 4
       }.

-type other_security() ::
      #{name                    => iodata(),        % = 1
        value                   => google_protobuf_any()            % = 2
       }.

-type security() ::
      #{model                   => {tls, tls()} | {other, other_security()} % oneof
       }.

-type socket_option() ::
      #{name                    => iodata(),        % = 1
        value                   => iodata(),        % = 2
        additional              => google_protobuf_any()            % = 3
       }.

-type socket_option_timeout() ::
      #{duration                => duration()       % = 1
       }.

-type socket_option_linger() ::
      #{active                  => boolean() | 0 | 1, % = 1
        duration                => duration()       % = 2
       }.

-type socket_option_tcp_info() ::
      #{tcpi_state              => non_neg_integer(), % = 1, 32 bits
        tcpi_ca_state           => non_neg_integer(), % = 2, 32 bits
        tcpi_retransmits        => non_neg_integer(), % = 3, 32 bits
        tcpi_probes             => non_neg_integer(), % = 4, 32 bits
        tcpi_backoff            => non_neg_integer(), % = 5, 32 bits
        tcpi_options            => non_neg_integer(), % = 6, 32 bits
        tcpi_snd_wscale         => non_neg_integer(), % = 7, 32 bits
        tcpi_rcv_wscale         => non_neg_integer(), % = 8, 32 bits
        tcpi_rto                => non_neg_integer(), % = 9, 32 bits
        tcpi_ato                => non_neg_integer(), % = 10, 32 bits
        tcpi_snd_mss            => non_neg_integer(), % = 11, 32 bits
        tcpi_rcv_mss            => non_neg_integer(), % = 12, 32 bits
        tcpi_unacked            => non_neg_integer(), % = 13, 32 bits
        tcpi_sacked             => non_neg_integer(), % = 14, 32 bits
        tcpi_lost               => non_neg_integer(), % = 15, 32 bits
        tcpi_retrans            => non_neg_integer(), % = 16, 32 bits
        tcpi_fackets            => non_neg_integer(), % = 17, 32 bits
        tcpi_last_data_sent     => non_neg_integer(), % = 18, 32 bits
        tcpi_last_ack_sent      => non_neg_integer(), % = 19, 32 bits
        tcpi_last_data_recv     => non_neg_integer(), % = 20, 32 bits
        tcpi_last_ack_recv      => non_neg_integer(), % = 21, 32 bits
        tcpi_pmtu               => non_neg_integer(), % = 22, 32 bits
        tcpi_rcv_ssthresh       => non_neg_integer(), % = 23, 32 bits
        tcpi_rtt                => non_neg_integer(), % = 24, 32 bits
        tcpi_rttvar             => non_neg_integer(), % = 25, 32 bits
        tcpi_snd_ssthresh       => non_neg_integer(), % = 26, 32 bits
        tcpi_snd_cwnd           => non_neg_integer(), % = 27, 32 bits
        tcpi_advmss             => non_neg_integer(), % = 28, 32 bits
        tcpi_reordering         => non_neg_integer() % = 29, 32 bits
       }.

-type get_top_channels_request() ::
      #{start_channel_id        => integer(),       % = 1, 32 bits
        max_results             => integer()        % = 2, 32 bits
       }.

-type get_top_channels_response() ::
      #{channel                 => [channel()],     % = 1
        'end'                   => boolean() | 0 | 1 % = 2
       }.

-type get_servers_request() ::
      #{start_server_id         => integer(),       % = 1, 32 bits
        max_results             => integer()        % = 2, 32 bits
       }.

-type get_servers_response() ::
      #{server                  => [server()],      % = 1
        'end'                   => boolean() | 0 | 1 % = 2
       }.

-type get_server_request() ::
      #{server_id               => integer()        % = 1, 32 bits
       }.

-type get_server_response() ::
      #{server                  => server()         % = 1
       }.

-type get_server_sockets_request() ::
      #{server_id               => integer(),       % = 1, 32 bits
        start_socket_id         => integer(),       % = 2, 32 bits
        max_results             => integer()        % = 3, 32 bits
       }.

-type get_server_sockets_response() ::
      #{socket_ref              => [socket_ref()],  % = 1
        'end'                   => boolean() | 0 | 1 % = 2
       }.

-type get_channel_request() ::
      #{channel_id              => integer()        % = 1, 32 bits
       }.

-type get_channel_response() ::
      #{channel                 => channel()        % = 1
       }.

-type get_subchannel_request() ::
      #{subchannel_id           => integer()        % = 1, 32 bits
       }.

-type get_subchannel_response() ::
      #{subchannel              => subchannel()     % = 1
       }.

-type get_socket_request() ::
      #{socket_id               => integer(),       % = 1, 32 bits
        summary                 => boolean() | 0 | 1 % = 2
       }.

-type get_socket_response() ::
      #{socket                  => socket()         % = 1
       }.

-type google_protobuf_any() ::
      #{type_url                => iodata(),        % = 1
        value                   => iodata()         % = 2
       }.

-type duration() ::
      #{seconds                 => integer(),       % = 1, 32 bits
        nanos                   => integer()        % = 2, 32 bits
       }.

-type timestamp() ::
      #{seconds                 => integer(),       % = 1, 32 bits
        nanos                   => integer()        % = 2, 32 bits
       }.

-type double_value() ::
      #{value                   => float() | integer() | infinity | '-infinity' | nan % = 1
       }.

-type float_value() ::
      #{value                   => float() | integer() | infinity | '-infinity' | nan % = 1
       }.

-type int_64_value() ::
      #{value                   => integer()        % = 1, 32 bits
       }.

-type u_int_64_value() ::
      #{value                   => non_neg_integer() % = 1, 32 bits
       }.

-type int_32_value() ::
      #{value                   => integer()        % = 1, 32 bits
       }.

-type u_int_32_value() ::
      #{value                   => non_neg_integer() % = 1, 32 bits
       }.

-type bool_value() ::
      #{value                   => boolean() | 0 | 1 % = 1
       }.

-type string_value() ::
      #{value                   => iodata()         % = 1
       }.

-type bytes_value() ::
      #{value                   => iodata()         % = 1
       }.

-export_type(['channel'/0, 'subchannel'/0, 'channel_connectivity_state'/0, 'channel_data'/0, 'channel_trace_event'/0, 'channel_trace'/0, 'channel_ref'/0, 'subchannel_ref'/0, 'socket_ref'/0, 'server_ref'/0, 'server'/0, 'server_data'/0, 'socket'/0, 'socket_data'/0, 'tcp_ip_address'/0, 'uds_address'/0, 'other_address'/0, 'address'/0, 'tls'/0, 'other_security'/0, 'security'/0, 'socket_option'/0, 'socket_option_timeout'/0, 'socket_option_linger'/0, 'socket_option_tcp_info'/0, 'get_top_channels_request'/0, 'get_top_channels_response'/0, 'get_servers_request'/0, 'get_servers_response'/0, 'get_server_request'/0, 'get_server_response'/0, 'get_server_sockets_request'/0, 'get_server_sockets_response'/0, 'get_channel_request'/0, 'get_channel_response'/0, 'get_subchannel_request'/0, 'get_subchannel_response'/0, 'get_socket_request'/0, 'get_socket_response'/0, 'any'/0, 'duration'/0, 'timestamp'/0, 'double_value'/0, 'float_value'/0, 'int_64_value'/0, 'u_int_64_value'/0, 'int_32_value'/0, 'u_int_32_value'/0, 'bool_value'/0, 'string_value'/0, 'bytes_value'/0]).

-spec encode_msg(channel() | subchannel() | channel_connectivity_state() | channel_data() | channel_trace_event() | channel_trace() | channel_ref() | subchannel_ref() | socket_ref() | server_ref() | server() | server_data() | socket() | socket_data() | tcp_ip_address() | uds_address() | other_address() | address() | tls() | other_security() | security() | socket_option() | socket_option_timeout() | socket_option_linger() | socket_option_tcp_info() | get_top_channels_request() | get_top_channels_response() | get_servers_request() | get_servers_response() | get_server_request() | get_server_response() | get_server_sockets_request() | get_server_sockets_response() | get_channel_request() | get_channel_response() | get_subchannel_request() | get_subchannel_response() | get_socket_request() | get_socket_response() | google_protobuf_any() | duration() | timestamp() | double_value() | float_value() | int_64_value() | u_int_64_value() | int_32_value() | u_int_32_value() | bool_value() | string_value() | bytes_value(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(channel() | subchannel() | channel_connectivity_state() | channel_data() | channel_trace_event() | channel_trace() | channel_ref() | subchannel_ref() | socket_ref() | server_ref() | server() | server_data() | socket() | socket_data() | tcp_ip_address() | uds_address() | other_address() | address() | tls() | other_security() | security() | socket_option() | socket_option_timeout() | socket_option_linger() | socket_option_tcp_info() | get_top_channels_request() | get_top_channels_response() | get_servers_request() | get_servers_response() | get_server_request() | get_server_response() | get_server_sockets_request() | get_server_sockets_response() | get_channel_request() | get_channel_response() | get_subchannel_request() | get_subchannel_response() | get_socket_request() | get_socket_response() | google_protobuf_any() | duration() | timestamp() | double_value() | float_value() | int_64_value() | u_int_64_value() | int_32_value() | u_int_32_value() | bool_value() | string_value() | bytes_value(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      channel ->
	  encode_msg_channel(id(Msg, TrUserData), TrUserData);
      subchannel ->
	  encode_msg_subchannel(id(Msg, TrUserData), TrUserData);
      channel_connectivity_state ->
	  encode_msg_channel_connectivity_state(id(Msg,
						   TrUserData),
						TrUserData);
      channel_data ->
	  encode_msg_channel_data(id(Msg, TrUserData),
				  TrUserData);
      channel_trace_event ->
	  encode_msg_channel_trace_event(id(Msg, TrUserData),
					 TrUserData);
      channel_trace ->
	  encode_msg_channel_trace(id(Msg, TrUserData),
				   TrUserData);
      channel_ref ->
	  encode_msg_channel_ref(id(Msg, TrUserData), TrUserData);
      subchannel_ref ->
	  encode_msg_subchannel_ref(id(Msg, TrUserData),
				    TrUserData);
      socket_ref ->
	  encode_msg_socket_ref(id(Msg, TrUserData), TrUserData);
      server_ref ->
	  encode_msg_server_ref(id(Msg, TrUserData), TrUserData);
      server ->
	  encode_msg_server(id(Msg, TrUserData), TrUserData);
      server_data ->
	  encode_msg_server_data(id(Msg, TrUserData), TrUserData);
      socket ->
	  encode_msg_socket(id(Msg, TrUserData), TrUserData);
      socket_data ->
	  encode_msg_socket_data(id(Msg, TrUserData), TrUserData);
      tcp_ip_address ->
	  encode_msg_tcp_ip_address(id(Msg, TrUserData),
				    TrUserData);
      uds_address ->
	  encode_msg_uds_address(id(Msg, TrUserData), TrUserData);
      other_address ->
	  encode_msg_other_address(id(Msg, TrUserData),
				   TrUserData);
      address ->
	  encode_msg_address(id(Msg, TrUserData), TrUserData);
      tls -> encode_msg_tls(id(Msg, TrUserData), TrUserData);
      other_security ->
	  encode_msg_other_security(id(Msg, TrUserData),
				    TrUserData);
      security ->
	  encode_msg_security(id(Msg, TrUserData), TrUserData);
      socket_option ->
	  encode_msg_socket_option(id(Msg, TrUserData),
				   TrUserData);
      socket_option_timeout ->
	  encode_msg_socket_option_timeout(id(Msg, TrUserData),
					   TrUserData);
      socket_option_linger ->
	  encode_msg_socket_option_linger(id(Msg, TrUserData),
					  TrUserData);
      socket_option_tcp_info ->
	  encode_msg_socket_option_tcp_info(id(Msg, TrUserData),
					    TrUserData);
      get_top_channels_request ->
	  encode_msg_get_top_channels_request(id(Msg, TrUserData),
					      TrUserData);
      get_top_channels_response ->
	  encode_msg_get_top_channels_response(id(Msg,
						  TrUserData),
					       TrUserData);
      get_servers_request ->
	  encode_msg_get_servers_request(id(Msg, TrUserData),
					 TrUserData);
      get_servers_response ->
	  encode_msg_get_servers_response(id(Msg, TrUserData),
					  TrUserData);
      get_server_request ->
	  encode_msg_get_server_request(id(Msg, TrUserData),
					TrUserData);
      get_server_response ->
	  encode_msg_get_server_response(id(Msg, TrUserData),
					 TrUserData);
      get_server_sockets_request ->
	  encode_msg_get_server_sockets_request(id(Msg,
						   TrUserData),
						TrUserData);
      get_server_sockets_response ->
	  encode_msg_get_server_sockets_response(id(Msg,
						    TrUserData),
						 TrUserData);
      get_channel_request ->
	  encode_msg_get_channel_request(id(Msg, TrUserData),
					 TrUserData);
      get_channel_response ->
	  encode_msg_get_channel_response(id(Msg, TrUserData),
					  TrUserData);
      get_subchannel_request ->
	  encode_msg_get_subchannel_request(id(Msg, TrUserData),
					    TrUserData);
      get_subchannel_response ->
	  encode_msg_get_subchannel_response(id(Msg, TrUserData),
					     TrUserData);
      get_socket_request ->
	  encode_msg_get_socket_request(id(Msg, TrUserData),
					TrUserData);
      get_socket_response ->
	  encode_msg_get_socket_response(id(Msg, TrUserData),
					 TrUserData);
      any -> encode_msg_any(id(Msg, TrUserData), TrUserData);
      duration ->
	  encode_msg_duration(id(Msg, TrUserData), TrUserData);
      timestamp ->
	  encode_msg_timestamp(id(Msg, TrUserData), TrUserData);
      double_value ->
	  encode_msg_double_value(id(Msg, TrUserData),
				  TrUserData);
      float_value ->
	  encode_msg_float_value(id(Msg, TrUserData), TrUserData);
      int_64_value ->
	  encode_msg_int_64_value(id(Msg, TrUserData),
				  TrUserData);
      u_int_64_value ->
	  encode_msg_u_int_64_value(id(Msg, TrUserData),
				    TrUserData);
      int_32_value ->
	  encode_msg_int_32_value(id(Msg, TrUserData),
				  TrUserData);
      u_int_32_value ->
	  encode_msg_u_int_32_value(id(Msg, TrUserData),
				    TrUserData);
      bool_value ->
	  encode_msg_bool_value(id(Msg, TrUserData), TrUserData);
      string_value ->
	  encode_msg_string_value(id(Msg, TrUserData),
				  TrUserData);
      bytes_value ->
	  encode_msg_bytes_value(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_channel(Msg, TrUserData) ->
    encode_msg_channel(Msg, <<>>, TrUserData).


encode_msg_channel(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{ref := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_channel_ref(TrF1, <<Bin/binary, 10>>,
					     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{data := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_channel_data(TrF2, <<B1/binary, 18>>,
					      TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{channel_ref := F3} ->
	       TrF3 = id(F3, TrUserData),
	       if TrF3 == [] -> B2;
		  true ->
		      e_field_channel_channel_ref(TrF3, B2, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{subchannel_ref := F4} ->
	       TrF4 = id(F4, TrUserData),
	       if TrF4 == [] -> B3;
		  true ->
		      e_field_channel_subchannel_ref(TrF4, B3, TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{socket_ref := F5} ->
	  TrF5 = id(F5, TrUserData),
	  if TrF5 == [] -> B4;
	     true -> e_field_channel_socket_ref(TrF5, B4, TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_subchannel(Msg, TrUserData) ->
    encode_msg_subchannel(Msg, <<>>, TrUserData).


encode_msg_subchannel(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{ref := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_subchannel_ref(TrF1, <<Bin/binary, 10>>,
						TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{data := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_subchannel_data(TrF2, <<B1/binary, 18>>,
						 TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{channel_ref := F3} ->
	       TrF3 = id(F3, TrUserData),
	       if TrF3 == [] -> B2;
		  true ->
		      e_field_subchannel_channel_ref(TrF3, B2, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{subchannel_ref := F4} ->
	       TrF4 = id(F4, TrUserData),
	       if TrF4 == [] -> B3;
		  true ->
		      e_field_subchannel_subchannel_ref(TrF4, B3, TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{socket_ref := F5} ->
	  TrF5 = id(F5, TrUserData),
	  if TrF5 == [] -> B4;
	     true ->
		 e_field_subchannel_socket_ref(TrF5, B4, TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_channel_connectivity_state(Msg,
				      TrUserData) ->
    encode_msg_channel_connectivity_state(Msg, <<>>,
					  TrUserData).


encode_msg_channel_connectivity_state(#{} = M, Bin,
				      TrUserData) ->
    case M of
      #{state := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 'UNKNOWN'; TrF1 =:= 0 -> Bin;
	       true ->
		   'e_enum_channel_connectivity_state.State'(TrF1,
							     <<Bin/binary, 8>>,
							     'MaybeTrUserData')
	    end
	  end;
      _ -> Bin
    end.

encode_msg_channel_data(Msg, TrUserData) ->
    encode_msg_channel_data(Msg, <<>>, TrUserData).


encode_msg_channel_data(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{state := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_channel_data_state(TrF1, <<Bin/binary, 10>>,
						    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{target := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{trace := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			e_mfield_channel_data_trace(TrF3, <<B2/binary, 26>>,
						    TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{calls_started := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{calls_succeeded := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true ->
			e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{calls_failed := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true ->
			e_type_int64(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    case M of
      #{last_call_started_timestamp := F7} ->
	  begin
	    TrF7 = id(F7, TrUserData),
	    if TrF7 =:= undefined -> B6;
	       true ->
		   e_mfield_channel_data_last_call_started_timestamp(TrF7,
								     <<B6/binary,
								       58>>,
								     TrUserData)
	    end
	  end;
      _ -> B6
    end.

encode_msg_channel_trace_event(Msg, TrUserData) ->
    encode_msg_channel_trace_event(Msg, <<>>, TrUserData).


encode_msg_channel_trace_event(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{description := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{severity := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 'CT_UNKNOWN'; TrF2 =:= 0 -> B1;
		    true ->
			'e_enum_channel_trace_event.Severity'(TrF2,
							      <<B1/binary, 16>>,
							      'MaybeTrUserData')
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{timestamp := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			e_mfield_channel_trace_event_timestamp(TrF3,
							       <<B2/binary,
								 26>>,
							       TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{child_ref := F4} ->
	  case id(F4, TrUserData) of
	    {channel_ref, TF4} ->
		begin
		  TrTF4 = id(TF4, TrUserData),
		  e_mfield_channel_trace_event_channel_ref(TrTF4,
							   <<B3/binary, 34>>,
							   TrUserData)
		end;
	    {subchannel_ref, TF4} ->
		begin
		  TrTF4 = id(TF4, TrUserData),
		  e_mfield_channel_trace_event_subchannel_ref(TrTF4,
							      <<B3/binary, 42>>,
							      TrUserData)
		end
	  end;
      _ -> B3
    end.

encode_msg_channel_trace(Msg, TrUserData) ->
    encode_msg_channel_trace(Msg, <<>>, TrUserData).


encode_msg_channel_trace(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{num_events_logged := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{creation_timestamp := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_channel_trace_creation_timestamp(TrF2,
								  <<B1/binary,
								    18>>,
								  TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{events := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_channel_trace_events(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_channel_ref(Msg, TrUserData) ->
    encode_msg_channel_ref(Msg, <<>>, TrUserData).


encode_msg_channel_ref(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{channel_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{name := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_subchannel_ref(Msg, TrUserData) ->
    encode_msg_subchannel_ref(Msg, <<>>, TrUserData).


encode_msg_subchannel_ref(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{subchannel_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{name := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 66>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_socket_ref(Msg, TrUserData) ->
    encode_msg_socket_ref(Msg, <<>>, TrUserData).


encode_msg_socket_ref(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{socket_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{name := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 34>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_server_ref(Msg, TrUserData) ->
    encode_msg_server_ref(Msg, <<>>, TrUserData).


encode_msg_server_ref(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{server_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{name := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 50>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_server(Msg, TrUserData) ->
    encode_msg_server(Msg, <<>>, TrUserData).


encode_msg_server(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{ref := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_server_ref(TrF1, <<Bin/binary, 10>>,
					    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{data := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_server_data(TrF2, <<B1/binary, 18>>,
					     TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{listen_socket := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_server_listen_socket(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_server_data(Msg, TrUserData) ->
    encode_msg_server_data(Msg, <<>>, TrUserData).


encode_msg_server_data(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{trace := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_server_data_trace(TrF1, <<Bin/binary, 10>>,
						   TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{calls_started := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{calls_succeeded := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{calls_failed := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    case M of
      #{last_call_started_timestamp := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    if TrF5 =:= undefined -> B4;
	       true ->
		   e_mfield_server_data_last_call_started_timestamp(TrF5,
								    <<B4/binary,
								      42>>,
								    TrUserData)
	    end
	  end;
      _ -> B4
    end.

encode_msg_socket(Msg, TrUserData) ->
    encode_msg_socket(Msg, <<>>, TrUserData).


encode_msg_socket(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{ref := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_socket_ref(TrF1, <<Bin/binary, 10>>,
					    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{data := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_socket_data(TrF2, <<B1/binary, 18>>,
					     TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{local := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			e_mfield_socket_local(TrF3, <<B2/binary, 26>>,
					      TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{remote := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= undefined -> B3;
		    true ->
			e_mfield_socket_remote(TrF4, <<B3/binary, 34>>,
					       TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{security := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= undefined -> B4;
		    true ->
			e_mfield_socket_security(TrF5, <<B4/binary, 42>>,
						 TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    case M of
      #{remote_name := F6} ->
	  begin
	    TrF6 = id(F6, TrUserData),
	    case is_empty_string(TrF6) of
	      true -> B5;
	      false ->
		  e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
	    end
	  end;
      _ -> B5
    end.

encode_msg_socket_data(Msg, TrUserData) ->
    encode_msg_socket_data(Msg, <<>>, TrUserData).


encode_msg_socket_data(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{streams_started := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{streams_succeeded := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{streams_failed := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{messages_sent := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{messages_received := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true ->
			e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{keep_alives_sent := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true ->
			e_type_int64(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{last_local_stream_created_timestamp := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= undefined -> B6;
		    true ->
			e_mfield_socket_data_last_local_stream_created_timestamp(TrF7,
										 <<B6/binary,
										   58>>,
										 TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{last_remote_stream_created_timestamp := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= undefined -> B7;
		    true ->
			e_mfield_socket_data_last_remote_stream_created_timestamp(TrF8,
										  <<B7/binary,
										    66>>,
										  TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{last_message_sent_timestamp := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= undefined -> B8;
		    true ->
			e_mfield_socket_data_last_message_sent_timestamp(TrF9,
									 <<B8/binary,
									   74>>,
									 TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{last_message_received_timestamp := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  if TrF10 =:= undefined -> B9;
		     true ->
			 e_mfield_socket_data_last_message_received_timestamp(TrF10,
									      <<B9/binary,
										82>>,
									      TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    B11 = case M of
	    #{local_flow_control_window := F11} ->
		begin
		  TrF11 = id(F11, TrUserData),
		  if TrF11 =:= undefined -> B10;
		     true ->
			 e_mfield_socket_data_local_flow_control_window(TrF11,
									<<B10/binary,
									  90>>,
									TrUserData)
		  end
		end;
	    _ -> B10
	  end,
    B12 = case M of
	    #{remote_flow_control_window := F12} ->
		begin
		  TrF12 = id(F12, TrUserData),
		  if TrF12 =:= undefined -> B11;
		     true ->
			 e_mfield_socket_data_remote_flow_control_window(TrF12,
									 <<B11/binary,
									   98>>,
									 TrUserData)
		  end
		end;
	    _ -> B11
	  end,
    case M of
      #{option := F13} ->
	  TrF13 = id(F13, TrUserData),
	  if TrF13 == [] -> B12;
	     true ->
		 e_field_socket_data_option(TrF13, B12, TrUserData)
	  end;
      _ -> B12
    end.

encode_msg_tcp_ip_address(Msg, TrUserData) ->
    encode_msg_tcp_ip_address(Msg, <<>>, TrUserData).


encode_msg_tcp_ip_address(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{ip_address := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{port := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_uds_address(Msg, TrUserData) ->
    encode_msg_uds_address(Msg, <<>>, TrUserData).


encode_msg_uds_address(#{} = M, Bin, TrUserData) ->
    case M of
      #{filename := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_other_address(Msg, TrUserData) ->
    encode_msg_other_address(Msg, <<>>, TrUserData).


encode_msg_other_address(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_other_address_value(TrF2, <<B1/binary, 18>>,
						TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_address(Msg, TrUserData) ->
    encode_msg_address(Msg, <<>>, TrUserData).


encode_msg_address(#{} = M, Bin, TrUserData) ->
    case M of
      #{address := F1} ->
	  case id(F1, TrUserData) of
	    {tcpip_address, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_address_tcpip_address(TrTF1,
						 <<Bin/binary, 10>>, TrUserData)
		end;
	    {uds_address, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_address_uds_address(TrTF1, <<Bin/binary, 18>>,
					       TrUserData)
		end;
	    {other_address, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_address_other_address(TrTF1,
						 <<Bin/binary, 26>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_tls(Msg, TrUserData) ->
    encode_msg_tls(Msg, <<>>, TrUserData).


encode_msg_tls(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{cipher_suite := F1} ->
	       case id(F1, TrUserData) of
		 {standard_name, TF1} ->
		     begin
		       TrTF1 = id(TF1, TrUserData),
		       e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		     end;
		 {other_name, TF1} ->
		     begin
		       TrTF1 = id(TF1, TrUserData),
		       e_type_string(TrTF1, <<Bin/binary, 18>>, TrUserData)
		     end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{local_certificate := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{remote_certificate := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case iolist_size(TrF3) of
	      0 -> B2;
	      _ -> e_type_bytes(TrF3, <<B2/binary, 34>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_other_security(Msg, TrUserData) ->
    encode_msg_other_security(Msg, <<>>, TrUserData).


encode_msg_other_security(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_other_security_value(TrF2, <<B1/binary, 18>>,
						 TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_security(Msg, TrUserData) ->
    encode_msg_security(Msg, <<>>, TrUserData).


encode_msg_security(#{} = M, Bin, TrUserData) ->
    case M of
      #{model := F1} ->
	  case id(F1, TrUserData) of
	    {tls, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_security_tls(TrTF1, <<Bin/binary, 10>>,
					TrUserData)
		end;
	    {other, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_security_other(TrTF1, <<Bin/binary, 18>>,
					  TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_socket_option(Msg, TrUserData) ->
    encode_msg_socket_option(Msg, <<>>, TrUserData).


encode_msg_socket_option(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{value := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{additional := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_socket_option_additional(TrF3,
						     <<B2/binary, 26>>,
						     TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_socket_option_timeout(Msg, TrUserData) ->
    encode_msg_socket_option_timeout(Msg, <<>>, TrUserData).


encode_msg_socket_option_timeout(#{} = M, Bin,
				 TrUserData) ->
    case M of
      #{duration := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_socket_option_timeout_duration(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_socket_option_linger(Msg, TrUserData) ->
    encode_msg_socket_option_linger(Msg, <<>>, TrUserData).


encode_msg_socket_option_linger(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{active := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= false -> Bin;
		    true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{duration := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_socket_option_linger_duration(TrF2,
							  <<B1/binary, 18>>,
							  TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_socket_option_tcp_info(Msg, TrUserData) ->
    encode_msg_socket_option_tcp_info(Msg, <<>>,
				      TrUserData).


encode_msg_socket_option_tcp_info(#{} = M, Bin,
				  TrUserData) ->
    B1 = case M of
	   #{tcpi_state := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{tcpi_ca_state := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{tcpi_retransmits := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{tcpi_probes := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{tcpi_backoff := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{tcpi_options := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{tcpi_snd_wscale := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= 0 -> B6;
		    true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{tcpi_rcv_wscale := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= 0 -> B7;
		    true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{tcpi_rto := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= 0 -> B8;
		    true -> e_varint(TrF9, <<B8/binary, 72>>, TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{tcpi_ato := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  if TrF10 =:= 0 -> B9;
		     true -> e_varint(TrF10, <<B9/binary, 80>>, TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    B11 = case M of
	    #{tcpi_snd_mss := F11} ->
		begin
		  TrF11 = id(F11, TrUserData),
		  if TrF11 =:= 0 -> B10;
		     true -> e_varint(TrF11, <<B10/binary, 88>>, TrUserData)
		  end
		end;
	    _ -> B10
	  end,
    B12 = case M of
	    #{tcpi_rcv_mss := F12} ->
		begin
		  TrF12 = id(F12, TrUserData),
		  if TrF12 =:= 0 -> B11;
		     true -> e_varint(TrF12, <<B11/binary, 96>>, TrUserData)
		  end
		end;
	    _ -> B11
	  end,
    B13 = case M of
	    #{tcpi_unacked := F13} ->
		begin
		  TrF13 = id(F13, TrUserData),
		  if TrF13 =:= 0 -> B12;
		     true -> e_varint(TrF13, <<B12/binary, 104>>, TrUserData)
		  end
		end;
	    _ -> B12
	  end,
    B14 = case M of
	    #{tcpi_sacked := F14} ->
		begin
		  TrF14 = id(F14, TrUserData),
		  if TrF14 =:= 0 -> B13;
		     true -> e_varint(TrF14, <<B13/binary, 112>>, TrUserData)
		  end
		end;
	    _ -> B13
	  end,
    B15 = case M of
	    #{tcpi_lost := F15} ->
		begin
		  TrF15 = id(F15, TrUserData),
		  if TrF15 =:= 0 -> B14;
		     true -> e_varint(TrF15, <<B14/binary, 120>>, TrUserData)
		  end
		end;
	    _ -> B14
	  end,
    B16 = case M of
	    #{tcpi_retrans := F16} ->
		begin
		  TrF16 = id(F16, TrUserData),
		  if TrF16 =:= 0 -> B15;
		     true ->
			 e_varint(TrF16, <<B15/binary, 128, 1>>, TrUserData)
		  end
		end;
	    _ -> B15
	  end,
    B17 = case M of
	    #{tcpi_fackets := F17} ->
		begin
		  TrF17 = id(F17, TrUserData),
		  if TrF17 =:= 0 -> B16;
		     true ->
			 e_varint(TrF17, <<B16/binary, 136, 1>>, TrUserData)
		  end
		end;
	    _ -> B16
	  end,
    B18 = case M of
	    #{tcpi_last_data_sent := F18} ->
		begin
		  TrF18 = id(F18, TrUserData),
		  if TrF18 =:= 0 -> B17;
		     true ->
			 e_varint(TrF18, <<B17/binary, 144, 1>>, TrUserData)
		  end
		end;
	    _ -> B17
	  end,
    B19 = case M of
	    #{tcpi_last_ack_sent := F19} ->
		begin
		  TrF19 = id(F19, TrUserData),
		  if TrF19 =:= 0 -> B18;
		     true ->
			 e_varint(TrF19, <<B18/binary, 152, 1>>, TrUserData)
		  end
		end;
	    _ -> B18
	  end,
    B20 = case M of
	    #{tcpi_last_data_recv := F20} ->
		begin
		  TrF20 = id(F20, TrUserData),
		  if TrF20 =:= 0 -> B19;
		     true ->
			 e_varint(TrF20, <<B19/binary, 160, 1>>, TrUserData)
		  end
		end;
	    _ -> B19
	  end,
    B21 = case M of
	    #{tcpi_last_ack_recv := F21} ->
		begin
		  TrF21 = id(F21, TrUserData),
		  if TrF21 =:= 0 -> B20;
		     true ->
			 e_varint(TrF21, <<B20/binary, 168, 1>>, TrUserData)
		  end
		end;
	    _ -> B20
	  end,
    B22 = case M of
	    #{tcpi_pmtu := F22} ->
		begin
		  TrF22 = id(F22, TrUserData),
		  if TrF22 =:= 0 -> B21;
		     true ->
			 e_varint(TrF22, <<B21/binary, 176, 1>>, TrUserData)
		  end
		end;
	    _ -> B21
	  end,
    B23 = case M of
	    #{tcpi_rcv_ssthresh := F23} ->
		begin
		  TrF23 = id(F23, TrUserData),
		  if TrF23 =:= 0 -> B22;
		     true ->
			 e_varint(TrF23, <<B22/binary, 184, 1>>, TrUserData)
		  end
		end;
	    _ -> B22
	  end,
    B24 = case M of
	    #{tcpi_rtt := F24} ->
		begin
		  TrF24 = id(F24, TrUserData),
		  if TrF24 =:= 0 -> B23;
		     true ->
			 e_varint(TrF24, <<B23/binary, 192, 1>>, TrUserData)
		  end
		end;
	    _ -> B23
	  end,
    B25 = case M of
	    #{tcpi_rttvar := F25} ->
		begin
		  TrF25 = id(F25, TrUserData),
		  if TrF25 =:= 0 -> B24;
		     true ->
			 e_varint(TrF25, <<B24/binary, 200, 1>>, TrUserData)
		  end
		end;
	    _ -> B24
	  end,
    B26 = case M of
	    #{tcpi_snd_ssthresh := F26} ->
		begin
		  TrF26 = id(F26, TrUserData),
		  if TrF26 =:= 0 -> B25;
		     true ->
			 e_varint(TrF26, <<B25/binary, 208, 1>>, TrUserData)
		  end
		end;
	    _ -> B25
	  end,
    B27 = case M of
	    #{tcpi_snd_cwnd := F27} ->
		begin
		  TrF27 = id(F27, TrUserData),
		  if TrF27 =:= 0 -> B26;
		     true ->
			 e_varint(TrF27, <<B26/binary, 216, 1>>, TrUserData)
		  end
		end;
	    _ -> B26
	  end,
    B28 = case M of
	    #{tcpi_advmss := F28} ->
		begin
		  TrF28 = id(F28, TrUserData),
		  if TrF28 =:= 0 -> B27;
		     true ->
			 e_varint(TrF28, <<B27/binary, 224, 1>>, TrUserData)
		  end
		end;
	    _ -> B27
	  end,
    case M of
      #{tcpi_reordering := F29} ->
	  begin
	    TrF29 = id(F29, TrUserData),
	    if TrF29 =:= 0 -> B28;
	       true ->
		   e_varint(TrF29, <<B28/binary, 232, 1>>, TrUserData)
	    end
	  end;
      _ -> B28
    end.

encode_msg_get_top_channels_request(Msg, TrUserData) ->
    encode_msg_get_top_channels_request(Msg, <<>>,
					TrUserData).


encode_msg_get_top_channels_request(#{} = M, Bin,
				    TrUserData) ->
    B1 = case M of
	   #{start_channel_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{max_results := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_get_top_channels_response(Msg, TrUserData) ->
    encode_msg_get_top_channels_response(Msg, <<>>,
					 TrUserData).


encode_msg_get_top_channels_response(#{} = M, Bin,
				     TrUserData) ->
    B1 = case M of
	   #{channel := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_get_top_channels_response_channel(TrF1, Bin,
								TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{'end' := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= false -> B1;
	       true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_get_servers_request(Msg, TrUserData) ->
    encode_msg_get_servers_request(Msg, <<>>, TrUserData).


encode_msg_get_servers_request(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{start_server_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{max_results := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_get_servers_response(Msg, TrUserData) ->
    encode_msg_get_servers_response(Msg, <<>>, TrUserData).


encode_msg_get_servers_response(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{server := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_get_servers_response_server(TrF1, Bin,
							  TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{'end' := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= false -> B1;
	       true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_get_server_request(Msg, TrUserData) ->
    encode_msg_get_server_request(Msg, <<>>, TrUserData).


encode_msg_get_server_request(#{} = M, Bin,
			      TrUserData) ->
    case M of
      #{server_id := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_get_server_response(Msg, TrUserData) ->
    encode_msg_get_server_response(Msg, <<>>, TrUserData).


encode_msg_get_server_response(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{server := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_get_server_response_server(TrF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_get_server_sockets_request(Msg,
				      TrUserData) ->
    encode_msg_get_server_sockets_request(Msg, <<>>,
					  TrUserData).


encode_msg_get_server_sockets_request(#{} = M, Bin,
				      TrUserData) ->
    B1 = case M of
	   #{server_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{start_socket_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{max_results := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true ->
		   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_get_server_sockets_response(Msg,
				       TrUserData) ->
    encode_msg_get_server_sockets_response(Msg, <<>>,
					   TrUserData).


encode_msg_get_server_sockets_response(#{} = M, Bin,
				       TrUserData) ->
    B1 = case M of
	   #{socket_ref := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_get_server_sockets_response_socket_ref(TrF1,
								     Bin,
								     TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{'end' := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= false -> B1;
	       true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_get_channel_request(Msg, TrUserData) ->
    encode_msg_get_channel_request(Msg, <<>>, TrUserData).


encode_msg_get_channel_request(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{channel_id := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_get_channel_response(Msg, TrUserData) ->
    encode_msg_get_channel_response(Msg, <<>>, TrUserData).


encode_msg_get_channel_response(#{} = M, Bin,
				TrUserData) ->
    case M of
      #{channel := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_get_channel_response_channel(TrF1,
							 <<Bin/binary, 10>>,
							 TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_get_subchannel_request(Msg, TrUserData) ->
    encode_msg_get_subchannel_request(Msg, <<>>,
				      TrUserData).


encode_msg_get_subchannel_request(#{} = M, Bin,
				  TrUserData) ->
    case M of
      #{subchannel_id := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_get_subchannel_response(Msg, TrUserData) ->
    encode_msg_get_subchannel_response(Msg, <<>>,
				       TrUserData).


encode_msg_get_subchannel_response(#{} = M, Bin,
				   TrUserData) ->
    case M of
      #{subchannel := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_get_subchannel_response_subchannel(TrF1,
							       <<Bin/binary,
								 10>>,
							       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_get_socket_request(Msg, TrUserData) ->
    encode_msg_get_socket_request(Msg, <<>>, TrUserData).


encode_msg_get_socket_request(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{socket_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{summary := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= false -> B1;
	       true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_get_socket_response(Msg, TrUserData) ->
    encode_msg_get_socket_response(Msg, <<>>, TrUserData).


encode_msg_get_socket_response(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{socket := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_get_socket_response_socket(TrF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_any(Msg, TrUserData) ->
    encode_msg_any(Msg, <<>>, TrUserData).


encode_msg_any(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type_url := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case iolist_size(TrF2) of
	      0 -> B1;
	      _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_duration(Msg, TrUserData) ->
    encode_msg_duration(Msg, <<>>, TrUserData).


encode_msg_duration(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_timestamp(Msg, TrUserData) ->
    encode_msg_timestamp(Msg, <<>>, TrUserData).


encode_msg_timestamp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_double_value(Msg, TrUserData) ->
    encode_msg_double_value(Msg, <<>>, TrUserData).


encode_msg_double_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true ->
		   e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_float_value(Msg, TrUserData) ->
    encode_msg_float_value(Msg, <<>>, TrUserData).


encode_msg_float_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true ->
		   e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_int_64_value(Msg, TrUserData) ->
    encode_msg_int_64_value(Msg, <<>>, TrUserData).


encode_msg_int_64_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_u_int_64_value(Msg, TrUserData) ->
    encode_msg_u_int_64_value(Msg, <<>>, TrUserData).


encode_msg_u_int_64_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_int_32_value(Msg, TrUserData) ->
    encode_msg_int_32_value(Msg, <<>>, TrUserData).


encode_msg_int_32_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_u_int_32_value(Msg, TrUserData) ->
    encode_msg_u_int_32_value(Msg, <<>>, TrUserData).


encode_msg_u_int_32_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_bool_value(Msg, TrUserData) ->
    encode_msg_bool_value(Msg, <<>>, TrUserData).


encode_msg_bool_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= false -> Bin;
	       true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_string_value(Msg, TrUserData) ->
    encode_msg_string_value(Msg, <<>>, TrUserData).


encode_msg_string_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_bytes_value(Msg, TrUserData) ->
    encode_msg_bytes_value(Msg, <<>>, TrUserData).


encode_msg_bytes_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case iolist_size(TrF1) of
	      0 -> Bin;
	      _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

e_mfield_channel_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_channel_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_channel_channel_ref([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_channel_channel_ref(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_channel_channel_ref(Rest, Bin3, TrUserData);
e_field_channel_channel_ref([], Bin, _TrUserData) ->
    Bin.

e_mfield_channel_subchannel_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_subchannel_ref(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_channel_subchannel_ref([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_channel_subchannel_ref(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_channel_subchannel_ref(Rest, Bin3, TrUserData);
e_field_channel_subchannel_ref([], Bin, _TrUserData) ->
    Bin.

e_mfield_channel_socket_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_socket_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_channel_socket_ref([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_channel_socket_ref(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_channel_socket_ref(Rest, Bin3, TrUserData);
e_field_channel_socket_ref([], Bin, _TrUserData) -> Bin.

e_mfield_subchannel_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_subchannel_ref(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_subchannel_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_subchannel_channel_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_subchannel_channel_ref([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_subchannel_channel_ref(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_subchannel_channel_ref(Rest, Bin3, TrUserData);
e_field_subchannel_channel_ref([], Bin, _TrUserData) ->
    Bin.

e_mfield_subchannel_subchannel_ref(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_subchannel_ref(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_subchannel_subchannel_ref([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_subchannel_subchannel_ref(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_subchannel_subchannel_ref(Rest, Bin3,
				      TrUserData);
e_field_subchannel_subchannel_ref([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_subchannel_socket_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_socket_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_subchannel_socket_ref([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_subchannel_socket_ref(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_subchannel_socket_ref(Rest, Bin3, TrUserData);
e_field_subchannel_socket_ref([], Bin, _TrUserData) ->
    Bin.

e_mfield_channel_data_state(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_connectivity_state(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_data_trace(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_trace(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_data_last_call_started_timestamp(Msg,
						  Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_trace_event_timestamp(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_trace_event_channel_ref(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_channel_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_trace_event_subchannel_ref(Msg, Bin,
					    TrUserData) ->
    SubBin = encode_msg_subchannel_ref(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_trace_creation_timestamp(Msg, Bin,
					  TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_trace_events(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_trace_event(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_channel_trace_events([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_channel_trace_events(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_channel_trace_events(Rest, Bin3, TrUserData);
e_field_channel_trace_events([], Bin, _TrUserData) ->
    Bin.

e_mfield_server_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_server_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_server_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_server_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_server_listen_socket(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_socket_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_server_listen_socket([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_server_listen_socket(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_server_listen_socket(Rest, Bin3, TrUserData);
e_field_server_listen_socket([], Bin, _TrUserData) ->
    Bin.

e_mfield_server_data_trace(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_channel_trace(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_server_data_last_call_started_timestamp(Msg,
						 Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_ref(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_socket_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_socket_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_local(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_address(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_remote(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_address(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_security(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_security(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data_last_local_stream_created_timestamp(Msg,
							 Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data_last_remote_stream_created_timestamp(Msg,
							  Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data_last_message_sent_timestamp(Msg,
						 Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data_last_message_received_timestamp(Msg,
						     Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data_local_flow_control_window(Msg, Bin,
					       TrUserData) ->
    SubBin = encode_msg_int_64_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data_remote_flow_control_window(Msg,
						Bin, TrUserData) ->
    SubBin = encode_msg_int_64_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_data_option(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_socket_option(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_socket_data_option([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 106>>,
    Bin3 = e_mfield_socket_data_option(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_socket_data_option(Rest, Bin3, TrUserData);
e_field_socket_data_option([], Bin, _TrUserData) -> Bin.

e_mfield_other_address_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_any(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_address_tcpip_address(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_tcp_ip_address(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_address_uds_address(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_uds_address(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_address_other_address(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_other_address(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_other_security_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_any(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_security_tls(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_tls(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_security_other(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_other_security(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_option_additional(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_any(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_option_timeout_duration(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_duration(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_socket_option_linger_duration(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_duration(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_top_channels_response_channel(Msg, Bin,
					   TrUserData) ->
    SubBin = encode_msg_channel(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_get_top_channels_response_channel([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_get_top_channels_response_channel(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_get_top_channels_response_channel(Rest, Bin3,
					      TrUserData);
e_field_get_top_channels_response_channel([], Bin,
					  _TrUserData) ->
    Bin.

e_mfield_get_servers_response_server(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_server(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_get_servers_response_server([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_get_servers_response_server(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_get_servers_response_server(Rest, Bin3,
					TrUserData);
e_field_get_servers_response_server([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_get_server_response_server(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_server(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_server_sockets_response_socket_ref(Msg,
						Bin, TrUserData) ->
    SubBin = encode_msg_socket_ref(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_get_server_sockets_response_socket_ref([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_get_server_sockets_response_socket_ref(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    e_field_get_server_sockets_response_socket_ref(Rest,
						   Bin3, TrUserData);
e_field_get_server_sockets_response_socket_ref([], Bin,
					       _TrUserData) ->
    Bin.

e_mfield_get_channel_response_channel(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_channel(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_subchannel_response_subchannel(Msg, Bin,
					    TrUserData) ->
    SubBin = encode_msg_subchannel(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_socket_response_socket(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_socket(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_channel_connectivity_state.State'('UNKNOWN',
					  Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_channel_connectivity_state.State'('IDLE', Bin,
					  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_channel_connectivity_state.State'('CONNECTING',
					  Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_channel_connectivity_state.State'('READY', Bin,
					  _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_channel_connectivity_state.State'('TRANSIENT_FAILURE',
					  Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_channel_connectivity_state.State'('SHUTDOWN',
					  Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_channel_connectivity_state.State'(V, Bin,
					  _TrUserData) ->
    e_varint(V, Bin).

'e_enum_channel_trace_event.Severity'('CT_UNKNOWN', Bin,
				      _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_channel_trace_event.Severity'('CT_INFO', Bin,
				      _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_channel_trace_event.Severity'('CT_WARNING', Bin,
				      _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_channel_trace_event.Severity'('CT_ERROR', Bin,
				      _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_channel_trace_event.Severity'(V, Bin,
				      _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(channel, Bin, TrUserData) ->
    id(decode_msg_channel(Bin, TrUserData), TrUserData);
decode_msg_2_doit(subchannel, Bin, TrUserData) ->
    id(decode_msg_subchannel(Bin, TrUserData), TrUserData);
decode_msg_2_doit(channel_connectivity_state, Bin,
		  TrUserData) ->
    id(decode_msg_channel_connectivity_state(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(channel_data, Bin, TrUserData) ->
    id(decode_msg_channel_data(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(channel_trace_event, Bin,
		  TrUserData) ->
    id(decode_msg_channel_trace_event(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(channel_trace, Bin, TrUserData) ->
    id(decode_msg_channel_trace(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(channel_ref, Bin, TrUserData) ->
    id(decode_msg_channel_ref(Bin, TrUserData), TrUserData);
decode_msg_2_doit(subchannel_ref, Bin, TrUserData) ->
    id(decode_msg_subchannel_ref(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(socket_ref, Bin, TrUserData) ->
    id(decode_msg_socket_ref(Bin, TrUserData), TrUserData);
decode_msg_2_doit(server_ref, Bin, TrUserData) ->
    id(decode_msg_server_ref(Bin, TrUserData), TrUserData);
decode_msg_2_doit(server, Bin, TrUserData) ->
    id(decode_msg_server(Bin, TrUserData), TrUserData);
decode_msg_2_doit(server_data, Bin, TrUserData) ->
    id(decode_msg_server_data(Bin, TrUserData), TrUserData);
decode_msg_2_doit(socket, Bin, TrUserData) ->
    id(decode_msg_socket(Bin, TrUserData), TrUserData);
decode_msg_2_doit(socket_data, Bin, TrUserData) ->
    id(decode_msg_socket_data(Bin, TrUserData), TrUserData);
decode_msg_2_doit(tcp_ip_address, Bin, TrUserData) ->
    id(decode_msg_tcp_ip_address(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(uds_address, Bin, TrUserData) ->
    id(decode_msg_uds_address(Bin, TrUserData), TrUserData);
decode_msg_2_doit(other_address, Bin, TrUserData) ->
    id(decode_msg_other_address(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(address, Bin, TrUserData) ->
    id(decode_msg_address(Bin, TrUserData), TrUserData);
decode_msg_2_doit(tls, Bin, TrUserData) ->
    id(decode_msg_tls(Bin, TrUserData), TrUserData);
decode_msg_2_doit(other_security, Bin, TrUserData) ->
    id(decode_msg_other_security(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(security, Bin, TrUserData) ->
    id(decode_msg_security(Bin, TrUserData), TrUserData);
decode_msg_2_doit(socket_option, Bin, TrUserData) ->
    id(decode_msg_socket_option(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(socket_option_timeout, Bin,
		  TrUserData) ->
    id(decode_msg_socket_option_timeout(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(socket_option_linger, Bin,
		  TrUserData) ->
    id(decode_msg_socket_option_linger(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(socket_option_tcp_info, Bin,
		  TrUserData) ->
    id(decode_msg_socket_option_tcp_info(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_top_channels_request, Bin,
		  TrUserData) ->
    id(decode_msg_get_top_channels_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_top_channels_response, Bin,
		  TrUserData) ->
    id(decode_msg_get_top_channels_response(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(get_servers_request, Bin,
		  TrUserData) ->
    id(decode_msg_get_servers_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_servers_response, Bin,
		  TrUserData) ->
    id(decode_msg_get_servers_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_server_request, Bin,
		  TrUserData) ->
    id(decode_msg_get_server_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_server_response, Bin,
		  TrUserData) ->
    id(decode_msg_get_server_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_server_sockets_request, Bin,
		  TrUserData) ->
    id(decode_msg_get_server_sockets_request(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(get_server_sockets_response, Bin,
		  TrUserData) ->
    id(decode_msg_get_server_sockets_response(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(get_channel_request, Bin,
		  TrUserData) ->
    id(decode_msg_get_channel_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_channel_response, Bin,
		  TrUserData) ->
    id(decode_msg_get_channel_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_subchannel_request, Bin,
		  TrUserData) ->
    id(decode_msg_get_subchannel_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_subchannel_response, Bin,
		  TrUserData) ->
    id(decode_msg_get_subchannel_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_socket_request, Bin,
		  TrUserData) ->
    id(decode_msg_get_socket_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_socket_response, Bin,
		  TrUserData) ->
    id(decode_msg_get_socket_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(any, Bin, TrUserData) ->
    id(decode_msg_any(Bin, TrUserData), TrUserData);
decode_msg_2_doit(duration, Bin, TrUserData) ->
    id(decode_msg_duration(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timestamp, Bin, TrUserData) ->
    id(decode_msg_timestamp(Bin, TrUserData), TrUserData);
decode_msg_2_doit(double_value, Bin, TrUserData) ->
    id(decode_msg_double_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(float_value, Bin, TrUserData) ->
    id(decode_msg_float_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(int_64_value, Bin, TrUserData) ->
    id(decode_msg_int_64_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_64_value, Bin, TrUserData) ->
    id(decode_msg_u_int_64_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(int_32_value, Bin, TrUserData) ->
    id(decode_msg_int_32_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_32_value, Bin, TrUserData) ->
    id(decode_msg_u_int_32_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bool_value, Bin, TrUserData) ->
    id(decode_msg_bool_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(string_value, Bin, TrUserData) ->
    id(decode_msg_string_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bytes_value, Bin, TrUserData) ->
    id(decode_msg_bytes_value(Bin, TrUserData), TrUserData).



decode_msg_channel(Bin, TrUserData) ->
    dfp_read_field_def_channel(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), id([], TrUserData),
			       id([], TrUserData), id([], TrUserData),
			       TrUserData).

dfp_read_field_def_channel(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_channel_ref(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_channel(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_channel_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_channel(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_channel_channel_ref(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_channel(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_channel_subchannel_ref(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_channel(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_channel_socket_ref(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_channel(<<>>, 0, 0, F@_1, F@_2, R1,
			   R2, R3, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{channel_ref => lists_reverse(R1, TrUserData)}
	 end,
    S5 = if R2 == '$undef' -> S4;
	    true ->
		S4#{subchannel_ref => lists_reverse(R2, TrUserData)}
	 end,
    if R3 == '$undef' -> S5;
       true -> S5#{socket_ref => lists_reverse(R3, TrUserData)}
    end;
dfp_read_field_def_channel(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_channel(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_channel(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_channel(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_channel(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_channel_ref(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      18 ->
	  d_field_channel_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      26 ->
	  d_field_channel_channel_ref(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_channel_subchannel_ref(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_channel_socket_ref(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_channel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_channel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_channel(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_channel(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_channel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_channel(<<>>, 0, 0, F@_1, F@_2, R1,
			  R2, R3, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{channel_ref => lists_reverse(R1, TrUserData)}
	 end,
    S5 = if R2 == '$undef' -> S4;
	    true ->
		S4#{subchannel_ref => lists_reverse(R2, TrUserData)}
	 end,
    if R3 == '$undef' -> S5;
       true -> S5#{socket_ref => lists_reverse(R3, TrUserData)}
    end.

d_field_channel_ref(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_channel_ref(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_channel_ref(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel(RestF, 0, 0,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_channel_ref(Prev, NewFValue,
							    TrUserData)
			       end,
			       F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_channel_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_channel_data(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_channel_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_data(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel(RestF, 0, 0, F@_1,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_channel_data(Prev, NewFValue,
							     TrUserData)
			       end,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_channel_channel_ref(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_channel_channel_ref(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_channel_channel_ref(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel(RestF, 0, 0, F@_1, F@_2,
			       cons(NewFValue, Prev, TrUserData), F@_4, F@_5,
			       TrUserData).

d_field_channel_subchannel_ref(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_channel_subchannel_ref(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_channel_subchannel_ref(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_subchannel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel(RestF, 0, 0, F@_1, F@_2,
			       F@_3, cons(NewFValue, Prev, TrUserData), F@_5,
			       TrUserData).

d_field_channel_socket_ref(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_channel_socket_ref(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_channel_socket_ref(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, cons(NewFValue, Prev, TrUserData),
			       TrUserData).

skip_varint_channel(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_channel(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_channel(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_channel(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_channel(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_channel(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_channel(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_channel(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_channel(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_channel(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_channel(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_channel(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

decode_msg_subchannel(Bin, TrUserData) ->
    dfp_read_field_def_subchannel(Bin, 0, 0,
				  id('$undef', TrUserData),
				  id('$undef', TrUserData), id([], TrUserData),
				  id([], TrUserData), id([], TrUserData),
				  TrUserData).

dfp_read_field_def_subchannel(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subchannel_ref(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_subchannel(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subchannel_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_subchannel(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subchannel_channel_ref(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_subchannel(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subchannel_subchannel_ref(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_subchannel(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_subchannel_socket_ref(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_subchannel(<<>>, 0, 0, F@_1, F@_2,
			      R1, R2, R3, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{channel_ref => lists_reverse(R1, TrUserData)}
	 end,
    S5 = if R2 == '$undef' -> S4;
	    true ->
		S4#{subchannel_ref => lists_reverse(R2, TrUserData)}
	 end,
    if R3 == '$undef' -> S5;
       true -> S5#{socket_ref => lists_reverse(R3, TrUserData)}
    end;
dfp_read_field_def_subchannel(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_subchannel(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_subchannel(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_subchannel(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_subchannel(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_subchannel_ref(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      18 ->
	  d_field_subchannel_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      26 ->
	  d_field_subchannel_channel_ref(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_subchannel_subchannel_ref(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_subchannel_socket_ref(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_subchannel(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_subchannel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_subchannel(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_subchannel(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_subchannel(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_subchannel(<<>>, 0, 0, F@_1, F@_2, R1,
			     R2, R3, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{channel_ref => lists_reverse(R1, TrUserData)}
	 end,
    S5 = if R2 == '$undef' -> S4;
	    true ->
		S4#{subchannel_ref => lists_reverse(R2, TrUserData)}
	 end,
    if R3 == '$undef' -> S5;
       true -> S5#{socket_ref => lists_reverse(R3, TrUserData)}
    end.

d_field_subchannel_ref(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_subchannel_ref(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_subchannel_ref(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_subchannel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_subchannel(RestF, 0, 0,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_subchannel_ref(Prev,
								  NewFValue,
								  TrUserData)
				  end,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_subchannel_data(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_subchannel_data(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_subchannel_data(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_data(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_subchannel(RestF, 0, 0, F@_1,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_channel_data(Prev, NewFValue,
								TrUserData)
				  end,
				  F@_3, F@_4, F@_5, TrUserData).

d_field_subchannel_channel_ref(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_subchannel_channel_ref(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_subchannel_channel_ref(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_subchannel(RestF, 0, 0, F@_1, F@_2,
				  cons(NewFValue, Prev, TrUserData), F@_4, F@_5,
				  TrUserData).

d_field_subchannel_subchannel_ref(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_subchannel_subchannel_ref(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_subchannel_subchannel_ref(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_subchannel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_subchannel(RestF, 0, 0, F@_1, F@_2,
				  F@_3, cons(NewFValue, Prev, TrUserData), F@_5,
				  TrUserData).

d_field_subchannel_socket_ref(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_subchannel_socket_ref(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_subchannel_socket_ref(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_subchannel(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_subchannel(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_subchannel(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_subchannel(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_subchannel(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_subchannel(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_subchannel(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_subchannel(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_subchannel(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_subchannel(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_subchannel(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_subchannel(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_subchannel(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_subchannel(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_subchannel(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_channel_connectivity_state(Bin,
				      TrUserData) ->
    dfp_read_field_def_channel_connectivity_state(Bin, 0, 0,
						  id('UNKNOWN', TrUserData),
						  TrUserData).

dfp_read_field_def_channel_connectivity_state(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_channel_connectivity_state_state(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_channel_connectivity_state(<<>>, 0,
					      0, F@_1, _) ->
    #{state => F@_1};
dfp_read_field_def_channel_connectivity_state(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_channel_connectivity_state(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_channel_connectivity_state(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_channel_connectivity_state(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_channel_connectivity_state(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_channel_connectivity_state_state(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_channel_connectivity_state(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_channel_connectivity_state(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_channel_connectivity_state(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_channel_connectivity_state(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_channel_connectivity_state(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_channel_connectivity_state(<<>>, 0, 0,
					     F@_1, _) ->
    #{state => F@_1}.

d_field_channel_connectivity_state_state(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_channel_connectivity_state_state(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_channel_connectivity_state_state(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_channel_connectivity_state.State'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_channel_connectivity_state(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_channel_connectivity_state(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_channel_connectivity_state(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_channel_connectivity_state(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_channel_connectivity_state(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_channel_connectivity_state(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_channel_connectivity_state(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_channel_connectivity_state(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_connectivity_state(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_channel_connectivity_state(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_connectivity_state(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_channel_connectivity_state(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_channel_connectivity_state(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_channel_connectivity_state(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_channel_connectivity_state(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_channel_data(Bin, TrUserData) ->
    dfp_read_field_def_channel_data(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id(<<>>, TrUserData),
				    id('$undef', TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_channel_data(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_channel_data_state(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_channel_data(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_channel_data_target(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_channel_data(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_channel_data_trace(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_channel_data(<<32, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_channel_data_calls_started(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
dfp_read_field_def_channel_data(<<40, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_channel_data_calls_succeeded(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
dfp_read_field_def_channel_data(<<48, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_channel_data_calls_failed(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData);
dfp_read_field_def_channel_data(<<58, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    d_field_channel_data_last_call_started_timestamp(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     TrUserData);
dfp_read_field_def_channel_data(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{target => F@_2, calls_started => F@_4,
	   calls_succeeded => F@_5, calls_failed => F@_6},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{state => F@_1}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{trace => F@_3}
	 end,
    if F@_7 == '$undef' -> S3;
       true -> S3#{last_call_started_timestamp => F@_7}
    end;
dfp_read_field_def_channel_data(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    dg_read_field_def_channel_data(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				   TrUserData).

dg_read_field_def_channel_data(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_channel_data(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, TrUserData);
dg_read_field_def_channel_data(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_channel_data_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_channel_data_target(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_channel_data_trace(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_channel_data_calls_started(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
      40 ->
	  d_field_channel_data_calls_succeeded(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, TrUserData);
      48 ->
	  d_field_channel_data_calls_failed(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
      58 ->
	  d_field_channel_data_last_call_started_timestamp(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_channel_data(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_channel_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_channel_data(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData);
	    3 ->
		skip_group_channel_data(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
	    5 ->
		skip_32_channel_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_channel_data(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{target => F@_2, calls_started => F@_4,
	   calls_succeeded => F@_5, calls_failed => F@_6},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{state => F@_1}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{trace => F@_3}
	 end,
    if F@_7 == '$undef' -> S3;
       true -> S3#{last_call_started_timestamp => F@_7}
    end.

d_field_channel_data_state(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_channel_data_state(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_channel_data_state(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_connectivity_state(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_data(RestF, 0, 0,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_channel_connectivity_state(Prev,
										NewFValue,
										TrUserData)
				    end,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

d_field_channel_data_target(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    d_field_channel_data_target(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
d_field_channel_data_target(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_channel_data(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

d_field_channel_data_trace(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_channel_data_trace(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_channel_data_trace(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_trace(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_data(RestF, 0, 0, F@_1, F@_2,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_channel_trace(Prev,
								   NewFValue,
								   TrUserData)
				    end,
				    F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_channel_data_calls_started(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    d_field_channel_data_calls_started(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
d_field_channel_data_calls_started(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				   F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_channel_data(RestF, 0, 0, F@_1, F@_2,
				    F@_3, NewFValue, F@_5, F@_6, F@_7,
				    TrUserData).

d_field_channel_data_calls_succeeded(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData)
    when N < 57 ->
    d_field_channel_data_calls_succeeded(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, TrUserData);
d_field_channel_data_calls_succeeded(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				     F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_channel_data(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, NewFValue, F@_6, F@_7,
				    TrUserData).

d_field_channel_data_calls_failed(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData)
    when N < 57 ->
    d_field_channel_data_calls_failed(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, TrUserData);
d_field_channel_data_calls_failed(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_channel_data(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, NewFValue, F@_7,
				    TrUserData).

d_field_channel_data_last_call_started_timestamp(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_channel_data_last_call_started_timestamp(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, TrUserData);
d_field_channel_data_last_call_started_timestamp(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, Prev,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_data(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_timestamp(Prev, NewFValue,
							       TrUserData)
				    end,
				    TrUserData).

skip_varint_channel_data(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    skip_varint_channel_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_channel_data(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    dfp_read_field_def_channel_data(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

skip_length_delimited_channel_data(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_channel_data(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_channel_data(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_data(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_channel_data(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_data(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_channel_data(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_channel_data(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

skip_64_channel_data(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_channel_data(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData).

decode_msg_channel_trace_event(Bin, TrUserData) ->
    dfp_read_field_def_channel_trace_event(Bin, 0, 0,
					   id(<<>>, TrUserData),
					   id('CT_UNKNOWN', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   TrUserData).

dfp_read_field_def_channel_trace_event(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_channel_trace_event_description(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_trace_event(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_channel_trace_event_severity(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_trace_event(<<26,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_channel_trace_event_timestamp(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_trace_event(<<34,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_channel_trace_event_channel_ref(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_trace_event(<<42,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_channel_trace_event_subchannel_ref(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData);
dfp_read_field_def_channel_trace_event(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, _) ->
    S1 = #{description => F@_1, severity => F@_2},
    S2 = if F@_3 == '$undef' -> S1;
	    true -> S1#{timestamp => F@_3}
	 end,
    if F@_4 == '$undef' -> S2;
       true -> S2#{child_ref => F@_4}
    end;
dfp_read_field_def_channel_trace_event(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_channel_trace_event(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_channel_trace_event(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_channel_trace_event(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
dg_read_field_def_channel_trace_event(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_channel_trace_event_description(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
      16 ->
	  d_field_channel_trace_event_severity(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_channel_trace_event_timestamp(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      34 ->
	  d_field_channel_trace_event_channel_ref(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
      42 ->
	  d_field_channel_trace_event_subchannel_ref(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_channel_trace_event(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_channel_trace_event(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_channel_trace_event(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
	    3 ->
		skip_group_channel_trace_event(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_channel_trace_event(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_channel_trace_event(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, _) ->
    S1 = #{description => F@_1, severity => F@_2},
    S2 = if F@_3 == '$undef' -> S1;
	    true -> S1#{timestamp => F@_3}
	 end,
    if F@_4 == '$undef' -> S2;
       true -> S2#{child_ref => F@_4}
    end.

d_field_channel_trace_event_description(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    d_field_channel_trace_event_description(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
d_field_channel_trace_event_description(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, F@_3, F@_4,
					TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_channel_trace_event(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, F@_4,
					   TrUserData).

d_field_channel_trace_event_severity(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_channel_trace_event_severity(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_channel_trace_event_severity(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_channel_trace_event.Severity'(begin
						    <<Res:32/signed-native>> =
							<<(X bsl N +
							     Acc):32/unsigned-native>>,
						    id(Res, TrUserData)
						  end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_channel_trace_event(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, F@_4,
					   TrUserData).

d_field_channel_trace_event_timestamp(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_channel_trace_event_timestamp(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_channel_trace_event_timestamp(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, Prev, F@_4,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_trace_event(RestF, 0, 0,
					   F@_1, F@_2,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_timestamp(Prev,
								      NewFValue,
								      TrUserData)
					   end,
					   F@_4, TrUserData).

d_field_channel_trace_event_channel_ref(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    d_field_channel_trace_event_channel_ref(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
d_field_channel_trace_event_channel_ref(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, Prev,
					TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_trace_event(RestF, 0, 0,
					   F@_1, F@_2, F@_3,
					   case Prev of
					     '$undef' ->
						 id({channel_ref, NewFValue},
						    TrUserData);
					     {channel_ref, MVPrev} ->
						 id({channel_ref,
						     merge_msg_channel_ref(MVPrev,
									   NewFValue,
									   TrUserData)},
						    TrUserData);
					     _ ->
						 id({channel_ref, NewFValue},
						    TrUserData)
					   end,
					   TrUserData).

d_field_channel_trace_event_subchannel_ref(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData)
    when N < 57 ->
    d_field_channel_trace_event_subchannel_ref(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, TrUserData);
d_field_channel_trace_event_subchannel_ref(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, Prev,
					   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_subchannel_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_trace_event(RestF, 0, 0,
					   F@_1, F@_2, F@_3,
					   case Prev of
					     '$undef' ->
						 id({subchannel_ref, NewFValue},
						    TrUserData);
					     {subchannel_ref, MVPrev} ->
						 id({subchannel_ref,
						     merge_msg_subchannel_ref(MVPrev,
									      NewFValue,
									      TrUserData)},
						    TrUserData);
					     _ ->
						 id({subchannel_ref, NewFValue},
						    TrUserData)
					   end,
					   TrUserData).

skip_varint_channel_trace_event(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_channel_trace_event(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
skip_varint_channel_trace_event(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_channel_trace_event(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_channel_trace_event(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 57 ->
    skip_length_delimited_channel_trace_event(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
skip_length_delimited_channel_trace_event(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_trace_event(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_channel_trace_event(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_trace_event(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_channel_trace_event(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_channel_trace_event(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_channel_trace_event(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_channel_trace_event(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_channel_trace(Bin, TrUserData) ->
    dfp_read_field_def_channel_trace(Bin, 0, 0,
				     id(0, TrUserData),
				     id('$undef', TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_channel_trace(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_channel_trace_num_events_logged(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_channel_trace(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_channel_trace_creation_timestamp(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_channel_trace(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_channel_trace_events(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_channel_trace(<<>>, 0, 0, F@_1, F@_2,
				 R1, TrUserData) ->
    S1 = #{num_events_logged => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{creation_timestamp => F@_2}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{events => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_channel_trace(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_channel_trace(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_channel_trace(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_channel_trace(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_channel_trace(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_channel_trace_num_events_logged(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      18 ->
	  d_field_channel_trace_creation_timestamp(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      26 ->
	  d_field_channel_trace_events(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_channel_trace(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_channel_trace(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_channel_trace(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_channel_trace(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_channel_trace(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_channel_trace(<<>>, 0, 0, F@_1, F@_2,
				R1, TrUserData) ->
    S1 = #{num_events_logged => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{creation_timestamp => F@_2}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{events => lists_reverse(R1, TrUserData)}
    end.

d_field_channel_trace_num_events_logged(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_channel_trace_num_events_logged(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
d_field_channel_trace_num_events_logged(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_channel_trace(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, TrUserData).

d_field_channel_trace_creation_timestamp(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_channel_trace_creation_timestamp(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
d_field_channel_trace_creation_timestamp(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, Prev, F@_3,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_trace(RestF, 0, 0, F@_1,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_timestamp(Prev, NewFValue,
								TrUserData)
				     end,
				     F@_3, TrUserData).

d_field_channel_trace_events(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_channel_trace_events(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_channel_trace_events(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_trace_event(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_channel_trace(RestF, 0, 0, F@_1,
				     F@_2, cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_channel_trace(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_channel_trace(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_channel_trace(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_channel_trace(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_channel_trace(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_channel_trace(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_channel_trace(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_trace(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_channel_trace(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_trace(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_channel_trace(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_channel_trace(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_channel_trace(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_channel_trace(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

decode_msg_channel_ref(Bin, TrUserData) ->
    dfp_read_field_def_channel_ref(Bin, 0, 0,
				   id(0, TrUserData), id(<<>>, TrUserData),
				   TrUserData).

dfp_read_field_def_channel_ref(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_channel_ref_channel_id(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_channel_ref(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_channel_ref_name(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_channel_ref(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{channel_id => F@_1, name => F@_2};
dfp_read_field_def_channel_ref(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_channel_ref(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_channel_ref(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_channel_ref(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_channel_ref(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_channel_ref_channel_id(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_channel_ref_name(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_channel_ref(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_channel_ref(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_channel_ref(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_channel_ref(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_channel_ref(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_channel_ref(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #{channel_id => F@_1, name => F@_2}.

d_field_channel_ref_channel_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_channel_ref_channel_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_channel_ref_channel_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_channel_ref(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_channel_ref_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_channel_ref_name(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_channel_ref_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_channel_ref(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_channel_ref(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_channel_ref(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_channel_ref(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_channel_ref(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_channel_ref(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_channel_ref(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_channel_ref(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_ref(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_channel_ref(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_ref(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_channel_ref(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_channel_ref(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_channel_ref(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_channel_ref(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_subchannel_ref(Bin, TrUserData) ->
    dfp_read_field_def_subchannel_ref(Bin, 0, 0,
				      id(0, TrUserData), id(<<>>, TrUserData),
				      TrUserData).

dfp_read_field_def_subchannel_ref(<<56, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_subchannel_ref_subchannel_id(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_subchannel_ref(<<66, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_subchannel_ref_name(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_subchannel_ref(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #{subchannel_id => F@_1, name => F@_2};
dfp_read_field_def_subchannel_ref(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_subchannel_ref(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_subchannel_ref(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_subchannel_ref(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_subchannel_ref(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      56 ->
	  d_field_subchannel_ref_subchannel_id(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      66 ->
	  d_field_subchannel_ref_name(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_subchannel_ref(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_subchannel_ref(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_subchannel_ref(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_subchannel_ref(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_subchannel_ref(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_subchannel_ref(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #{subchannel_id => F@_1, name => F@_2}.

d_field_subchannel_ref_subchannel_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_subchannel_ref_subchannel_id(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_subchannel_ref_subchannel_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_subchannel_ref(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_subchannel_ref_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_subchannel_ref_name(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_subchannel_ref_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_subchannel_ref(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_subchannel_ref(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_subchannel_ref(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_subchannel_ref(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_subchannel_ref(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_subchannel_ref(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_subchannel_ref(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_subchannel_ref(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_subchannel_ref(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_subchannel_ref(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_subchannel_ref(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_subchannel_ref(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_subchannel_ref(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_subchannel_ref(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_subchannel_ref(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_socket_ref(Bin, TrUserData) ->
    dfp_read_field_def_socket_ref(Bin, 0, 0,
				  id(0, TrUserData), id(<<>>, TrUserData),
				  TrUserData).

dfp_read_field_def_socket_ref(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_socket_ref_socket_id(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_socket_ref(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_socket_ref_name(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_socket_ref(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #{socket_id => F@_1, name => F@_2};
dfp_read_field_def_socket_ref(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_socket_ref(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_socket_ref(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_socket_ref(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_socket_ref(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      24 ->
	  d_field_socket_ref_socket_id(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      34 ->
	  d_field_socket_ref_name(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_socket_ref(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_socket_ref(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_socket_ref(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_socket_ref(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_socket_ref(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_socket_ref(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{socket_id => F@_1, name => F@_2}.

d_field_socket_ref_socket_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_socket_ref_socket_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_socket_ref_socket_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_socket_ref(RestF, 0, 0, NewFValue,
				  F@_2, TrUserData).

d_field_socket_ref_name(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_socket_ref_name(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_socket_ref_name(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_socket_ref(RestF, 0, 0, F@_1,
				  NewFValue, TrUserData).

skip_varint_socket_ref(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_socket_ref(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_socket_ref(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_socket_ref(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_socket_ref(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_socket_ref(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_socket_ref(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_ref(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_socket_ref(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_ref(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_socket_ref(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_socket_ref(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_socket_ref(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_socket_ref(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_server_ref(Bin, TrUserData) ->
    dfp_read_field_def_server_ref(Bin, 0, 0,
				  id(0, TrUserData), id(<<>>, TrUserData),
				  TrUserData).

dfp_read_field_def_server_ref(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_server_ref_server_id(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_server_ref(<<50, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_server_ref_name(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_server_ref(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #{server_id => F@_1, name => F@_2};
dfp_read_field_def_server_ref(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_server_ref(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_server_ref(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_ref(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_server_ref(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      40 ->
	  d_field_server_ref_server_id(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      50 ->
	  d_field_server_ref_name(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server_ref(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_server_ref(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_server_ref(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_server_ref(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_server_ref(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_server_ref(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{server_id => F@_1, name => F@_2}.

d_field_server_ref_server_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_server_ref_server_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_server_ref_server_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_server_ref(RestF, 0, 0, NewFValue,
				  F@_2, TrUserData).

d_field_server_ref_name(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_server_ref_name(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_server_ref_name(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_server_ref(RestF, 0, 0, F@_1,
				  NewFValue, TrUserData).

skip_varint_server_ref(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_server_ref(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_server_ref(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_server_ref(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_server_ref(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_server_ref(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_server_ref(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_ref(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_server_ref(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server_ref(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_server_ref(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_server_ref(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_server_ref(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_server_ref(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_server(Bin, TrUserData) ->
    dfp_read_field_def_server(Bin, 0, 0,
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), id([], TrUserData),
			      TrUserData).

dfp_read_field_def_server(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_server_ref(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_server(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_server_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_server(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_server_listen_socket(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_server(<<>>, 0, 0, F@_1, F@_2, R1,
			  TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true ->
	   S3#{listen_socket => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_server(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    dg_read_field_def_server(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData).

dg_read_field_def_server(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_server(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_server_ref(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      18 ->
	  d_field_server_data(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      26 ->
	  d_field_server_listen_socket(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    1 ->
		skip_64_server(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    2 ->
		skip_length_delimited_server(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    3 ->
		skip_group_server(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    5 ->
		skip_32_server(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_server(<<>>, 0, 0, F@_1, F@_2, R1,
			 TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true ->
	   S3#{listen_socket => lists_reverse(R1, TrUserData)}
    end.

d_field_server_ref(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_server_ref(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_server_ref(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_server_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_server(RestF, 0, 0,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_server_ref(Prev, NewFValue,
							  TrUserData)
			      end,
			      F@_2, F@_3, TrUserData).

d_field_server_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_server_data(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_server_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_server_data(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_server(RestF, 0, 0, F@_1,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_server_data(Prev, NewFValue,
							   TrUserData)
			      end,
			      F@_3, TrUserData).

d_field_server_listen_socket(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_server_listen_socket(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_server_listen_socket(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_server(RestF, 0, 0, F@_1, F@_2,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_server(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_server(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
skip_varint_server(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_server(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_length_delimited_server(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_server(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_server(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData).

skip_group_server(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      TrUserData).

skip_32_server(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_server(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_64_server(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_server(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

decode_msg_server_data(Bin, TrUserData) ->
    dfp_read_field_def_server_data(Bin, 0, 0,
				   id('$undef', TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_server_data(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_server_data_trace(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_server_data(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_server_data_calls_started(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_server_data(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_server_data_calls_succeeded(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_server_data(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_server_data_calls_failed(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_server_data(<<42, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_server_data_last_call_started_timestamp(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData);
dfp_read_field_def_server_data(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, _) ->
    S1 = #{calls_started => F@_2, calls_succeeded => F@_3,
	   calls_failed => F@_4},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trace => F@_1}
	 end,
    if F@_5 == '$undef' -> S2;
       true -> S2#{last_call_started_timestamp => F@_5}
    end;
dfp_read_field_def_server_data(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_server_data(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_server_data(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_data(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
dg_read_field_def_server_data(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_server_data_trace(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      16 ->
	  d_field_server_data_calls_started(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_server_data_calls_succeeded(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      32 ->
	  d_field_server_data_calls_failed(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_server_data_last_call_started_timestamp(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server_data(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_server_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    2 ->
		skip_length_delimited_server_data(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
	    3 ->
		skip_group_server_data(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_server_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData)
	  end
    end;
dg_read_field_def_server_data(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    S1 = #{calls_started => F@_2, calls_succeeded => F@_3,
	   calls_failed => F@_4},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{trace => F@_1}
	 end,
    if F@_5 == '$undef' -> S2;
       true -> S2#{last_call_started_timestamp => F@_5}
    end.

d_field_server_data_trace(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_server_data_trace(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_server_data_trace(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel_trace(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_server_data(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_channel_trace(Prev,
								  NewFValue,
								  TrUserData)
				   end,
				   F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_server_data_calls_started(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_server_data_calls_started(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_server_data_calls_started(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_server_data(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_server_data_calls_succeeded(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_server_data_calls_succeeded(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_server_data_calls_succeeded(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_server_data(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, TrUserData).

d_field_server_data_calls_failed(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_server_data_calls_failed(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_server_data_calls_failed(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_server_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, TrUserData).

d_field_server_data_last_call_started_timestamp(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData)
    when N < 57 ->
    d_field_server_data_last_call_started_timestamp(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
d_field_server_data_last_call_started_timestamp(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_server_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_timestamp(Prev, NewFValue,
							      TrUserData)
				   end,
				   TrUserData).

skip_varint_server_data(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_server_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
skip_varint_server_data(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_server_data(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_server_data(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    skip_length_delimited_server_data(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
skip_length_delimited_server_data(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_data(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_group_server_data(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server_data(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_32_server_data(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_server_data(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_64_server_data(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_server_data(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

decode_msg_socket(Bin, TrUserData) ->
    dfp_read_field_def_socket(Bin, 0, 0,
			      id('$undef', TrUserData),
			      id('$undef', TrUserData),
			      id('$undef', TrUserData),
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), id(<<>>, TrUserData),
			      TrUserData).

dfp_read_field_def_socket(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_socket_ref(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, TrUserData);
dfp_read_field_def_socket(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_socket_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_socket(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_socket_local(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_socket(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_socket_remote(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_socket(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_socket_security(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_socket(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_socket_remote_name(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_socket(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, _) ->
    S1 = #{remote_name => F@_6},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{local => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{remote => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{security => F@_5}
    end;
dfp_read_field_def_socket(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_socket(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_socket(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_socket(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_socket(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_socket_ref(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, TrUserData);
      18 ->
	  d_field_socket_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, TrUserData);
      26 ->
	  d_field_socket_local(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, TrUserData);
      34 ->
	  d_field_socket_remote(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, TrUserData);
      42 ->
	  d_field_socket_security(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, TrUserData);
      50 ->
	  d_field_socket_remote_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_socket(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_socket(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, TrUserData);
	    2 ->
		skip_length_delimited_socket(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
	    3 ->
		skip_group_socket(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_socket(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, TrUserData)
	  end
    end;
dg_read_field_def_socket(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, _) ->
    S1 = #{remote_name => F@_6},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{ref => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{data => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{local => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{remote => F@_4}
	 end,
    if F@_5 == '$undef' -> S5;
       true -> S5#{security => F@_5}
    end.

d_field_socket_ref(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_socket_ref(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_socket_ref(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket(RestF, 0, 0,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_socket_ref(Prev, NewFValue,
							  TrUserData)
			      end,
			      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_socket_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_socket_data(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_socket_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, Prev, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket_data(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket(RestF, 0, 0, F@_1,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_socket_data(Prev, NewFValue,
							   TrUserData)
			      end,
			      F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_socket_local(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_socket_local(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_socket_local(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, Prev, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_address(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket(RestF, 0, 0, F@_1, F@_2,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_address(Prev, NewFValue,
						       TrUserData)
			      end,
			      F@_4, F@_5, F@_6, TrUserData).

d_field_socket_remote(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_socket_remote(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_socket_remote(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_address(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket(RestF, 0, 0, F@_1, F@_2, F@_3,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_address(Prev, NewFValue,
						       TrUserData)
			      end,
			      F@_5, F@_6, TrUserData).

d_field_socket_security(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_socket_security(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_socket_security(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_security(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_security(Prev, NewFValue,
							TrUserData)
			      end,
			      F@_6, TrUserData).

d_field_socket_remote_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_socket_remote_name(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_socket_remote_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_socket(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, TrUserData).

skip_varint_socket(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_socket(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, TrUserData);
skip_varint_socket(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_socket(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_socket(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    skip_length_delimited_socket(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
skip_length_delimited_socket(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, TrUserData).

skip_group_socket(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, TrUserData).

skip_32_socket(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_socket(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_socket(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_socket(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_socket_data(Bin, TrUserData) ->
    dfp_read_field_def_socket_data(Bin, 0, 0,
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_socket_data(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_streams_started(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
					TrUserData);
dfp_read_field_def_socket_data(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_streams_succeeded(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, TrUserData);
dfp_read_field_def_socket_data(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_streams_failed(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, F@_13,
				       TrUserData);
dfp_read_field_def_socket_data(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_messages_sent(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, F@_13,
				      TrUserData);
dfp_read_field_def_socket_data(<<40, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_messages_received(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, TrUserData);
dfp_read_field_def_socket_data(<<48, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_keep_alives_sent(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
dfp_read_field_def_socket_data(<<58, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_last_local_stream_created_timestamp(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13,
							    TrUserData);
dfp_read_field_def_socket_data(<<66, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_last_remote_stream_created_timestamp(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     TrUserData);
dfp_read_field_def_socket_data(<<74, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_last_message_sent_timestamp(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, TrUserData);
dfp_read_field_def_socket_data(<<82, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_last_message_received_timestamp(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							TrUserData);
dfp_read_field_def_socket_data(<<90, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_local_flow_control_window(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, F@_12, F@_13,
						  TrUserData);
dfp_read_field_def_socket_data(<<98, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_remote_flow_control_window(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   TrUserData);
dfp_read_field_def_socket_data(<<106, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    d_field_socket_data_option(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_socket_data(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, R1, TrUserData) ->
    S1 = #{streams_started => F@_1,
	   streams_succeeded => F@_2, streams_failed => F@_3,
	   messages_sent => F@_4, messages_received => F@_5,
	   keep_alives_sent => F@_6},
    S2 = if F@_7 == '$undef' -> S1;
	    true -> S1#{last_local_stream_created_timestamp => F@_7}
	 end,
    S3 = if F@_8 == '$undef' -> S2;
	    true ->
		S2#{last_remote_stream_created_timestamp => F@_8}
	 end,
    S4 = if F@_9 == '$undef' -> S3;
	    true -> S3#{last_message_sent_timestamp => F@_9}
	 end,
    S5 = if F@_10 == '$undef' -> S4;
	    true -> S4#{last_message_received_timestamp => F@_10}
	 end,
    S6 = if F@_11 == '$undef' -> S5;
	    true -> S5#{local_flow_control_window => F@_11}
	 end,
    S7 = if F@_12 == '$undef' -> S6;
	    true -> S6#{remote_flow_control_window => F@_12}
	 end,
    if R1 == '$undef' -> S7;
       true -> S7#{option => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_socket_data(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_socket_data(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_socket_data(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_socket_data(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData);
dg_read_field_def_socket_data(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_socket_data_streams_started(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      F@_12, F@_13, TrUserData);
      16 ->
	  d_field_socket_data_streams_succeeded(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						F@_12, F@_13, TrUserData);
      24 ->
	  d_field_socket_data_streams_failed(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11, F@_12,
					     F@_13, TrUserData);
      32 ->
	  d_field_socket_data_messages_sent(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11, F@_12,
					    F@_13, TrUserData);
      40 ->
	  d_field_socket_data_messages_received(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						F@_12, F@_13, TrUserData);
      48 ->
	  d_field_socket_data_keep_alives_sent(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, F@_10, F@_11,
					       F@_12, F@_13, TrUserData);
      58 ->
	  d_field_socket_data_last_local_stream_created_timestamp(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  TrUserData);
      66 ->
	  d_field_socket_data_last_remote_stream_created_timestamp(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8, F@_9,
								   F@_10, F@_11,
								   F@_12, F@_13,
								   TrUserData);
      74 ->
	  d_field_socket_data_last_message_sent_timestamp(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, TrUserData);
      82 ->
	  d_field_socket_data_last_message_received_timestamp(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7, F@_8,
							      F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13,
							      TrUserData);
      90 ->
	  d_field_socket_data_local_flow_control_window(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							TrUserData);
      98 ->
	  d_field_socket_data_remote_flow_control_window(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 TrUserData);
      106 ->
	  d_field_socket_data_option(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_socket_data(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					F@_10, F@_11, F@_12, F@_13, TrUserData);
	    1 ->
		skip_64_socket_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, F@_13, TrUserData);
	    2 ->
		skip_length_delimited_socket_data(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13,
						  TrUserData);
	    3 ->
		skip_group_socket_data(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, TrUserData);
	    5 ->
		skip_32_socket_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, F@_13, TrUserData)
	  end
    end;
dg_read_field_def_socket_data(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, R1, TrUserData) ->
    S1 = #{streams_started => F@_1,
	   streams_succeeded => F@_2, streams_failed => F@_3,
	   messages_sent => F@_4, messages_received => F@_5,
	   keep_alives_sent => F@_6},
    S2 = if F@_7 == '$undef' -> S1;
	    true -> S1#{last_local_stream_created_timestamp => F@_7}
	 end,
    S3 = if F@_8 == '$undef' -> S2;
	    true ->
		S2#{last_remote_stream_created_timestamp => F@_8}
	 end,
    S4 = if F@_9 == '$undef' -> S3;
	    true -> S3#{last_message_sent_timestamp => F@_9}
	 end,
    S5 = if F@_10 == '$undef' -> S4;
	    true -> S4#{last_message_received_timestamp => F@_10}
	 end,
    S6 = if F@_11 == '$undef' -> S5;
	    true -> S5#{local_flow_control_window => F@_11}
	 end,
    S7 = if F@_12 == '$undef' -> S6;
	    true -> S6#{remote_flow_control_window => F@_12}
	 end,
    if R1 == '$undef' -> S7;
       true -> S7#{option => lists_reverse(R1, TrUserData)}
    end.

d_field_socket_data_streams_started(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, TrUserData)
    when N < 57 ->
    d_field_socket_data_streams_started(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, F@_12, F@_13, TrUserData);
d_field_socket_data_streams_started(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_socket_data(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_streams_succeeded(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_socket_data_streams_succeeded(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, F@_13, TrUserData);
d_field_socket_data_streams_succeeded(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				      F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				      F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				   F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_streams_failed(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData)
    when N < 57 ->
    d_field_socket_data_streams_failed(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, TrUserData);
d_field_socket_data_streams_failed(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_messages_sent(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData)
    when N < 57 ->
    d_field_socket_data_messages_sent(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, TrUserData);
d_field_socket_data_messages_sent(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
				  F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_messages_received(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_socket_data_messages_received(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, F@_13, TrUserData);
d_field_socket_data_messages_received(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				      F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				      F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_keep_alives_sent(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				     F@_13, TrUserData)
    when N < 57 ->
    d_field_socket_data_keep_alives_sent(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, F@_12, F@_13, TrUserData);
d_field_socket_data_keep_alives_sent(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				     F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_last_local_stream_created_timestamp(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							TrUserData)
    when N < 57 ->
    d_field_socket_data_last_local_stream_created_timestamp(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, F@_12, F@_13,
							    TrUserData);
d_field_socket_data_last_local_stream_created_timestamp(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							Prev, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_timestamp(Prev, NewFValue,
							      TrUserData)
				   end,
				   F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_last_remote_stream_created_timestamp(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, TrUserData)
    when N < 57 ->
    d_field_socket_data_last_remote_stream_created_timestamp(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     F@_12, F@_13,
							     TrUserData);
d_field_socket_data_last_remote_stream_created_timestamp(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, Prev, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_timestamp(Prev, NewFValue,
							      TrUserData)
				   end,
				   F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData).

d_field_socket_data_last_message_sent_timestamp(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						TrUserData)
    when N < 57 ->
    d_field_socket_data_last_message_sent_timestamp(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    TrUserData);
d_field_socket_data_last_message_sent_timestamp(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, Prev,
						F@_10, F@_11, F@_12, F@_13,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_timestamp(Prev, NewFValue,
							      TrUserData)
				   end,
				   F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_socket_data_last_message_received_timestamp(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_socket_data_last_message_received_timestamp(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							F@_12, F@_13,
							TrUserData);
d_field_socket_data_last_message_received_timestamp(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, Prev, F@_11,
						    F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_timestamp(Prev, NewFValue,
							      TrUserData)
				   end,
				   F@_11, F@_12, F@_13, TrUserData).

d_field_socket_data_local_flow_control_window(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, F@_12, F@_13,
					      TrUserData)
    when N < 57 ->
    d_field_socket_data_local_flow_control_window(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13,
						  TrUserData);
d_field_socket_data_local_flow_control_window(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, Prev, F@_12, F@_13,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_int_64_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_int_64_value(Prev,
								 NewFValue,
								 TrUserData)
				   end,
				   F@_12, F@_13, TrUserData).

d_field_socket_data_remote_flow_control_window(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       TrUserData)
    when N < 57 ->
    d_field_socket_data_remote_flow_control_window(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13,
						   TrUserData);
d_field_socket_data_remote_flow_control_window(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, Prev, F@_13,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_int_64_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_int_64_value(Prev,
								 NewFValue,
								 TrUserData)
				   end,
				   F@_13, TrUserData).

d_field_socket_data_option(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_socket_data_option(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_socket_data_option(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket_option(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_data(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_socket_data(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_socket_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData);
skip_varint_socket_data(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_socket_data(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_socket_data(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData)
    when N < 57 ->
    skip_length_delimited_socket_data(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, TrUserData);
skip_length_delimited_socket_data(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_data(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_group_socket_data(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_data(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_32_socket_data(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_socket_data(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_64_socket_data(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_socket_data(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData).

decode_msg_tcp_ip_address(Bin, TrUserData) ->
    dfp_read_field_def_tcp_ip_address(Bin, 0, 0,
				      id(<<>>, TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_tcp_ip_address(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_tcp_ip_address_ip_address(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_tcp_ip_address(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_tcp_ip_address_port(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_tcp_ip_address(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #{ip_address => F@_1, port => F@_2};
dfp_read_field_def_tcp_ip_address(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_tcp_ip_address(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_tcp_ip_address(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_tcp_ip_address(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_tcp_ip_address(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_tcp_ip_address_ip_address(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_tcp_ip_address_port(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_tcp_ip_address(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_tcp_ip_address(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_tcp_ip_address(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_tcp_ip_address(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_tcp_ip_address(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_tcp_ip_address(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #{ip_address => F@_1, port => F@_2}.

d_field_tcp_ip_address_ip_address(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_tcp_ip_address_ip_address(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_tcp_ip_address_ip_address(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_tcp_ip_address(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_tcp_ip_address_port(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_tcp_ip_address_port(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_tcp_ip_address_port(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_tcp_ip_address(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_tcp_ip_address(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_tcp_ip_address(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_tcp_ip_address(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_tcp_ip_address(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_tcp_ip_address(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_tcp_ip_address(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_tcp_ip_address(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_tcp_ip_address(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_tcp_ip_address(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_tcp_ip_address(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_tcp_ip_address(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_tcp_ip_address(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_tcp_ip_address(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_tcp_ip_address(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_uds_address(Bin, TrUserData) ->
    dfp_read_field_def_uds_address(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_uds_address(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_uds_address_filename(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_uds_address(<<>>, 0, 0, F@_1, _) ->
    #{filename => F@_1};
dfp_read_field_def_uds_address(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_uds_address(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_uds_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_uds_address(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_uds_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_uds_address_filename(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_uds_address(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_uds_address(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_uds_address(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_uds_address(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_uds_address(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_uds_address(<<>>, 0, 0, F@_1, _) ->
    #{filename => F@_1}.

d_field_uds_address_filename(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_uds_address_filename(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_uds_address_filename(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_uds_address(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_uds_address(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_uds_address(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_uds_address(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_uds_address(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_uds_address(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_uds_address(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_uds_address(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_uds_address(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_uds_address(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_uds_address(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_uds_address(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_uds_address(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_uds_address(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_uds_address(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_other_address(Bin, TrUserData) ->
    dfp_read_field_def_other_address(Bin, 0, 0,
				     id(<<>>, TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_other_address(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_other_address_name(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_other_address(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_other_address_value(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_other_address(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
dfp_read_field_def_other_address(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_other_address(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_other_address(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_other_address(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_other_address(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_other_address_name(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_other_address_value(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_other_address(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_other_address(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_other_address(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_other_address(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_other_address(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_other_address(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

d_field_other_address_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_other_address_name(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_other_address_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_other_address(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_other_address_value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_other_address_value(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_other_address_value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_any(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_other_address(RestF, 0, 0, F@_1,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_any(Prev, NewFValue,
							  TrUserData)
				     end,
				     TrUserData).

skip_varint_other_address(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_other_address(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_other_address(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_other_address(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_other_address(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_other_address(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_other_address(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_other_address(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_other_address(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_other_address(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_other_address(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_other_address(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_other_address(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_other_address(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_address(Bin, TrUserData) ->
    dfp_read_field_def_address(Bin, 0, 0,
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_address(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_address_tcpip_address(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_address(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_address_uds_address(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_address(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_address_other_address(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_address(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{address => F@_1}
    end;
dfp_read_field_def_address(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_address(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_address(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_address(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_address(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_address_tcpip_address(Rest, 0, 0, F@_1,
					TrUserData);
      18 ->
	  d_field_address_uds_address(Rest, 0, 0, F@_1,
				      TrUserData);
      26 ->
	  d_field_address_other_address(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_address(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_address(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_address(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_address(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_address(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_address(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{address => F@_1}
    end.

d_field_address_tcpip_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_address_tcpip_address(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_address_tcpip_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_tcp_ip_address(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_address(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({tcpip_address, NewFValue}, TrUserData);
				 {tcpip_address, MVPrev} ->
				     id({tcpip_address,
					 merge_msg_tcp_ip_address(MVPrev,
								  NewFValue,
								  TrUserData)},
					TrUserData);
				 _ -> id({tcpip_address, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_address_uds_address(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_address_uds_address(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_address_uds_address(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_uds_address(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_address(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({uds_address, NewFValue}, TrUserData);
				 {uds_address, MVPrev} ->
				     id({uds_address,
					 merge_msg_uds_address(MVPrev,
							       NewFValue,
							       TrUserData)},
					TrUserData);
				 _ -> id({uds_address, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_address_other_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_address_other_address(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_address_other_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_other_address(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_address(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({other_address, NewFValue}, TrUserData);
				 {other_address, MVPrev} ->
				     id({other_address,
					 merge_msg_other_address(MVPrev,
								 NewFValue,
								 TrUserData)},
					TrUserData);
				 _ -> id({other_address, NewFValue}, TrUserData)
			       end,
			       TrUserData).

skip_varint_address(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_address(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_address(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_address(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_address(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_address(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_address(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_address(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_address(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_address(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_address(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_address(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_tls(Bin, TrUserData) ->
    dfp_read_field_def_tls(Bin, 0, 0,
			   id('$undef', TrUserData), id(<<>>, TrUserData),
			   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_tls(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_tls_standard_name(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_tls(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_tls_other_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_tls(<<26, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_tls_local_certificate(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_tls(<<34, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_tls_remote_certificate(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_tls(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       _) ->
    S1 = #{local_certificate => F@_2,
	   remote_certificate => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{cipher_suite => F@_1}
    end;
dfp_read_field_def_tls(Other, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    dg_read_field_def_tls(Other, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData).

dg_read_field_def_tls(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_tls(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
dg_read_field_def_tls(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_tls_standard_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      18 ->
	  d_field_tls_other_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      26 ->
	  d_field_tls_local_certificate(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      34 ->
	  d_field_tls_remote_certificate(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_tls(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    1 ->
		skip_64_tls(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_tls(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    3 ->
		skip_group_tls(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    5 ->
		skip_32_tls(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_tls(<<>>, 0, 0, F@_1, F@_2, F@_3,
		      _) ->
    S1 = #{local_certificate => F@_2,
	   remote_certificate => F@_3},
    if F@_1 == '$undef' -> S1;
       true -> S1#{cipher_suite => F@_1}
    end.

d_field_tls_standard_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_tls_standard_name(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_tls_standard_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_tls(RestF, 0, 0,
			   id({standard_name, NewFValue}, TrUserData), F@_2,
			   F@_3, TrUserData).

d_field_tls_other_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_tls_other_name(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_tls_other_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_tls(RestF, 0, 0,
			   id({other_name, NewFValue}, TrUserData), F@_2, F@_3,
			   TrUserData).

d_field_tls_local_certificate(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_tls_local_certificate(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_tls_local_certificate(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_tls(RestF, 0, 0, F@_1, NewFValue,
			   F@_3, TrUserData).

d_field_tls_remote_certificate(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_tls_remote_certificate(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_tls_remote_certificate(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_tls(RestF, 0, 0, F@_1, F@_2,
			   NewFValue, TrUserData).

skip_varint_tls(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    skip_varint_tls(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		    TrUserData);
skip_varint_tls(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_tls(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_length_delimited_tls(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_tls(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_tls(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_tls(Rest2, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData).

skip_group_tls(Bin, FNum, Z2, F@_1, F@_2, F@_3,
	       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_tls(Rest, 0, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_32_tls(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_tls(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_64_tls(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_tls(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

decode_msg_other_security(Bin, TrUserData) ->
    dfp_read_field_def_other_security(Bin, 0, 0,
				      id(<<>>, TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_other_security(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_other_security_name(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_other_security(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_other_security_value(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_other_security(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
dfp_read_field_def_other_security(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_other_security(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_other_security(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_other_security(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_other_security(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_other_security_name(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_other_security_value(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_other_security(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_other_security(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_other_security(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_other_security(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_other_security(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_other_security(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    S1 = #{name => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

d_field_other_security_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_other_security_name(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_other_security_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_other_security(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_other_security_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_other_security_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_other_security_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_any(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_other_security(RestF, 0, 0, F@_1,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_any(Prev, NewFValue,
							   TrUserData)
				      end,
				      TrUserData).

skip_varint_other_security(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_other_security(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_other_security(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_other_security(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_other_security(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_other_security(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_other_security(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_other_security(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_other_security(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_other_security(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_other_security(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_other_security(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_other_security(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_other_security(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_security(Bin, TrUserData) ->
    dfp_read_field_def_security(Bin, 0, 0,
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_security(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_security_tls(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_security(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_security_other(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_security(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{model => F@_1}
    end;
dfp_read_field_def_security(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_security(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_security(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_security(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_security(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_security_tls(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_security_other(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_security(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_security(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_security(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_security(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_security(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_security(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{model => F@_1}
    end.

d_field_security_tls(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_security_tls(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_security_tls(<<0:1, X:7, Rest/binary>>, N, Acc,
		     Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_tls(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_security(RestF, 0, 0,
				case Prev of
				  '$undef' -> id({tls, NewFValue}, TrUserData);
				  {tls, MVPrev} ->
				      id({tls,
					  merge_msg_tls(MVPrev, NewFValue,
							TrUserData)},
					 TrUserData);
				  _ -> id({tls, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_security_other(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_security_other(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_security_other(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_other_security(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_security(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({other, NewFValue}, TrUserData);
				  {other, MVPrev} ->
				      id({other,
					  merge_msg_other_security(MVPrev,
								   NewFValue,
								   TrUserData)},
					 TrUserData);
				  _ -> id({other, NewFValue}, TrUserData)
				end,
				TrUserData).

skip_varint_security(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_security(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_security(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_security(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_security(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_security(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_security(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_security(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_security(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_security(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_security(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_security(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_security(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_security(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_socket_option(Bin, TrUserData) ->
    dfp_read_field_def_socket_option(Bin, 0, 0,
				     id(<<>>, TrUserData), id(<<>>, TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_socket_option(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_socket_option_name(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_socket_option(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_socket_option_value(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_socket_option(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_socket_option_additional(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_socket_option(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    S1 = #{name => F@_1, value => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{additional => F@_3}
    end;
dfp_read_field_def_socket_option(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_socket_option(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_socket_option(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_socket_option(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_socket_option(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_socket_option_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      18 ->
	  d_field_socket_option_value(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      26 ->
	  d_field_socket_option_additional(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_socket_option(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_socket_option(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_socket_option(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_socket_option(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_socket_option(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_socket_option(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    S1 = #{name => F@_1, value => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{additional => F@_3}
    end.

d_field_socket_option_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_socket_option_name(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_socket_option_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_socket_option(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, TrUserData).

d_field_socket_option_value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_socket_option_value(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_socket_option_value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_socket_option(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, TrUserData).

d_field_socket_option_additional(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_socket_option_additional(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_socket_option_additional(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_any(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_option(RestF, 0, 0, F@_1,
				     F@_2,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_any(Prev, NewFValue,
							  TrUserData)
				     end,
				     TrUserData).

skip_varint_socket_option(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_socket_option(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_socket_option(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_socket_option(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_socket_option(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_socket_option(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_socket_option(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_option(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_socket_option(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_option(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_socket_option(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_socket_option(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_socket_option(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_socket_option(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

decode_msg_socket_option_timeout(Bin, TrUserData) ->
    dfp_read_field_def_socket_option_timeout(Bin, 0, 0,
					     id('$undef', TrUserData),
					     TrUserData).

dfp_read_field_def_socket_option_timeout(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_socket_option_timeout_duration(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_socket_option_timeout(<<>>, 0, 0,
					 F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{duration => F@_1}
    end;
dfp_read_field_def_socket_option_timeout(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_socket_option_timeout(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_socket_option_timeout(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_socket_option_timeout(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_socket_option_timeout(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_socket_option_timeout_duration(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_socket_option_timeout(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_socket_option_timeout(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_socket_option_timeout(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_socket_option_timeout(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_socket_option_timeout(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_socket_option_timeout(<<>>, 0, 0,
					F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{duration => F@_1}
    end.

d_field_socket_option_timeout_duration(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_socket_option_timeout_duration(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_socket_option_timeout_duration(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_duration(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_option_timeout(RestF, 0, 0,
					     if Prev == '$undef' -> NewFValue;
						true ->
						    merge_msg_duration(Prev,
								       NewFValue,
								       TrUserData)
					     end,
					     TrUserData).

skip_varint_socket_option_timeout(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_socket_option_timeout(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_socket_option_timeout(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_socket_option_timeout(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_socket_option_timeout(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_socket_option_timeout(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_socket_option_timeout(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_option_timeout(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_socket_option_timeout(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_option_timeout(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_socket_option_timeout(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_socket_option_timeout(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_socket_option_timeout(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_socket_option_timeout(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_socket_option_linger(Bin, TrUserData) ->
    dfp_read_field_def_socket_option_linger(Bin, 0, 0,
					    id(false, TrUserData),
					    id('$undef', TrUserData),
					    TrUserData).

dfp_read_field_def_socket_option_linger(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_socket_option_linger_active(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_socket_option_linger(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_socket_option_linger_duration(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_socket_option_linger(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    S1 = #{active => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{duration => F@_2}
    end;
dfp_read_field_def_socket_option_linger(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_socket_option_linger(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_socket_option_linger(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_socket_option_linger(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_socket_option_linger(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_socket_option_linger_active(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_socket_option_linger_duration(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_socket_option_linger(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_socket_option_linger(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_socket_option_linger(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_socket_option_linger(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_socket_option_linger(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_socket_option_linger(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    S1 = #{active => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{duration => F@_2}
    end.

d_field_socket_option_linger_active(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_socket_option_linger_active(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_socket_option_linger_active(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_linger(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_socket_option_linger_duration(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_socket_option_linger_duration(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_socket_option_linger_duration(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_duration(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_socket_option_linger(RestF, 0, 0,
					    F@_1,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_duration(Prev,
								      NewFValue,
								      TrUserData)
					    end,
					    TrUserData).

skip_varint_socket_option_linger(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_socket_option_linger(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_socket_option_linger(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_socket_option_linger(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_socket_option_linger(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_socket_option_linger(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_socket_option_linger(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_option_linger(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_socket_option_linger(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_option_linger(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_socket_option_linger(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_socket_option_linger(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_socket_option_linger(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_socket_option_linger(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_socket_option_tcp_info(Bin, TrUserData) ->
    dfp_read_field_def_socket_option_tcp_info(Bin, 0, 0,
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData), TrUserData).

dfp_read_field_def_socket_option_tcp_info(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_state(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_ca_state(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, F@_23, F@_24, F@_25,
						 F@_26, F@_27, F@_28, F@_29,
						 TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_retransmits(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22, F@_23,
						    F@_24, F@_25, F@_26, F@_27,
						    F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_probes(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       F@_23, F@_24, F@_25, F@_26,
					       F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<40,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_backoff(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<48,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_options(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<56,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_snd_wscale(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, F@_23, F@_24, F@_25,
						   F@_26, F@_27, F@_28, F@_29,
						   TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_rcv_wscale(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, F@_23, F@_24, F@_25,
						   F@_26, F@_27, F@_28, F@_29,
						   TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<72,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_rto(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, F@_14, F@_15, F@_16,
					    F@_17, F@_18, F@_19, F@_20, F@_21,
					    F@_22, F@_23, F@_24, F@_25, F@_26,
					    F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<80,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_ato(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, F@_14, F@_15, F@_16,
					    F@_17, F@_18, F@_19, F@_20, F@_21,
					    F@_22, F@_23, F@_24, F@_25, F@_26,
					    F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<88,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_snd_mss(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<96,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_rcv_mss(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<104,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_unacked(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<112,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_sacked(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       F@_23, F@_24, F@_25, F@_26,
					       F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<120,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_lost(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, F@_14, F@_15, F@_16,
					     F@_17, F@_18, F@_19, F@_20, F@_21,
					     F@_22, F@_23, F@_24, F@_25, F@_26,
					     F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<128, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_retrans(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<136, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_fackets(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<144, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_last_data_sent(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, F@_23,
						       F@_24, F@_25, F@_26,
						       F@_27, F@_28, F@_29,
						       TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<152, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_last_ack_sent(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, F@_23,
						      F@_24, F@_25, F@_26,
						      F@_27, F@_28, F@_29,
						      TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<160, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_last_data_recv(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, F@_23,
						       F@_24, F@_25, F@_26,
						       F@_27, F@_28, F@_29,
						       TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<168, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_last_ack_recv(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, F@_23,
						      F@_24, F@_25, F@_26,
						      F@_27, F@_28, F@_29,
						      TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<176, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_pmtu(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, F@_14, F@_15, F@_16,
					     F@_17, F@_18, F@_19, F@_20, F@_21,
					     F@_22, F@_23, F@_24, F@_25, F@_26,
					     F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<184, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_rcv_ssthresh(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22, F@_23,
						     F@_24, F@_25, F@_26, F@_27,
						     F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<192, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_rtt(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, F@_14, F@_15, F@_16,
					    F@_17, F@_18, F@_19, F@_20, F@_21,
					    F@_22, F@_23, F@_24, F@_25, F@_26,
					    F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<200, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_rttvar(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       F@_23, F@_24, F@_25, F@_26,
					       F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<208, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_snd_ssthresh(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22, F@_23,
						     F@_24, F@_25, F@_26, F@_27,
						     F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<216, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_snd_cwnd(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, F@_23, F@_24, F@_25,
						 F@_26, F@_27, F@_28, F@_29,
						 TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<224, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_advmss(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       F@_23, F@_24, F@_25, F@_26,
					       F@_27, F@_28, F@_29, TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<232, 1,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    d_field_socket_option_tcp_info_tcpi_reordering(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, F@_23, F@_24, F@_25,
						   F@_26, F@_27, F@_28, F@_29,
						   TrUserData);
dfp_read_field_def_socket_option_tcp_info(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, F@_14, F@_15, F@_16, F@_17,
					  F@_18, F@_19, F@_20, F@_21, F@_22,
					  F@_23, F@_24, F@_25, F@_26, F@_27,
					  F@_28, F@_29, _) ->
    #{tcpi_state => F@_1, tcpi_ca_state => F@_2,
      tcpi_retransmits => F@_3, tcpi_probes => F@_4,
      tcpi_backoff => F@_5, tcpi_options => F@_6,
      tcpi_snd_wscale => F@_7, tcpi_rcv_wscale => F@_8,
      tcpi_rto => F@_9, tcpi_ato => F@_10,
      tcpi_snd_mss => F@_11, tcpi_rcv_mss => F@_12,
      tcpi_unacked => F@_13, tcpi_sacked => F@_14,
      tcpi_lost => F@_15, tcpi_retrans => F@_16,
      tcpi_fackets => F@_17, tcpi_last_data_sent => F@_18,
      tcpi_last_ack_sent => F@_19,
      tcpi_last_data_recv => F@_20,
      tcpi_last_ack_recv => F@_21, tcpi_pmtu => F@_22,
      tcpi_rcv_ssthresh => F@_23, tcpi_rtt => F@_24,
      tcpi_rttvar => F@_25, tcpi_snd_ssthresh => F@_26,
      tcpi_snd_cwnd => F@_27, tcpi_advmss => F@_28,
      tcpi_reordering => F@_29};
dfp_read_field_def_socket_option_tcp_info(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, F@_14, F@_15, F@_16, F@_17,
					  F@_18, F@_19, F@_20, F@_21, F@_22,
					  F@_23, F@_24, F@_25, F@_26, F@_27,
					  F@_28, F@_29, TrUserData) ->
    dg_read_field_def_socket_option_tcp_info(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, F@_14, F@_15, F@_16,
					     F@_17, F@_18, F@_19, F@_20, F@_21,
					     F@_22, F@_23, F@_24, F@_25, F@_26,
					     F@_27, F@_28, F@_29, TrUserData).

dg_read_field_def_socket_option_tcp_info(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, F@_23, F@_24, F@_25, F@_26,
					 F@_27, F@_28, F@_29, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_socket_option_tcp_info(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, F@_27, F@_28, F@_29,
					     TrUserData);
dg_read_field_def_socket_option_tcp_info(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, F@_23, F@_24, F@_25, F@_26,
					 F@_27, F@_28, F@_29, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_socket_option_tcp_info_tcpi_state(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, F@_11, F@_12,
						    F@_13, F@_14, F@_15, F@_16,
						    F@_17, F@_18, F@_19, F@_20,
						    F@_21, F@_22, F@_23, F@_24,
						    F@_25, F@_26, F@_27, F@_28,
						    F@_29, TrUserData);
      16 ->
	  d_field_socket_option_tcp_info_tcpi_ca_state(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, F@_23,
						       F@_24, F@_25, F@_26,
						       F@_27, F@_28, F@_29,
						       TrUserData);
      24 ->
	  d_field_socket_option_tcp_info_tcpi_retransmits(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  F@_16, F@_17, F@_18,
							  F@_19, F@_20, F@_21,
							  F@_22, F@_23, F@_24,
							  F@_25, F@_26, F@_27,
							  F@_28, F@_29,
							  TrUserData);
      32 ->
	  d_field_socket_option_tcp_info_tcpi_probes(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, F@_23, F@_24,
						     F@_25, F@_26, F@_27, F@_28,
						     F@_29, TrUserData);
      40 ->
	  d_field_socket_option_tcp_info_tcpi_backoff(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
      48 ->
	  d_field_socket_option_tcp_info_tcpi_options(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
      56 ->
	  d_field_socket_option_tcp_info_tcpi_snd_wscale(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15, F@_16,
							 F@_17, F@_18, F@_19,
							 F@_20, F@_21, F@_22,
							 F@_23, F@_24, F@_25,
							 F@_26, F@_27, F@_28,
							 F@_29, TrUserData);
      64 ->
	  d_field_socket_option_tcp_info_tcpi_rcv_wscale(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15, F@_16,
							 F@_17, F@_18, F@_19,
							 F@_20, F@_21, F@_22,
							 F@_23, F@_24, F@_25,
							 F@_26, F@_27, F@_28,
							 F@_29, TrUserData);
      72 ->
	  d_field_socket_option_tcp_info_tcpi_rto(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13, F@_14,
						  F@_15, F@_16, F@_17, F@_18,
						  F@_19, F@_20, F@_21, F@_22,
						  F@_23, F@_24, F@_25, F@_26,
						  F@_27, F@_28, F@_29,
						  TrUserData);
      80 ->
	  d_field_socket_option_tcp_info_tcpi_ato(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13, F@_14,
						  F@_15, F@_16, F@_17, F@_18,
						  F@_19, F@_20, F@_21, F@_22,
						  F@_23, F@_24, F@_25, F@_26,
						  F@_27, F@_28, F@_29,
						  TrUserData);
      88 ->
	  d_field_socket_option_tcp_info_tcpi_snd_mss(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
      96 ->
	  d_field_socket_option_tcp_info_tcpi_rcv_mss(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
      104 ->
	  d_field_socket_option_tcp_info_tcpi_unacked(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
      112 ->
	  d_field_socket_option_tcp_info_tcpi_sacked(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, F@_23, F@_24,
						     F@_25, F@_26, F@_27, F@_28,
						     F@_29, TrUserData);
      120 ->
	  d_field_socket_option_tcp_info_tcpi_lost(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, F@_23, F@_24, F@_25,
						   F@_26, F@_27, F@_28, F@_29,
						   TrUserData);
      128 ->
	  d_field_socket_option_tcp_info_tcpi_retrans(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
      136 ->
	  d_field_socket_option_tcp_info_tcpi_fackets(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
      144 ->
	  d_field_socket_option_tcp_info_tcpi_last_data_sent(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     F@_16, F@_17,
							     F@_18, F@_19,
							     F@_20, F@_21,
							     F@_22, F@_23,
							     F@_24, F@_25,
							     F@_26, F@_27,
							     F@_28, F@_29,
							     TrUserData);
      152 ->
	  d_field_socket_option_tcp_info_tcpi_last_ack_sent(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22, F@_23,
							    F@_24, F@_25, F@_26,
							    F@_27, F@_28, F@_29,
							    TrUserData);
      160 ->
	  d_field_socket_option_tcp_info_tcpi_last_data_recv(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     F@_16, F@_17,
							     F@_18, F@_19,
							     F@_20, F@_21,
							     F@_22, F@_23,
							     F@_24, F@_25,
							     F@_26, F@_27,
							     F@_28, F@_29,
							     TrUserData);
      168 ->
	  d_field_socket_option_tcp_info_tcpi_last_ack_recv(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22, F@_23,
							    F@_24, F@_25, F@_26,
							    F@_27, F@_28, F@_29,
							    TrUserData);
      176 ->
	  d_field_socket_option_tcp_info_tcpi_pmtu(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, F@_23, F@_24, F@_25,
						   F@_26, F@_27, F@_28, F@_29,
						   TrUserData);
      184 ->
	  d_field_socket_option_tcp_info_tcpi_rcv_ssthresh(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, F@_16, F@_17,
							   F@_18, F@_19, F@_20,
							   F@_21, F@_22, F@_23,
							   F@_24, F@_25, F@_26,
							   F@_27, F@_28, F@_29,
							   TrUserData);
      192 ->
	  d_field_socket_option_tcp_info_tcpi_rtt(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13, F@_14,
						  F@_15, F@_16, F@_17, F@_18,
						  F@_19, F@_20, F@_21, F@_22,
						  F@_23, F@_24, F@_25, F@_26,
						  F@_27, F@_28, F@_29,
						  TrUserData);
      200 ->
	  d_field_socket_option_tcp_info_tcpi_rttvar(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, F@_23, F@_24,
						     F@_25, F@_26, F@_27, F@_28,
						     F@_29, TrUserData);
      208 ->
	  d_field_socket_option_tcp_info_tcpi_snd_ssthresh(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, F@_16, F@_17,
							   F@_18, F@_19, F@_20,
							   F@_21, F@_22, F@_23,
							   F@_24, F@_25, F@_26,
							   F@_27, F@_28, F@_29,
							   TrUserData);
      216 ->
	  d_field_socket_option_tcp_info_tcpi_snd_cwnd(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, F@_23,
						       F@_24, F@_25, F@_26,
						       F@_27, F@_28, F@_29,
						       TrUserData);
      224 ->
	  d_field_socket_option_tcp_info_tcpi_advmss(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, F@_23, F@_24,
						     F@_25, F@_26, F@_27, F@_28,
						     F@_29, TrUserData);
      232 ->
	  d_field_socket_option_tcp_info_tcpi_reordering(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15, F@_16,
							 F@_17, F@_18, F@_19,
							 F@_20, F@_21, F@_22,
							 F@_23, F@_24, F@_25,
							 F@_26, F@_27, F@_28,
							 F@_29, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_socket_option_tcp_info(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, F@_16, F@_17, F@_18,
						   F@_19, F@_20, F@_21, F@_22,
						   F@_23, F@_24, F@_25, F@_26,
						   F@_27, F@_28, F@_29,
						   TrUserData);
	    1 ->
		skip_64_socket_option_tcp_info(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, F@_9, F@_10, F@_11, F@_12,
					       F@_13, F@_14, F@_15, F@_16,
					       F@_17, F@_18, F@_19, F@_20,
					       F@_21, F@_22, F@_23, F@_24,
					       F@_25, F@_26, F@_27, F@_28,
					       F@_29, TrUserData);
	    2 ->
		skip_length_delimited_socket_option_tcp_info(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     F@_16, F@_17,
							     F@_18, F@_19,
							     F@_20, F@_21,
							     F@_22, F@_23,
							     F@_24, F@_25,
							     F@_26, F@_27,
							     F@_28, F@_29,
							     TrUserData);
	    3 ->
		skip_group_socket_option_tcp_info(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13, F@_14,
						  F@_15, F@_16, F@_17, F@_18,
						  F@_19, F@_20, F@_21, F@_22,
						  F@_23, F@_24, F@_25, F@_26,
						  F@_27, F@_28, F@_29,
						  TrUserData);
	    5 ->
		skip_32_socket_option_tcp_info(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, F@_9, F@_10, F@_11, F@_12,
					       F@_13, F@_14, F@_15, F@_16,
					       F@_17, F@_18, F@_19, F@_20,
					       F@_21, F@_22, F@_23, F@_24,
					       F@_25, F@_26, F@_27, F@_28,
					       F@_29, TrUserData)
	  end
    end;
dg_read_field_def_socket_option_tcp_info(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					 F@_13, F@_14, F@_15, F@_16, F@_17,
					 F@_18, F@_19, F@_20, F@_21, F@_22,
					 F@_23, F@_24, F@_25, F@_26, F@_27,
					 F@_28, F@_29, _) ->
    #{tcpi_state => F@_1, tcpi_ca_state => F@_2,
      tcpi_retransmits => F@_3, tcpi_probes => F@_4,
      tcpi_backoff => F@_5, tcpi_options => F@_6,
      tcpi_snd_wscale => F@_7, tcpi_rcv_wscale => F@_8,
      tcpi_rto => F@_9, tcpi_ato => F@_10,
      tcpi_snd_mss => F@_11, tcpi_rcv_mss => F@_12,
      tcpi_unacked => F@_13, tcpi_sacked => F@_14,
      tcpi_lost => F@_15, tcpi_retrans => F@_16,
      tcpi_fackets => F@_17, tcpi_last_data_sent => F@_18,
      tcpi_last_ack_sent => F@_19,
      tcpi_last_data_recv => F@_20,
      tcpi_last_ack_recv => F@_21, tcpi_pmtu => F@_22,
      tcpi_rcv_ssthresh => F@_23, tcpi_rtt => F@_24,
      tcpi_rttvar => F@_25, tcpi_snd_ssthresh => F@_26,
      tcpi_snd_cwnd => F@_27, tcpi_advmss => F@_28,
      tcpi_reordering => F@_29}.

d_field_socket_option_tcp_info_tcpi_state(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_state(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, F@_12, F@_13,
					      F@_14, F@_15, F@_16, F@_17, F@_18,
					      F@_19, F@_20, F@_21, F@_22, F@_23,
					      F@_24, F@_25, F@_26, F@_27, F@_28,
					      F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_state(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, F@_23, F@_24, F@_25, F@_26,
					  F@_27, F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      NewFValue, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_ca_state(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, F@_27, F@_28, F@_29,
					     TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_ca_state(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, F@_10, F@_11,
						 F@_12, F@_13, F@_14, F@_15,
						 F@_16, F@_17, F@_18, F@_19,
						 F@_20, F@_21, F@_22, F@_23,
						 F@_24, F@_25, F@_26, F@_27,
						 F@_28, F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_ca_state(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, F@_23, F@_24, F@_25,
					     F@_26, F@_27, F@_28, F@_29,
					     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, NewFValue, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_retransmits(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_retransmits(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, F@_16, F@_17,
						    F@_18, F@_19, F@_20, F@_21,
						    F@_22, F@_23, F@_24, F@_25,
						    F@_26, F@_27, F@_28, F@_29,
						    TrUserData);
d_field_socket_option_tcp_info_tcpi_retransmits(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, _, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, F@_23, F@_24, F@_25,
						F@_26, F@_27, F@_28, F@_29,
						TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, NewFValue, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_probes(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, F@_23, F@_24, F@_25, F@_26,
					   F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_probes(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, F@_29,
					       TrUserData);
d_field_socket_option_tcp_info_tcpi_probes(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, F@_23, F@_24, F@_25, F@_26,
					   F@_27, F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, NewFValue, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_backoff(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_backoff(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15, F@_16,
						F@_17, F@_18, F@_19, F@_20,
						F@_21, F@_22, F@_23, F@_24,
						F@_25, F@_26, F@_27, F@_28,
						F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_backoff(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, NewFValue,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_options(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_options(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15, F@_16,
						F@_17, F@_18, F@_19, F@_20,
						F@_21, F@_22, F@_23, F@_24,
						F@_25, F@_26, F@_27, F@_28,
						F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_options(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, _, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      NewFValue, F@_7, F@_8, F@_9,
					      F@_10, F@_11, F@_12, F@_13, F@_14,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_snd_wscale(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, F@_29,
					       TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_snd_wscale(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, F@_16, F@_17, F@_18,
						   F@_19, F@_20, F@_21, F@_22,
						   F@_23, F@_24, F@_25, F@_26,
						   F@_27, F@_28, F@_29,
						   TrUserData);
d_field_socket_option_tcp_info_tcpi_snd_wscale(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       F@_23, F@_24, F@_25, F@_26,
					       F@_27, F@_28, F@_29,
					       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, NewFValue, F@_8, F@_9,
					      F@_10, F@_11, F@_12, F@_13, F@_14,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_rcv_wscale(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, F@_29,
					       TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_rcv_wscale(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, F@_16, F@_17, F@_18,
						   F@_19, F@_20, F@_21, F@_22,
						   F@_23, F@_24, F@_25, F@_26,
						   F@_27, F@_28, F@_29,
						   TrUserData);
d_field_socket_option_tcp_info_tcpi_rcv_wscale(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, _, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       F@_23, F@_24, F@_25, F@_26,
					       F@_27, F@_28, F@_29,
					       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, NewFValue, F@_9,
					      F@_10, F@_11, F@_12, F@_13, F@_14,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_rto(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15, F@_16,
					F@_17, F@_18, F@_19, F@_20, F@_21,
					F@_22, F@_23, F@_24, F@_25, F@_26,
					F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_rto(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, F@_12, F@_13, F@_14,
					    F@_15, F@_16, F@_17, F@_18, F@_19,
					    F@_20, F@_21, F@_22, F@_23, F@_24,
					    F@_25, F@_26, F@_27, F@_28, F@_29,
					    TrUserData);
d_field_socket_option_tcp_info_tcpi_rto(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, _, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15, F@_16,
					F@_17, F@_18, F@_19, F@_20, F@_21,
					F@_22, F@_23, F@_24, F@_25, F@_26,
					F@_27, F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, NewFValue,
					      F@_10, F@_11, F@_12, F@_13, F@_14,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_ato(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15, F@_16,
					F@_17, F@_18, F@_19, F@_20, F@_21,
					F@_22, F@_23, F@_24, F@_25, F@_26,
					F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_ato(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, F@_12, F@_13, F@_14,
					    F@_15, F@_16, F@_17, F@_18, F@_19,
					    F@_20, F@_21, F@_22, F@_23, F@_24,
					    F@_25, F@_26, F@_27, F@_28, F@_29,
					    TrUserData);
d_field_socket_option_tcp_info_tcpi_ato(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12,
					F@_13, F@_14, F@_15, F@_16, F@_17,
					F@_18, F@_19, F@_20, F@_21, F@_22,
					F@_23, F@_24, F@_25, F@_26, F@_27,
					F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, NewFValue,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_snd_mss(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_snd_mss(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15, F@_16,
						F@_17, F@_18, F@_19, F@_20,
						F@_21, F@_22, F@_23, F@_24,
						F@_25, F@_26, F@_27, F@_28,
						F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_snd_mss(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      NewFValue, F@_12, F@_13, F@_14,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_rcv_mss(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_rcv_mss(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15, F@_16,
						F@_17, F@_18, F@_19, F@_20,
						F@_21, F@_22, F@_23, F@_24,
						F@_25, F@_26, F@_27, F@_28,
						F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_rcv_mss(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, _, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, NewFValue, F@_13, F@_14,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_unacked(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_unacked(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15, F@_16,
						F@_17, F@_18, F@_19, F@_20,
						F@_21, F@_22, F@_23, F@_24,
						F@_25, F@_26, F@_27, F@_28,
						F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_unacked(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, _, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, NewFValue, F@_14,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_sacked(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, F@_23, F@_24, F@_25, F@_26,
					   F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_sacked(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, F@_29,
					       TrUserData);
d_field_socket_option_tcp_info_tcpi_sacked(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, _, F@_15, F@_16, F@_17,
					   F@_18, F@_19, F@_20, F@_21, F@_22,
					   F@_23, F@_24, F@_25, F@_26, F@_27,
					   F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, NewFValue,
					      F@_15, F@_16, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_lost(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, F@_23, F@_24, F@_25, F@_26,
					 F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_lost(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, F@_27, F@_28, F@_29,
					     TrUserData);
d_field_socket_option_tcp_info_tcpi_lost(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, _, F@_16, F@_17,
					 F@_18, F@_19, F@_20, F@_21, F@_22,
					 F@_23, F@_24, F@_25, F@_26, F@_27,
					 F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14,
					      NewFValue, F@_16, F@_17, F@_18,
					      F@_19, F@_20, F@_21, F@_22, F@_23,
					      F@_24, F@_25, F@_26, F@_27, F@_28,
					      F@_29, TrUserData).

d_field_socket_option_tcp_info_tcpi_retrans(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_retrans(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15, F@_16,
						F@_17, F@_18, F@_19, F@_20,
						F@_21, F@_22, F@_23, F@_24,
						F@_25, F@_26, F@_27, F@_28,
						F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_retrans(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    _, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      NewFValue, F@_17, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_fackets(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_fackets(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15, F@_16,
						F@_17, F@_18, F@_19, F@_20,
						F@_21, F@_22, F@_23, F@_24,
						F@_25, F@_26, F@_27, F@_28,
						F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_fackets(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, _, F@_18, F@_19, F@_20,
					    F@_21, F@_22, F@_23, F@_24, F@_25,
					    F@_26, F@_27, F@_28, F@_29,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, NewFValue, F@_18, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_last_data_sent(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15, F@_16,
						   F@_17, F@_18, F@_19, F@_20,
						   F@_21, F@_22, F@_23, F@_24,
						   F@_25, F@_26, F@_27, F@_28,
						   F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_last_data_sent(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, F@_23,
						       F@_24, F@_25, F@_26,
						       F@_27, F@_28, F@_29,
						       TrUserData);
d_field_socket_option_tcp_info_tcpi_last_data_sent(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15, F@_16,
						   F@_17, _, F@_19, F@_20,
						   F@_21, F@_22, F@_23, F@_24,
						   F@_25, F@_26, F@_27, F@_28,
						   F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, NewFValue, F@_19,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_last_ack_sent(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, F@_23, F@_24,
						  F@_25, F@_26, F@_27, F@_28,
						  F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_last_ack_sent(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_last_ack_sent(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, _, F@_20, F@_21,
						  F@_22, F@_23, F@_24, F@_25,
						  F@_26, F@_27, F@_28, F@_29,
						  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, NewFValue,
					      F@_20, F@_21, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_last_data_recv(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15, F@_16,
						   F@_17, F@_18, F@_19, F@_20,
						   F@_21, F@_22, F@_23, F@_24,
						   F@_25, F@_26, F@_27, F@_28,
						   F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_last_data_recv(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, F@_23,
						       F@_24, F@_25, F@_26,
						       F@_27, F@_28, F@_29,
						       TrUserData);
d_field_socket_option_tcp_info_tcpi_last_data_recv(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15, F@_16,
						   F@_17, F@_18, F@_19, _,
						   F@_21, F@_22, F@_23, F@_24,
						   F@_25, F@_26, F@_27, F@_28,
						   F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19,
					      NewFValue, F@_21, F@_22, F@_23,
					      F@_24, F@_25, F@_26, F@_27, F@_28,
					      F@_29, TrUserData).

d_field_socket_option_tcp_info_tcpi_last_ack_recv(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, F@_23, F@_24,
						  F@_25, F@_26, F@_27, F@_28,
						  F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_last_ack_recv(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, F@_23, F@_24,
						      F@_25, F@_26, F@_27,
						      F@_28, F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_last_ack_recv(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20, _,
						  F@_22, F@_23, F@_24, F@_25,
						  F@_26, F@_27, F@_28, F@_29,
						  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      NewFValue, F@_22, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_pmtu(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, F@_23, F@_24, F@_25, F@_26,
					 F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_pmtu(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, F@_27, F@_28, F@_29,
					     TrUserData);
d_field_socket_option_tcp_info_tcpi_pmtu(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21, _,
					 F@_23, F@_24, F@_25, F@_26, F@_27,
					 F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, NewFValue, F@_23, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_rcv_ssthresh(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, F@_23, F@_24, F@_25,
						 F@_26, F@_27, F@_28, F@_29,
						 TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_rcv_ssthresh(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, F@_23, F@_24, F@_25,
						     F@_26, F@_27, F@_28, F@_29,
						     TrUserData);
d_field_socket_option_tcp_info_tcpi_rcv_ssthresh(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, _, F@_24, F@_25, F@_26,
						 F@_27, F@_28, F@_29,
						 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, NewFValue, F@_24,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_rtt(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15, F@_16,
					F@_17, F@_18, F@_19, F@_20, F@_21,
					F@_22, F@_23, F@_24, F@_25, F@_26,
					F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_rtt(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, F@_12, F@_13, F@_14,
					    F@_15, F@_16, F@_17, F@_18, F@_19,
					    F@_20, F@_21, F@_22, F@_23, F@_24,
					    F@_25, F@_26, F@_27, F@_28, F@_29,
					    TrUserData);
d_field_socket_option_tcp_info_tcpi_rtt(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15, F@_16,
					F@_17, F@_18, F@_19, F@_20, F@_21,
					F@_22, F@_23, _, F@_25, F@_26, F@_27,
					F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, NewFValue,
					      F@_25, F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_rttvar(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, F@_23, F@_24, F@_25, F@_26,
					   F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_rttvar(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, F@_29,
					       TrUserData);
d_field_socket_option_tcp_info_tcpi_rttvar(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, F@_23, F@_24, _, F@_26, F@_27,
					   F@_28, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24,
					      NewFValue, F@_26, F@_27, F@_28,
					      F@_29, TrUserData).

d_field_socket_option_tcp_info_tcpi_snd_ssthresh(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, F@_23, F@_24, F@_25,
						 F@_26, F@_27, F@_28, F@_29,
						 TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_snd_ssthresh(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, F@_23, F@_24, F@_25,
						     F@_26, F@_27, F@_28, F@_29,
						     TrUserData);
d_field_socket_option_tcp_info_tcpi_snd_ssthresh(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, F@_23, F@_24, F@_25, _,
						 F@_27, F@_28, F@_29,
						 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      NewFValue, F@_27, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_snd_cwnd(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, F@_27, F@_28, F@_29,
					     TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_snd_cwnd(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, F@_10, F@_11,
						 F@_12, F@_13, F@_14, F@_15,
						 F@_16, F@_17, F@_18, F@_19,
						 F@_20, F@_21, F@_22, F@_23,
						 F@_24, F@_25, F@_26, F@_27,
						 F@_28, F@_29, TrUserData);
d_field_socket_option_tcp_info_tcpi_snd_cwnd(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, _, F@_28, F@_29,
					     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, NewFValue, F@_28, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_advmss(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, F@_23, F@_24, F@_25, F@_26,
					   F@_27, F@_28, F@_29, TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_advmss(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, F@_29,
					       TrUserData);
d_field_socket_option_tcp_info_tcpi_advmss(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, F@_23, F@_24, F@_25, F@_26,
					   F@_27, _, F@_29, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, NewFValue, F@_29,
					      TrUserData).

d_field_socket_option_tcp_info_tcpi_reordering(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, F@_29,
					       TrUserData)
    when N < 57 ->
    d_field_socket_option_tcp_info_tcpi_reordering(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, F@_16, F@_17, F@_18,
						   F@_19, F@_20, F@_21, F@_22,
						   F@_23, F@_24, F@_25, F@_26,
						   F@_27, F@_28, F@_29,
						   TrUserData);
d_field_socket_option_tcp_info_tcpi_reordering(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, F@_23, F@_24, F@_25,
					       F@_26, F@_27, F@_28, _,
					       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_socket_option_tcp_info(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, NewFValue,
					      TrUserData).

skip_varint_socket_option_tcp_info(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
				   F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
				   F@_26, F@_27, F@_28, F@_29, TrUserData) ->
    skip_varint_socket_option_tcp_info(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				       F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
				       F@_27, F@_28, F@_29, TrUserData);
skip_varint_socket_option_tcp_info(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
				   F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
				   F@_26, F@_27, F@_28, F@_29, TrUserData) ->
    dfp_read_field_def_socket_option_tcp_info(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

skip_length_delimited_socket_option_tcp_info(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, F@_27, F@_28, F@_29,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_socket_option_tcp_info(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, F@_10, F@_11,
						 F@_12, F@_13, F@_14, F@_15,
						 F@_16, F@_17, F@_18, F@_19,
						 F@_20, F@_21, F@_22, F@_23,
						 F@_24, F@_25, F@_26, F@_27,
						 F@_28, F@_29, TrUserData);
skip_length_delimited_socket_option_tcp_info(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, F@_23, F@_24,
					     F@_25, F@_26, F@_27, F@_28, F@_29,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_socket_option_tcp_info(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

skip_group_socket_option_tcp_info(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				  F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				  F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
				  F@_27, F@_28, F@_29, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_socket_option_tcp_info(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

skip_32_socket_option_tcp_info(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			       F@_29, TrUserData) ->
    dfp_read_field_def_socket_option_tcp_info(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

skip_64_socket_option_tcp_info(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			       F@_29, TrUserData) ->
    dfp_read_field_def_socket_option_tcp_info(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, F@_23, F@_24, F@_25,
					      F@_26, F@_27, F@_28, F@_29,
					      TrUserData).

decode_msg_get_top_channels_request(Bin, TrUserData) ->
    dfp_read_field_def_get_top_channels_request(Bin, 0, 0,
						id(0, TrUserData),
						id(0, TrUserData), TrUserData).

dfp_read_field_def_get_top_channels_request(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_top_channels_request_start_channel_id(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
dfp_read_field_def_get_top_channels_request(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_top_channels_request_max_results(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_get_top_channels_request(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #{start_channel_id => F@_1, max_results => F@_2};
dfp_read_field_def_get_top_channels_request(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_get_top_channels_request(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_get_top_channels_request(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_top_channels_request(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_get_top_channels_request(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_top_channels_request_start_channel_id(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      16 ->
	  d_field_get_top_channels_request_max_results(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_top_channels_request(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_get_top_channels_request(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_get_top_channels_request(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_get_top_channels_request(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_get_top_channels_request(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_get_top_channels_request(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #{start_channel_id => F@_1, max_results => F@_2}.

d_field_get_top_channels_request_start_channel_id(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    d_field_get_top_channels_request_start_channel_id(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
d_field_get_top_channels_request_start_channel_id(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, F@_2,
						  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_top_channels_request(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_get_top_channels_request_max_results(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_top_channels_request_max_results(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
d_field_get_top_channels_request_max_results(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_top_channels_request(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_get_top_channels_request(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_get_top_channels_request(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_get_top_channels_request(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_top_channels_request(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_get_top_channels_request(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_top_channels_request(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_get_top_channels_request(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_top_channels_request(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_get_top_channels_request(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_top_channels_request(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_get_top_channels_request(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_top_channels_request(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_get_top_channels_request(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_top_channels_request(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_get_top_channels_response(Bin, TrUserData) ->
    dfp_read_field_def_get_top_channels_response(Bin, 0, 0,
						 id([], TrUserData),
						 id(false, TrUserData),
						 TrUserData).

dfp_read_field_def_get_top_channels_response(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_top_channels_response_channel(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_get_top_channels_response(<<16,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_top_channels_response_end(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_get_top_channels_response(<<>>, 0, 0,
					     R1, F@_2, TrUserData) ->
    S1 = #{'end' => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{channel => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_get_top_channels_response(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_get_top_channels_response(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_get_top_channels_response(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_top_channels_response(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_get_top_channels_response(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_top_channels_response_channel(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      16 ->
	  d_field_get_top_channels_response_end(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_top_channels_response(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_get_top_channels_response(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_get_top_channels_response(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_get_top_channels_response(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_get_top_channels_response(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_get_top_channels_response(<<>>, 0, 0,
					    R1, F@_2, TrUserData) ->
    S1 = #{'end' => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{channel => lists_reverse(R1, TrUserData)}
    end.

d_field_get_top_channels_response_channel(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_top_channels_response_channel(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_get_top_channels_response_channel(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_top_channels_response(RestF, 0,
						 0,
						 cons(NewFValue, Prev,
						      TrUserData),
						 F@_2, TrUserData).

d_field_get_top_channels_response_end(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_top_channels_response_end(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_get_top_channels_response_end(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_get_top_channels_response(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_get_top_channels_response(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_get_top_channels_response(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_get_top_channels_response(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_top_channels_response(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_get_top_channels_response(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_top_channels_response(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_get_top_channels_response(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_top_channels_response(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_get_top_channels_response(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_top_channels_response(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_get_top_channels_response(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_top_channels_response(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_get_top_channels_response(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_top_channels_response(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_get_servers_request(Bin, TrUserData) ->
    dfp_read_field_def_get_servers_request(Bin, 0, 0,
					   id(0, TrUserData), id(0, TrUserData),
					   TrUserData).

dfp_read_field_def_get_servers_request(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_servers_request_start_server_id(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_get_servers_request(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_servers_request_max_results(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_get_servers_request(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{start_server_id => F@_1, max_results => F@_2};
dfp_read_field_def_get_servers_request(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_get_servers_request(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_get_servers_request(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_servers_request(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_get_servers_request(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_servers_request_start_server_id(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      16 ->
	  d_field_get_servers_request_max_results(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_servers_request(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_get_servers_request(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_get_servers_request(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_get_servers_request(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_get_servers_request(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_get_servers_request(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{start_server_id => F@_1, max_results => F@_2}.

d_field_get_servers_request_start_server_id(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_servers_request_start_server_id(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
d_field_get_servers_request_start_server_id(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_servers_request(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_get_servers_request_max_results(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_servers_request_max_results(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_field_get_servers_request_max_results(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_servers_request(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

skip_varint_get_servers_request(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_get_servers_request(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_get_servers_request(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_servers_request(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_get_servers_request(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_servers_request(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_get_servers_request(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_servers_request(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_get_servers_request(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_servers_request(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_get_servers_request(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_servers_request(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_get_servers_request(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_servers_request(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_get_servers_response(Bin, TrUserData) ->
    dfp_read_field_def_get_servers_response(Bin, 0, 0,
					    id([], TrUserData),
					    id(false, TrUserData), TrUserData).

dfp_read_field_def_get_servers_response(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_servers_response_server(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_get_servers_response(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_servers_response_end(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_get_servers_response(<<>>, 0, 0, R1,
					F@_2, TrUserData) ->
    S1 = #{'end' => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{server => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_get_servers_response(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_get_servers_response(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_get_servers_response(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_servers_response(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_get_servers_response(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_servers_response_server(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  d_field_get_servers_response_end(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_servers_response(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_get_servers_response(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_get_servers_response(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_get_servers_response(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_get_servers_response(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_get_servers_response(<<>>, 0, 0, R1,
				       F@_2, TrUserData) ->
    S1 = #{'end' => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{server => lists_reverse(R1, TrUserData)}
    end.

d_field_get_servers_response_server(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_servers_response_server(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_get_servers_response_server(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_server(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_servers_response(RestF, 0, 0,
					    cons(NewFValue, Prev, TrUserData),
					    F@_2, TrUserData).

d_field_get_servers_response_end(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_servers_response_end(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_get_servers_response_end(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_get_servers_response(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_get_servers_response(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_get_servers_response(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_get_servers_response(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_servers_response(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_get_servers_response(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_servers_response(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_get_servers_response(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_servers_response(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_get_servers_response(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_servers_response(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_get_servers_response(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_servers_response(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_get_servers_response(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_servers_response(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_get_server_request(Bin, TrUserData) ->
    dfp_read_field_def_get_server_request(Bin, 0, 0,
					  id(0, TrUserData), TrUserData).

dfp_read_field_def_get_server_request(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_get_server_request_server_id(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_get_server_request(<<>>, 0, 0, F@_1,
				      _) ->
    #{server_id => F@_1};
dfp_read_field_def_get_server_request(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_get_server_request(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_get_server_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_server_request(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_server_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_server_request_server_id(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_server_request(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_get_server_request(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_get_server_request(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_get_server_request(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_get_server_request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_get_server_request(<<>>, 0, 0, F@_1,
				     _) ->
    #{server_id => F@_1}.

d_field_get_server_request_server_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_server_request_server_id(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_get_server_request_server_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_server_request(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_get_server_request(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_server_request(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_get_server_request(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_server_request(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_get_server_request(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_server_request(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_get_server_request(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_server_request(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_get_server_request(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_server_request(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_get_server_request(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_server_request(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_get_server_request(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_server_request(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_get_server_response(Bin, TrUserData) ->
    dfp_read_field_def_get_server_response(Bin, 0, 0,
					   id('$undef', TrUserData),
					   TrUserData).

dfp_read_field_def_get_server_response(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_get_server_response_server(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_get_server_response(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{server => F@_1}
    end;
dfp_read_field_def_get_server_response(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_get_server_response(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_get_server_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_server_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_server_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_server_response_server(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_server_response(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_get_server_response(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_get_server_response(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_get_server_response(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_get_server_response(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_get_server_response(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{server => F@_1}
    end.

d_field_get_server_response_server(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_server_response_server(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_get_server_response_server(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_server(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_server_response(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_server(Prev,
								   NewFValue,
								   TrUserData)
					   end,
					   TrUserData).

skip_varint_get_server_response(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_server_response(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_get_server_response(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_server_response(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_get_server_response(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_server_response(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_get_server_response(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_server_response(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_get_server_response(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_server_response(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_get_server_response(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_server_response(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_get_server_response(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_server_response(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_get_server_sockets_request(Bin,
				      TrUserData) ->
    dfp_read_field_def_get_server_sockets_request(Bin, 0, 0,
						  id(0, TrUserData),
						  id(0, TrUserData),
						  id(0, TrUserData),
						  TrUserData).

dfp_read_field_def_get_server_sockets_request(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    d_field_get_server_sockets_request_server_id(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
dfp_read_field_def_get_server_sockets_request(<<16,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    d_field_get_server_sockets_request_start_socket_id(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
dfp_read_field_def_get_server_sockets_request(<<24,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    d_field_get_server_sockets_request_max_results(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
dfp_read_field_def_get_server_sockets_request(<<>>, 0,
					      0, F@_1, F@_2, F@_3, _) ->
    #{server_id => F@_1, start_socket_id => F@_2,
      max_results => F@_3};
dfp_read_field_def_get_server_sockets_request(Other, Z1,
					      Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    dg_read_field_def_get_server_sockets_request(Other, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData).

dg_read_field_def_get_server_sockets_request(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_server_sockets_request(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
dg_read_field_def_get_server_sockets_request(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_server_sockets_request_server_id(Rest, 0, 0,
						       F@_1, F@_2, F@_3,
						       TrUserData);
      16 ->
	  d_field_get_server_sockets_request_start_socket_id(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      24 ->
	  d_field_get_server_sockets_request_max_results(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_server_sockets_request(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_get_server_sockets_request(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_get_server_sockets_request(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
	    3 ->
		skip_group_get_server_sockets_request(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3,
						      TrUserData);
	    5 ->
		skip_32_get_server_sockets_request(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_get_server_sockets_request(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, _) ->
    #{server_id => F@_1, start_socket_id => F@_2,
      max_results => F@_3}.

d_field_get_server_sockets_request_server_id(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    d_field_get_server_sockets_request_server_id(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
d_field_get_server_sockets_request_server_id(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3,
					     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_server_sockets_request(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  TrUserData).

d_field_get_server_sockets_request_start_socket_id(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    d_field_get_server_sockets_request_start_socket_id(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
d_field_get_server_sockets_request_start_socket_id(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _, F@_3,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_server_sockets_request(RestF, 0,
						  0, F@_1, NewFValue, F@_3,
						  TrUserData).

d_field_get_server_sockets_request_max_results(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    d_field_get_server_sockets_request_max_results(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
d_field_get_server_sockets_request_max_results(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_server_sockets_request(RestF, 0,
						  0, F@_1, F@_2, NewFValue,
						  TrUserData).

skip_varint_get_server_sockets_request(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_get_server_sockets_request(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
skip_varint_get_server_sockets_request(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_get_server_sockets_request(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

skip_length_delimited_get_server_sockets_request(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 57 ->
    skip_length_delimited_get_server_sockets_request(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
skip_length_delimited_get_server_sockets_request(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_server_sockets_request(Rest2, 0,
						  0, F@_1, F@_2, F@_3,
						  TrUserData).

skip_group_get_server_sockets_request(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_server_sockets_request(Rest, 0,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

skip_32_get_server_sockets_request(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_get_server_sockets_request(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

skip_64_get_server_sockets_request(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_get_server_sockets_request(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

decode_msg_get_server_sockets_response(Bin,
				       TrUserData) ->
    dfp_read_field_def_get_server_sockets_response(Bin, 0,
						   0, id([], TrUserData),
						   id(false, TrUserData),
						   TrUserData).

dfp_read_field_def_get_server_sockets_response(<<10,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    d_field_get_server_sockets_response_socket_ref(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_get_server_sockets_response(<<16,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    d_field_get_server_sockets_response_end(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_get_server_sockets_response(<<>>, 0,
					       0, R1, F@_2, TrUserData) ->
    S1 = #{'end' => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{socket_ref => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_get_server_sockets_response(Other,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    dg_read_field_def_get_server_sockets_response(Other, Z1,
						  Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_get_server_sockets_response(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_server_sockets_response(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
dg_read_field_def_get_server_sockets_response(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_server_sockets_response_socket_ref(Rest, 0,
							 0, F@_1, F@_2,
							 TrUserData);
      16 ->
	  d_field_get_server_sockets_response_end(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_server_sockets_response(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_get_server_sockets_response(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    2 ->
		skip_length_delimited_get_server_sockets_response(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    3 ->
		skip_group_get_server_sockets_response(Rest, Key bsr 3,
						       0, F@_1, F@_2,
						       TrUserData);
	    5 ->
		skip_32_get_server_sockets_response(Rest, 0, 0, F@_1,
						    F@_2, TrUserData)
	  end
    end;
dg_read_field_def_get_server_sockets_response(<<>>, 0,
					      0, R1, F@_2, TrUserData) ->
    S1 = #{'end' => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{socket_ref => lists_reverse(R1, TrUserData)}
    end.

d_field_get_server_sockets_response_socket_ref(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_server_sockets_response_socket_ref(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
d_field_get_server_sockets_response_socket_ref(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, Prev, F@_2,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket_ref(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_server_sockets_response(RestF, 0,
						   0,
						   cons(NewFValue, Prev,
							TrUserData),
						   F@_2, TrUserData).

d_field_get_server_sockets_response_end(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_server_sockets_response_end(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_field_get_server_sockets_response_end(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_get_server_sockets_response(RestF, 0,
						   0, F@_1, NewFValue,
						   TrUserData).

skip_varint_get_server_sockets_response(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_get_server_sockets_response(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
skip_varint_get_server_sockets_response(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_server_sockets_response(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_get_server_sockets_response(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    skip_length_delimited_get_server_sockets_response(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
skip_length_delimited_get_server_sockets_response(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_server_sockets_response(Rest2, 0,
						   0, F@_1, F@_2, TrUserData).

skip_group_get_server_sockets_response(Bin, FNum, Z2,
				       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_server_sockets_response(Rest, 0,
						   Z2, F@_1, F@_2, TrUserData).

skip_32_get_server_sockets_response(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_server_sockets_response(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

skip_64_get_server_sockets_response(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_server_sockets_response(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

decode_msg_get_channel_request(Bin, TrUserData) ->
    dfp_read_field_def_get_channel_request(Bin, 0, 0,
					   id(0, TrUserData), TrUserData).

dfp_read_field_def_get_channel_request(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_get_channel_request_channel_id(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_get_channel_request(<<>>, 0, 0, F@_1,
				       _) ->
    #{channel_id => F@_1};
dfp_read_field_def_get_channel_request(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_get_channel_request(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_get_channel_request(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_channel_request(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_channel_request(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_channel_request_channel_id(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_channel_request(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_get_channel_request(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_get_channel_request(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_get_channel_request(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_get_channel_request(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_get_channel_request(<<>>, 0, 0, F@_1,
				      _) ->
    #{channel_id => F@_1}.

d_field_get_channel_request_channel_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_channel_request_channel_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_get_channel_request_channel_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_channel_request(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_get_channel_request(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_channel_request(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_get_channel_request(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_channel_request(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_get_channel_request(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_channel_request(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_get_channel_request(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_channel_request(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_get_channel_request(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_channel_request(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_get_channel_request(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_channel_request(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_get_channel_request(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_channel_request(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_get_channel_response(Bin, TrUserData) ->
    dfp_read_field_def_get_channel_response(Bin, 0, 0,
					    id('$undef', TrUserData),
					    TrUserData).

dfp_read_field_def_get_channel_response(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_get_channel_response_channel(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_get_channel_response(<<>>, 0, 0,
					F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{channel => F@_1}
    end;
dfp_read_field_def_get_channel_response(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_get_channel_response(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_get_channel_response(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_channel_response(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_channel_response(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_channel_response_channel(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_channel_response(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_get_channel_response(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_get_channel_response(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_get_channel_response(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_get_channel_response(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_get_channel_response(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{channel => F@_1}
    end.

d_field_get_channel_response_channel(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_channel_response_channel(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_get_channel_response_channel(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_channel(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_channel_response(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_channel(Prev,
								     NewFValue,
								     TrUserData)
					    end,
					    TrUserData).

skip_varint_get_channel_response(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_channel_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_get_channel_response(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_channel_response(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_get_channel_response(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_channel_response(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_get_channel_response(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_channel_response(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_get_channel_response(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_channel_response(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_get_channel_response(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_channel_response(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_get_channel_response(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_channel_response(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_get_subchannel_request(Bin, TrUserData) ->
    dfp_read_field_def_get_subchannel_request(Bin, 0, 0,
					      id(0, TrUserData), TrUserData).

dfp_read_field_def_get_subchannel_request(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_get_subchannel_request_subchannel_id(Rest, Z1,
						 Z2, F@_1, TrUserData);
dfp_read_field_def_get_subchannel_request(<<>>, 0, 0,
					  F@_1, _) ->
    #{subchannel_id => F@_1};
dfp_read_field_def_get_subchannel_request(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_get_subchannel_request(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_get_subchannel_request(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_subchannel_request(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_subchannel_request(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_subchannel_request_subchannel_id(Rest, 0, 0,
						       F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_subchannel_request(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_get_subchannel_request(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_get_subchannel_request(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_get_subchannel_request(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_get_subchannel_request(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_get_subchannel_request(<<>>, 0, 0,
					 F@_1, _) ->
    #{subchannel_id => F@_1}.

d_field_get_subchannel_request_subchannel_id(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_subchannel_request_subchannel_id(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
d_field_get_subchannel_request_subchannel_id(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_subchannel_request(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_get_subchannel_request(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_subchannel_request(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_get_subchannel_request(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_subchannel_request(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_get_subchannel_request(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_subchannel_request(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_get_subchannel_request(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_subchannel_request(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_get_subchannel_request(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_subchannel_request(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_get_subchannel_request(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_subchannel_request(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_get_subchannel_request(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_subchannel_request(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_get_subchannel_response(Bin, TrUserData) ->
    dfp_read_field_def_get_subchannel_response(Bin, 0, 0,
					       id('$undef', TrUserData),
					       TrUserData).

dfp_read_field_def_get_subchannel_response(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_get_subchannel_response_subchannel(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_get_subchannel_response(<<>>, 0, 0,
					   F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{subchannel => F@_1}
    end;
dfp_read_field_def_get_subchannel_response(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_get_subchannel_response(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_get_subchannel_response(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_subchannel_response(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_subchannel_response(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_subchannel_response_subchannel(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_subchannel_response(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_get_subchannel_response(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_get_subchannel_response(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_get_subchannel_response(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_get_subchannel_response(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_get_subchannel_response(<<>>, 0, 0,
					  F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{subchannel => F@_1}
    end.

d_field_get_subchannel_response_subchannel(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_subchannel_response_subchannel(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
d_field_get_subchannel_response_subchannel(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_subchannel(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_subchannel_response(RestF, 0, 0,
					       if Prev == '$undef' -> NewFValue;
						  true ->
						      merge_msg_subchannel(Prev,
									   NewFValue,
									   TrUserData)
					       end,
					       TrUserData).

skip_varint_get_subchannel_response(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_subchannel_response(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_get_subchannel_response(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_subchannel_response(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_get_subchannel_response(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_subchannel_response(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_get_subchannel_response(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_subchannel_response(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_get_subchannel_response(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_subchannel_response(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_get_subchannel_response(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_subchannel_response(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_get_subchannel_response(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_subchannel_response(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_get_socket_request(Bin, TrUserData) ->
    dfp_read_field_def_get_socket_request(Bin, 0, 0,
					  id(0, TrUserData),
					  id(false, TrUserData), TrUserData).

dfp_read_field_def_get_socket_request(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_socket_request_socket_id(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_get_socket_request(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_socket_request_summary(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_get_socket_request(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{socket_id => F@_1, summary => F@_2};
dfp_read_field_def_get_socket_request(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_get_socket_request(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_get_socket_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_socket_request(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_get_socket_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_get_socket_request_socket_id(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      16 ->
	  d_field_get_socket_request_summary(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_socket_request(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_get_socket_request(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_get_socket_request(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_get_socket_request(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_get_socket_request(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_get_socket_request(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{socket_id => F@_1, summary => F@_2}.

d_field_get_socket_request_socket_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_socket_request_socket_id(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_get_socket_request_socket_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_get_socket_request(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_get_socket_request_summary(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_socket_request_summary(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_get_socket_request_summary(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_get_socket_request(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_get_socket_request(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_get_socket_request(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_get_socket_request(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_socket_request(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_get_socket_request(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_socket_request(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_get_socket_request(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_socket_request(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_get_socket_request(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_socket_request(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_get_socket_request(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_socket_request(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_get_socket_request(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_socket_request(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_get_socket_response(Bin, TrUserData) ->
    dfp_read_field_def_get_socket_response(Bin, 0, 0,
					   id('$undef', TrUserData),
					   TrUserData).

dfp_read_field_def_get_socket_response(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_get_socket_response_socket(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_get_socket_response(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{socket => F@_1}
    end;
dfp_read_field_def_get_socket_response(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_get_socket_response(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_get_socket_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_socket_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_socket_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_socket_response_socket(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_socket_response(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_get_socket_response(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_get_socket_response(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_get_socket_response(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_get_socket_response(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_get_socket_response(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{socket => F@_1}
    end.

d_field_get_socket_response_socket(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_socket_response_socket(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_get_socket_response_socket(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_socket(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_socket_response(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_socket(Prev,
								   NewFValue,
								   TrUserData)
					   end,
					   TrUserData).

skip_varint_get_socket_response(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_socket_response(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_get_socket_response(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_socket_response(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_get_socket_response(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_socket_response(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_get_socket_response(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_socket_response(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_get_socket_response(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_socket_response(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_get_socket_response(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_socket_response(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_get_socket_response(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_socket_response(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_any(Bin, TrUserData) ->
    dfp_read_field_def_any(Bin, 0, 0, id(<<>>, TrUserData),
			   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_any(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_any_type_url(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_any(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_any_value(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_any(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{type_url => F@_1, value => F@_2};
dfp_read_field_def_any(Other, Z1, Z2, F@_1, F@_2,
		       TrUserData) ->
    dg_read_field_def_any(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData).

dg_read_field_def_any(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_any(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
dg_read_field_def_any(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_any_type_url(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      18 ->
	  d_field_any_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_any(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_any(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_any(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    3 ->
		skip_group_any(Rest, Key bsr 3, 0, F@_1, F@_2,
			       TrUserData);
	    5 -> skip_32_any(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_any(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{type_url => F@_1, value => F@_2}.

d_field_any_type_url(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_any_type_url(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_any_type_url(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_any(RestF, 0, 0, NewFValue, F@_2,
			   TrUserData).

d_field_any_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_any_value(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_any_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_any(RestF, 0, 0, F@_1, NewFValue,
			   TrUserData).

skip_varint_any(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    skip_varint_any(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_any(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_any(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_length_delimited_any(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_any(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
skip_length_delimited_any(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_any(Rest2, 0, 0, F@_1, F@_2,
			   TrUserData).

skip_group_any(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_any(Rest, 0, Z2, F@_1, F@_2,
			   TrUserData).

skip_32_any(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_any(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_64_any(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_any(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

decode_msg_duration(Bin, TrUserData) ->
    dfp_read_field_def_duration(Bin, 0, 0,
				id(0, TrUserData), id(0, TrUserData),
				TrUserData).

dfp_read_field_def_duration(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_duration_seconds(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_duration(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_duration_nanos(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_duration(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_duration(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_duration(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_duration(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_duration(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_duration(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_duration_seconds(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      16 ->
	  d_field_duration_nanos(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_duration(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_duration(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_duration(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_duration(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_duration(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_duration(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_duration_seconds(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_duration_seconds(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_duration_seconds(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_duration(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_duration_nanos(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_duration_nanos(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_duration_nanos(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_duration(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_duration(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_duration(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_duration(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_duration(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_duration(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_duration(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_duration(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_duration(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_duration(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_duration(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_duration(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_timestamp(Bin, TrUserData) ->
    dfp_read_field_def_timestamp(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_timestamp(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_timestamp_seconds(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_timestamp(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_nanos(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_timestamp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_timestamp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_timestamp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_timestamp_seconds(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_timestamp_nanos(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_timestamp(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_timestamp(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_timestamp(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_timestamp_seconds(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_seconds(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_timestamp_seconds(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_timestamp_nanos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_nanos(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_timestamp_nanos(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_timestamp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_timestamp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_timestamp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_timestamp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_timestamp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_timestamp(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_timestamp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_timestamp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_double_value(Bin, TrUserData) ->
    dfp_read_field_def_double_value(Bin, 0, 0,
				    id(0.0, TrUserData), TrUserData).

dfp_read_field_def_double_value(<<9, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_double_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_double_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_double_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_double_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_double_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_double_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_double_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_double_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_double_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_double_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_double_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_double_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_double_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_double_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_double_value_value(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(infinity, TrUserData), TrUserData);
d_field_double_value_value(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id('-infinity', TrUserData), TrUserData);
d_field_double_value_value(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(nan, TrUserData), TrUserData);
d_field_double_value_value(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(Value, TrUserData), TrUserData).

skip_varint_double_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_double_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_double_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_double_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_double_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_double_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_double_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_double_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_double_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_double_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_double_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_float_value(Bin, TrUserData) ->
    dfp_read_field_def_float_value(Bin, 0, 0,
				   id(0.0, TrUserData), TrUserData).

dfp_read_field_def_float_value(<<13, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_float_value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_float_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_float_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_float_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_float_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_float_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_float_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_float_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_float_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_float_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_float_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_float_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_float_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_float_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_float_value_value(<<0:16, 128, 127,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(infinity, TrUserData), TrUserData);
d_field_float_value_value(<<0:16, 128, 255,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id('-infinity', TrUserData), TrUserData);
d_field_float_value_value(<<_:16, 1:1, _:7, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(nan, TrUserData), TrUserData);
d_field_float_value_value(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(Value, TrUserData), TrUserData).

skip_varint_float_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_float_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_float_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_float_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_float_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_float_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_float_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_float_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_float_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_float_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_float_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_int_64_value(Bin, TrUserData) ->
    dfp_read_field_def_int_64_value(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_int_64_value(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_int_64_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_int_64_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_int_64_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_int_64_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_64_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_64_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_64_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_64_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_int_64_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_int_64_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_int_64_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_64_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_int_64_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_64_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_int_64_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_int_64_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_int_64_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_int_64_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_64_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_64_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_64_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_int_64_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_64_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_int_64_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_int_64_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_u_int_64_value(Bin, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_64_value(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_64_value_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_u_int_64_value(<<>>, 0, 0, F@_1,
				  _) ->
    #{value => F@_1};
dfp_read_field_def_u_int_64_value(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_u_int_64_value(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_u_int_64_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_64_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_64_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_64_value_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_64_value(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_u_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_64_value(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_u_int_64_value(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_u_int_64_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_u_int_64_value_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_64_value_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_u_int_64_value_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_64_value(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_u_int_64_value(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_64_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_u_int_64_value(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_u_int_64_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_64_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_64_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_64_value(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_u_int_64_value(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_64_value(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_u_int_64_value(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_u_int_64_value(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_int_32_value(Bin, TrUserData) ->
    dfp_read_field_def_int_32_value(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_int_32_value(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_int_32_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_int_32_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_int_32_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_int_32_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_32_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_32_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_32_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_32_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_int_32_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_int_32_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_int_32_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_32_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_int_32_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_32_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_int_32_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_int_32_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_int_32_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_int_32_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_32_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_32_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_32_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_int_32_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_32_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_int_32_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_int_32_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_u_int_32_value(Bin, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_32_value(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_32_value_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_u_int_32_value(<<>>, 0, 0, F@_1,
				  _) ->
    #{value => F@_1};
dfp_read_field_def_u_int_32_value(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_u_int_32_value(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_u_int_32_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_32_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_32_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_32_value_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_32_value(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_u_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_32_value(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_u_int_32_value(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_u_int_32_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_u_int_32_value_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_32_value_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_u_int_32_value_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_32_value(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_u_int_32_value(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_32_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_u_int_32_value(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_u_int_32_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_32_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_32_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_32_value(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_u_int_32_value(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_32_value(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_u_int_32_value(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_u_int_32_value(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_bool_value(Bin, TrUserData) ->
    dfp_read_field_def_bool_value(Bin, 0, 0,
				  id(false, TrUserData), TrUserData).

dfp_read_field_def_bool_value(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_bool_value_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_bool_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_bool_value(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_bool_value(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_bool_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bool_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_bool_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_bool_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bool_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_bool_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bool_value(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_bool_value(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_bool_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bool_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_bool_value_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bool_value_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_bool_value_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_bool_value(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_bool_value(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_bool_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_bool_value(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_bool_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bool_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bool_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bool_value(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_bool_value(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bool_value(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_bool_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_bool_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_string_value(Bin, TrUserData) ->
    dfp_read_field_def_string_value(Bin, 0, 0,
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_string_value(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_string_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_string_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_string_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_string_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_string_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_string_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_string_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_string_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_string_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_string_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_string_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_string_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_string_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_string_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_string_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_string_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_string_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_string_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_string_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_string_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_string_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_string_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_string_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_string_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_string_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_string_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_string_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_bytes_value(Bin, TrUserData) ->
    dfp_read_field_def_bytes_value(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_bytes_value(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_bytes_value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_bytes_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_bytes_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_bytes_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_bytes_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bytes_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_bytes_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_bytes_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bytes_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_bytes_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bytes_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_bytes_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_bytes_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bytes_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_bytes_value_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bytes_value_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_bytes_value_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_bytes_value(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_bytes_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_bytes_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_bytes_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_bytes_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bytes_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bytes_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bytes_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_bytes_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bytes_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_bytes_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_bytes_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

'd_enum_channel_connectivity_state.State'(0) ->
    'UNKNOWN';
'd_enum_channel_connectivity_state.State'(1) -> 'IDLE';
'd_enum_channel_connectivity_state.State'(2) ->
    'CONNECTING';
'd_enum_channel_connectivity_state.State'(3) -> 'READY';
'd_enum_channel_connectivity_state.State'(4) ->
    'TRANSIENT_FAILURE';
'd_enum_channel_connectivity_state.State'(5) ->
    'SHUTDOWN';
'd_enum_channel_connectivity_state.State'(V) -> V.

'd_enum_channel_trace_event.Severity'(0) ->
    'CT_UNKNOWN';
'd_enum_channel_trace_event.Severity'(1) -> 'CT_INFO';
'd_enum_channel_trace_event.Severity'(2) ->
    'CT_WARNING';
'd_enum_channel_trace_event.Severity'(3) -> 'CT_ERROR';
'd_enum_channel_trace_event.Severity'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      channel -> merge_msg_channel(Prev, New, TrUserData);
      subchannel ->
	  merge_msg_subchannel(Prev, New, TrUserData);
      channel_connectivity_state ->
	  merge_msg_channel_connectivity_state(Prev, New,
					       TrUserData);
      channel_data ->
	  merge_msg_channel_data(Prev, New, TrUserData);
      channel_trace_event ->
	  merge_msg_channel_trace_event(Prev, New, TrUserData);
      channel_trace ->
	  merge_msg_channel_trace(Prev, New, TrUserData);
      channel_ref ->
	  merge_msg_channel_ref(Prev, New, TrUserData);
      subchannel_ref ->
	  merge_msg_subchannel_ref(Prev, New, TrUserData);
      socket_ref ->
	  merge_msg_socket_ref(Prev, New, TrUserData);
      server_ref ->
	  merge_msg_server_ref(Prev, New, TrUserData);
      server -> merge_msg_server(Prev, New, TrUserData);
      server_data ->
	  merge_msg_server_data(Prev, New, TrUserData);
      socket -> merge_msg_socket(Prev, New, TrUserData);
      socket_data ->
	  merge_msg_socket_data(Prev, New, TrUserData);
      tcp_ip_address ->
	  merge_msg_tcp_ip_address(Prev, New, TrUserData);
      uds_address ->
	  merge_msg_uds_address(Prev, New, TrUserData);
      other_address ->
	  merge_msg_other_address(Prev, New, TrUserData);
      address -> merge_msg_address(Prev, New, TrUserData);
      tls -> merge_msg_tls(Prev, New, TrUserData);
      other_security ->
	  merge_msg_other_security(Prev, New, TrUserData);
      security -> merge_msg_security(Prev, New, TrUserData);
      socket_option ->
	  merge_msg_socket_option(Prev, New, TrUserData);
      socket_option_timeout ->
	  merge_msg_socket_option_timeout(Prev, New, TrUserData);
      socket_option_linger ->
	  merge_msg_socket_option_linger(Prev, New, TrUserData);
      socket_option_tcp_info ->
	  merge_msg_socket_option_tcp_info(Prev, New, TrUserData);
      get_top_channels_request ->
	  merge_msg_get_top_channels_request(Prev, New,
					     TrUserData);
      get_top_channels_response ->
	  merge_msg_get_top_channels_response(Prev, New,
					      TrUserData);
      get_servers_request ->
	  merge_msg_get_servers_request(Prev, New, TrUserData);
      get_servers_response ->
	  merge_msg_get_servers_response(Prev, New, TrUserData);
      get_server_request ->
	  merge_msg_get_server_request(Prev, New, TrUserData);
      get_server_response ->
	  merge_msg_get_server_response(Prev, New, TrUserData);
      get_server_sockets_request ->
	  merge_msg_get_server_sockets_request(Prev, New,
					       TrUserData);
      get_server_sockets_response ->
	  merge_msg_get_server_sockets_response(Prev, New,
						TrUserData);
      get_channel_request ->
	  merge_msg_get_channel_request(Prev, New, TrUserData);
      get_channel_response ->
	  merge_msg_get_channel_response(Prev, New, TrUserData);
      get_subchannel_request ->
	  merge_msg_get_subchannel_request(Prev, New, TrUserData);
      get_subchannel_response ->
	  merge_msg_get_subchannel_response(Prev, New,
					    TrUserData);
      get_socket_request ->
	  merge_msg_get_socket_request(Prev, New, TrUserData);
      get_socket_response ->
	  merge_msg_get_socket_response(Prev, New, TrUserData);
      any -> merge_msg_any(Prev, New, TrUserData);
      duration -> merge_msg_duration(Prev, New, TrUserData);
      timestamp -> merge_msg_timestamp(Prev, New, TrUserData);
      double_value ->
	  merge_msg_double_value(Prev, New, TrUserData);
      float_value ->
	  merge_msg_float_value(Prev, New, TrUserData);
      int_64_value ->
	  merge_msg_int_64_value(Prev, New, TrUserData);
      u_int_64_value ->
	  merge_msg_u_int_64_value(Prev, New, TrUserData);
      int_32_value ->
	  merge_msg_int_32_value(Prev, New, TrUserData);
      u_int_32_value ->
	  merge_msg_u_int_32_value(Prev, New, TrUserData);
      bool_value ->
	  merge_msg_bool_value(Prev, New, TrUserData);
      string_value ->
	  merge_msg_string_value(Prev, New, TrUserData);
      bytes_value ->
	  merge_msg_bytes_value(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_channel/3}).
merge_msg_channel(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{ref := PFref}, #{ref := NFref}} ->
	       S1#{ref =>
		       merge_msg_channel_ref(PFref, NFref, TrUserData)};
	   {_, #{ref := NFref}} -> S1#{ref => NFref};
	   {#{ref := PFref}, _} -> S1#{ref => PFref};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{data := PFdata}, #{data := NFdata}} ->
	       S2#{data =>
		       merge_msg_channel_data(PFdata, NFdata, TrUserData)};
	   {_, #{data := NFdata}} -> S2#{data => NFdata};
	   {#{data := PFdata}, _} -> S2#{data => PFdata};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{channel_ref := PFchannel_ref},
	    #{channel_ref := NFchannel_ref}} ->
	       S3#{channel_ref =>
		       'erlang_++'(PFchannel_ref, NFchannel_ref, TrUserData)};
	   {_, #{channel_ref := NFchannel_ref}} ->
	       S3#{channel_ref => NFchannel_ref};
	   {#{channel_ref := PFchannel_ref}, _} ->
	       S3#{channel_ref => PFchannel_ref};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{subchannel_ref := PFsubchannel_ref},
	    #{subchannel_ref := NFsubchannel_ref}} ->
	       S4#{subchannel_ref =>
		       'erlang_++'(PFsubchannel_ref, NFsubchannel_ref,
				   TrUserData)};
	   {_, #{subchannel_ref := NFsubchannel_ref}} ->
	       S4#{subchannel_ref => NFsubchannel_ref};
	   {#{subchannel_ref := PFsubchannel_ref}, _} ->
	       S4#{subchannel_ref => PFsubchannel_ref};
	   {_, _} -> S4
	 end,
    case {PMsg, NMsg} of
      {#{socket_ref := PFsocket_ref},
       #{socket_ref := NFsocket_ref}} ->
	  S5#{socket_ref =>
		  'erlang_++'(PFsocket_ref, NFsocket_ref, TrUserData)};
      {_, #{socket_ref := NFsocket_ref}} ->
	  S5#{socket_ref => NFsocket_ref};
      {#{socket_ref := PFsocket_ref}, _} ->
	  S5#{socket_ref => PFsocket_ref};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_subchannel/3}).
merge_msg_subchannel(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{ref := PFref}, #{ref := NFref}} ->
	       S1#{ref =>
		       merge_msg_subchannel_ref(PFref, NFref, TrUserData)};
	   {_, #{ref := NFref}} -> S1#{ref => NFref};
	   {#{ref := PFref}, _} -> S1#{ref => PFref};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{data := PFdata}, #{data := NFdata}} ->
	       S2#{data =>
		       merge_msg_channel_data(PFdata, NFdata, TrUserData)};
	   {_, #{data := NFdata}} -> S2#{data => NFdata};
	   {#{data := PFdata}, _} -> S2#{data => PFdata};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{channel_ref := PFchannel_ref},
	    #{channel_ref := NFchannel_ref}} ->
	       S3#{channel_ref =>
		       'erlang_++'(PFchannel_ref, NFchannel_ref, TrUserData)};
	   {_, #{channel_ref := NFchannel_ref}} ->
	       S3#{channel_ref => NFchannel_ref};
	   {#{channel_ref := PFchannel_ref}, _} ->
	       S3#{channel_ref => PFchannel_ref};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{subchannel_ref := PFsubchannel_ref},
	    #{subchannel_ref := NFsubchannel_ref}} ->
	       S4#{subchannel_ref =>
		       'erlang_++'(PFsubchannel_ref, NFsubchannel_ref,
				   TrUserData)};
	   {_, #{subchannel_ref := NFsubchannel_ref}} ->
	       S4#{subchannel_ref => NFsubchannel_ref};
	   {#{subchannel_ref := PFsubchannel_ref}, _} ->
	       S4#{subchannel_ref => PFsubchannel_ref};
	   {_, _} -> S4
	 end,
    case {PMsg, NMsg} of
      {#{socket_ref := PFsocket_ref},
       #{socket_ref := NFsocket_ref}} ->
	  S5#{socket_ref =>
		  'erlang_++'(PFsocket_ref, NFsocket_ref, TrUserData)};
      {_, #{socket_ref := NFsocket_ref}} ->
	  S5#{socket_ref => NFsocket_ref};
      {#{socket_ref := PFsocket_ref}, _} ->
	  S5#{socket_ref => PFsocket_ref};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_channel_connectivity_state/3}).
merge_msg_channel_connectivity_state(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{state := NFstate}} -> S1#{state => NFstate};
      {#{state := PFstate}, _} -> S1#{state => PFstate};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_channel_data/3}).
merge_msg_channel_data(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{state := PFstate}, #{state := NFstate}} ->
	       S1#{state =>
		       merge_msg_channel_connectivity_state(PFstate, NFstate,
							    TrUserData)};
	   {_, #{state := NFstate}} -> S1#{state => NFstate};
	   {#{state := PFstate}, _} -> S1#{state => PFstate};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{target := NFtarget}} -> S2#{target => NFtarget};
	   {#{target := PFtarget}, _} -> S2#{target => PFtarget};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{trace := PFtrace}, #{trace := NFtrace}} ->
	       S3#{trace =>
		       merge_msg_channel_trace(PFtrace, NFtrace, TrUserData)};
	   {_, #{trace := NFtrace}} -> S3#{trace => NFtrace};
	   {#{trace := PFtrace}, _} -> S3#{trace => PFtrace};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{calls_started := NFcalls_started}} ->
	       S4#{calls_started => NFcalls_started};
	   {#{calls_started := PFcalls_started}, _} ->
	       S4#{calls_started => PFcalls_started};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{calls_succeeded := NFcalls_succeeded}} ->
	       S5#{calls_succeeded => NFcalls_succeeded};
	   {#{calls_succeeded := PFcalls_succeeded}, _} ->
	       S5#{calls_succeeded => PFcalls_succeeded};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{calls_failed := NFcalls_failed}} ->
	       S6#{calls_failed => NFcalls_failed};
	   {#{calls_failed := PFcalls_failed}, _} ->
	       S6#{calls_failed => PFcalls_failed};
	   _ -> S6
	 end,
    case {PMsg, NMsg} of
      {#{last_call_started_timestamp :=
	     PFlast_call_started_timestamp},
       #{last_call_started_timestamp :=
	     NFlast_call_started_timestamp}} ->
	  S7#{last_call_started_timestamp =>
		  merge_msg_timestamp(PFlast_call_started_timestamp,
				      NFlast_call_started_timestamp,
				      TrUserData)};
      {_,
       #{last_call_started_timestamp :=
	     NFlast_call_started_timestamp}} ->
	  S7#{last_call_started_timestamp =>
		  NFlast_call_started_timestamp};
      {#{last_call_started_timestamp :=
	     PFlast_call_started_timestamp},
       _} ->
	  S7#{last_call_started_timestamp =>
		  PFlast_call_started_timestamp};
      {_, _} -> S7
    end.

-compile({nowarn_unused_function,merge_msg_channel_trace_event/3}).
merge_msg_channel_trace_event(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{description := NFdescription}} ->
	       S1#{description => NFdescription};
	   {#{description := PFdescription}, _} ->
	       S1#{description => PFdescription};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{severity := NFseverity}} ->
	       S2#{severity => NFseverity};
	   {#{severity := PFseverity}, _} ->
	       S2#{severity => PFseverity};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{timestamp := PFtimestamp},
	    #{timestamp := NFtimestamp}} ->
	       S3#{timestamp =>
		       merge_msg_timestamp(PFtimestamp, NFtimestamp,
					   TrUserData)};
	   {_, #{timestamp := NFtimestamp}} ->
	       S3#{timestamp => NFtimestamp};
	   {#{timestamp := PFtimestamp}, _} ->
	       S3#{timestamp => PFtimestamp};
	   {_, _} -> S3
	 end,
    case {PMsg, NMsg} of
      {#{child_ref := {channel_ref, OPFchild_ref}},
       #{child_ref := {channel_ref, ONFchild_ref}}} ->
	  S4#{child_ref =>
		  {channel_ref,
		   merge_msg_channel_ref(OPFchild_ref, ONFchild_ref,
					 TrUserData)}};
      {#{child_ref := {subchannel_ref, OPFchild_ref}},
       #{child_ref := {subchannel_ref, ONFchild_ref}}} ->
	  S4#{child_ref =>
		  {subchannel_ref,
		   merge_msg_subchannel_ref(OPFchild_ref, ONFchild_ref,
					    TrUserData)}};
      {_, #{child_ref := NFchild_ref}} ->
	  S4#{child_ref => NFchild_ref};
      {#{child_ref := PFchild_ref}, _} ->
	  S4#{child_ref => PFchild_ref};
      {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_channel_trace/3}).
merge_msg_channel_trace(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{num_events_logged := NFnum_events_logged}} ->
	       S1#{num_events_logged => NFnum_events_logged};
	   {#{num_events_logged := PFnum_events_logged}, _} ->
	       S1#{num_events_logged => PFnum_events_logged};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{creation_timestamp := PFcreation_timestamp},
	    #{creation_timestamp := NFcreation_timestamp}} ->
	       S2#{creation_timestamp =>
		       merge_msg_timestamp(PFcreation_timestamp,
					   NFcreation_timestamp, TrUserData)};
	   {_, #{creation_timestamp := NFcreation_timestamp}} ->
	       S2#{creation_timestamp => NFcreation_timestamp};
	   {#{creation_timestamp := PFcreation_timestamp}, _} ->
	       S2#{creation_timestamp => PFcreation_timestamp};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{events := PFevents}, #{events := NFevents}} ->
	  S3#{events =>
		  'erlang_++'(PFevents, NFevents, TrUserData)};
      {_, #{events := NFevents}} -> S3#{events => NFevents};
      {#{events := PFevents}, _} -> S3#{events => PFevents};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_channel_ref/3}).
merge_msg_channel_ref(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{channel_id := NFchannel_id}} ->
	       S1#{channel_id => NFchannel_id};
	   {#{channel_id := PFchannel_id}, _} ->
	       S1#{channel_id => PFchannel_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S2#{name => NFname};
      {#{name := PFname}, _} -> S2#{name => PFname};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_subchannel_ref/3}).
merge_msg_subchannel_ref(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{subchannel_id := NFsubchannel_id}} ->
	       S1#{subchannel_id => NFsubchannel_id};
	   {#{subchannel_id := PFsubchannel_id}, _} ->
	       S1#{subchannel_id => PFsubchannel_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S2#{name => NFname};
      {#{name := PFname}, _} -> S2#{name => PFname};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_socket_ref/3}).
merge_msg_socket_ref(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{socket_id := NFsocket_id}} ->
	       S1#{socket_id => NFsocket_id};
	   {#{socket_id := PFsocket_id}, _} ->
	       S1#{socket_id => PFsocket_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S2#{name => NFname};
      {#{name := PFname}, _} -> S2#{name => PFname};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_server_ref/3}).
merge_msg_server_ref(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{server_id := NFserver_id}} ->
	       S1#{server_id => NFserver_id};
	   {#{server_id := PFserver_id}, _} ->
	       S1#{server_id => PFserver_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S2#{name => NFname};
      {#{name := PFname}, _} -> S2#{name => PFname};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_server/3}).
merge_msg_server(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{ref := PFref}, #{ref := NFref}} ->
	       S1#{ref =>
		       merge_msg_server_ref(PFref, NFref, TrUserData)};
	   {_, #{ref := NFref}} -> S1#{ref => NFref};
	   {#{ref := PFref}, _} -> S1#{ref => PFref};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{data := PFdata}, #{data := NFdata}} ->
	       S2#{data =>
		       merge_msg_server_data(PFdata, NFdata, TrUserData)};
	   {_, #{data := NFdata}} -> S2#{data => NFdata};
	   {#{data := PFdata}, _} -> S2#{data => PFdata};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{listen_socket := PFlisten_socket},
       #{listen_socket := NFlisten_socket}} ->
	  S3#{listen_socket =>
		  'erlang_++'(PFlisten_socket, NFlisten_socket,
			      TrUserData)};
      {_, #{listen_socket := NFlisten_socket}} ->
	  S3#{listen_socket => NFlisten_socket};
      {#{listen_socket := PFlisten_socket}, _} ->
	  S3#{listen_socket => PFlisten_socket};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_server_data/3}).
merge_msg_server_data(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{trace := PFtrace}, #{trace := NFtrace}} ->
	       S1#{trace =>
		       merge_msg_channel_trace(PFtrace, NFtrace, TrUserData)};
	   {_, #{trace := NFtrace}} -> S1#{trace => NFtrace};
	   {#{trace := PFtrace}, _} -> S1#{trace => PFtrace};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{calls_started := NFcalls_started}} ->
	       S2#{calls_started => NFcalls_started};
	   {#{calls_started := PFcalls_started}, _} ->
	       S2#{calls_started => PFcalls_started};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{calls_succeeded := NFcalls_succeeded}} ->
	       S3#{calls_succeeded => NFcalls_succeeded};
	   {#{calls_succeeded := PFcalls_succeeded}, _} ->
	       S3#{calls_succeeded => PFcalls_succeeded};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{calls_failed := NFcalls_failed}} ->
	       S4#{calls_failed => NFcalls_failed};
	   {#{calls_failed := PFcalls_failed}, _} ->
	       S4#{calls_failed => PFcalls_failed};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {#{last_call_started_timestamp :=
	     PFlast_call_started_timestamp},
       #{last_call_started_timestamp :=
	     NFlast_call_started_timestamp}} ->
	  S5#{last_call_started_timestamp =>
		  merge_msg_timestamp(PFlast_call_started_timestamp,
				      NFlast_call_started_timestamp,
				      TrUserData)};
      {_,
       #{last_call_started_timestamp :=
	     NFlast_call_started_timestamp}} ->
	  S5#{last_call_started_timestamp =>
		  NFlast_call_started_timestamp};
      {#{last_call_started_timestamp :=
	     PFlast_call_started_timestamp},
       _} ->
	  S5#{last_call_started_timestamp =>
		  PFlast_call_started_timestamp};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_socket/3}).
merge_msg_socket(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{ref := PFref}, #{ref := NFref}} ->
	       S1#{ref =>
		       merge_msg_socket_ref(PFref, NFref, TrUserData)};
	   {_, #{ref := NFref}} -> S1#{ref => NFref};
	   {#{ref := PFref}, _} -> S1#{ref => PFref};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{data := PFdata}, #{data := NFdata}} ->
	       S2#{data =>
		       merge_msg_socket_data(PFdata, NFdata, TrUserData)};
	   {_, #{data := NFdata}} -> S2#{data => NFdata};
	   {#{data := PFdata}, _} -> S2#{data => PFdata};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{local := PFlocal}, #{local := NFlocal}} ->
	       S3#{local =>
		       merge_msg_address(PFlocal, NFlocal, TrUserData)};
	   {_, #{local := NFlocal}} -> S3#{local => NFlocal};
	   {#{local := PFlocal}, _} -> S3#{local => PFlocal};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{remote := PFremote}, #{remote := NFremote}} ->
	       S4#{remote =>
		       merge_msg_address(PFremote, NFremote, TrUserData)};
	   {_, #{remote := NFremote}} -> S4#{remote => NFremote};
	   {#{remote := PFremote}, _} -> S4#{remote => PFremote};
	   {_, _} -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{security := PFsecurity},
	    #{security := NFsecurity}} ->
	       S5#{security =>
		       merge_msg_security(PFsecurity, NFsecurity, TrUserData)};
	   {_, #{security := NFsecurity}} ->
	       S5#{security => NFsecurity};
	   {#{security := PFsecurity}, _} ->
	       S5#{security => PFsecurity};
	   {_, _} -> S5
	 end,
    case {PMsg, NMsg} of
      {_, #{remote_name := NFremote_name}} ->
	  S6#{remote_name => NFremote_name};
      {#{remote_name := PFremote_name}, _} ->
	  S6#{remote_name => PFremote_name};
      _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_socket_data/3}).
merge_msg_socket_data(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{streams_started := NFstreams_started}} ->
	       S1#{streams_started => NFstreams_started};
	   {#{streams_started := PFstreams_started}, _} ->
	       S1#{streams_started => PFstreams_started};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{streams_succeeded := NFstreams_succeeded}} ->
	       S2#{streams_succeeded => NFstreams_succeeded};
	   {#{streams_succeeded := PFstreams_succeeded}, _} ->
	       S2#{streams_succeeded => PFstreams_succeeded};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{streams_failed := NFstreams_failed}} ->
	       S3#{streams_failed => NFstreams_failed};
	   {#{streams_failed := PFstreams_failed}, _} ->
	       S3#{streams_failed => PFstreams_failed};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{messages_sent := NFmessages_sent}} ->
	       S4#{messages_sent => NFmessages_sent};
	   {#{messages_sent := PFmessages_sent}, _} ->
	       S4#{messages_sent => PFmessages_sent};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{messages_received := NFmessages_received}} ->
	       S5#{messages_received => NFmessages_received};
	   {#{messages_received := PFmessages_received}, _} ->
	       S5#{messages_received => PFmessages_received};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{keep_alives_sent := NFkeep_alives_sent}} ->
	       S6#{keep_alives_sent => NFkeep_alives_sent};
	   {#{keep_alives_sent := PFkeep_alives_sent}, _} ->
	       S6#{keep_alives_sent => PFkeep_alives_sent};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {#{last_local_stream_created_timestamp :=
		  PFlast_local_stream_created_timestamp},
	    #{last_local_stream_created_timestamp :=
		  NFlast_local_stream_created_timestamp}} ->
	       S7#{last_local_stream_created_timestamp =>
		       merge_msg_timestamp(PFlast_local_stream_created_timestamp,
					   NFlast_local_stream_created_timestamp,
					   TrUserData)};
	   {_,
	    #{last_local_stream_created_timestamp :=
		  NFlast_local_stream_created_timestamp}} ->
	       S7#{last_local_stream_created_timestamp =>
		       NFlast_local_stream_created_timestamp};
	   {#{last_local_stream_created_timestamp :=
		  PFlast_local_stream_created_timestamp},
	    _} ->
	       S7#{last_local_stream_created_timestamp =>
		       PFlast_local_stream_created_timestamp};
	   {_, _} -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {#{last_remote_stream_created_timestamp :=
		  PFlast_remote_stream_created_timestamp},
	    #{last_remote_stream_created_timestamp :=
		  NFlast_remote_stream_created_timestamp}} ->
	       S8#{last_remote_stream_created_timestamp =>
		       merge_msg_timestamp(PFlast_remote_stream_created_timestamp,
					   NFlast_remote_stream_created_timestamp,
					   TrUserData)};
	   {_,
	    #{last_remote_stream_created_timestamp :=
		  NFlast_remote_stream_created_timestamp}} ->
	       S8#{last_remote_stream_created_timestamp =>
		       NFlast_remote_stream_created_timestamp};
	   {#{last_remote_stream_created_timestamp :=
		  PFlast_remote_stream_created_timestamp},
	    _} ->
	       S8#{last_remote_stream_created_timestamp =>
		       PFlast_remote_stream_created_timestamp};
	   {_, _} -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {#{last_message_sent_timestamp :=
		   PFlast_message_sent_timestamp},
	     #{last_message_sent_timestamp :=
		   NFlast_message_sent_timestamp}} ->
		S9#{last_message_sent_timestamp =>
			merge_msg_timestamp(PFlast_message_sent_timestamp,
					    NFlast_message_sent_timestamp,
					    TrUserData)};
	    {_,
	     #{last_message_sent_timestamp :=
		   NFlast_message_sent_timestamp}} ->
		S9#{last_message_sent_timestamp =>
			NFlast_message_sent_timestamp};
	    {#{last_message_sent_timestamp :=
		   PFlast_message_sent_timestamp},
	     _} ->
		S9#{last_message_sent_timestamp =>
			PFlast_message_sent_timestamp};
	    {_, _} -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {#{last_message_received_timestamp :=
		   PFlast_message_received_timestamp},
	     #{last_message_received_timestamp :=
		   NFlast_message_received_timestamp}} ->
		S10#{last_message_received_timestamp =>
			 merge_msg_timestamp(PFlast_message_received_timestamp,
					     NFlast_message_received_timestamp,
					     TrUserData)};
	    {_,
	     #{last_message_received_timestamp :=
		   NFlast_message_received_timestamp}} ->
		S10#{last_message_received_timestamp =>
			 NFlast_message_received_timestamp};
	    {#{last_message_received_timestamp :=
		   PFlast_message_received_timestamp},
	     _} ->
		S10#{last_message_received_timestamp =>
			 PFlast_message_received_timestamp};
	    {_, _} -> S10
	  end,
    S12 = case {PMsg, NMsg} of
	    {#{local_flow_control_window :=
		   PFlocal_flow_control_window},
	     #{local_flow_control_window :=
		   NFlocal_flow_control_window}} ->
		S11#{local_flow_control_window =>
			 merge_msg_int_64_value(PFlocal_flow_control_window,
						NFlocal_flow_control_window,
						TrUserData)};
	    {_,
	     #{local_flow_control_window :=
		   NFlocal_flow_control_window}} ->
		S11#{local_flow_control_window =>
			 NFlocal_flow_control_window};
	    {#{local_flow_control_window :=
		   PFlocal_flow_control_window},
	     _} ->
		S11#{local_flow_control_window =>
			 PFlocal_flow_control_window};
	    {_, _} -> S11
	  end,
    S13 = case {PMsg, NMsg} of
	    {#{remote_flow_control_window :=
		   PFremote_flow_control_window},
	     #{remote_flow_control_window :=
		   NFremote_flow_control_window}} ->
		S12#{remote_flow_control_window =>
			 merge_msg_int_64_value(PFremote_flow_control_window,
						NFremote_flow_control_window,
						TrUserData)};
	    {_,
	     #{remote_flow_control_window :=
		   NFremote_flow_control_window}} ->
		S12#{remote_flow_control_window =>
			 NFremote_flow_control_window};
	    {#{remote_flow_control_window :=
		   PFremote_flow_control_window},
	     _} ->
		S12#{remote_flow_control_window =>
			 PFremote_flow_control_window};
	    {_, _} -> S12
	  end,
    case {PMsg, NMsg} of
      {#{option := PFoption}, #{option := NFoption}} ->
	  S13#{option =>
		   'erlang_++'(PFoption, NFoption, TrUserData)};
      {_, #{option := NFoption}} -> S13#{option => NFoption};
      {#{option := PFoption}, _} -> S13#{option => PFoption};
      {_, _} -> S13
    end.

-compile({nowarn_unused_function,merge_msg_tcp_ip_address/3}).
merge_msg_tcp_ip_address(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{ip_address := NFip_address}} ->
	       S1#{ip_address => NFip_address};
	   {#{ip_address := PFip_address}, _} ->
	       S1#{ip_address => PFip_address};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{port := NFport}} -> S2#{port => NFport};
      {#{port := PFport}, _} -> S2#{port => PFport};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_uds_address/3}).
merge_msg_uds_address(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{filename := NFfilename}} ->
	  S1#{filename => NFfilename};
      {#{filename := PFfilename}, _} ->
	  S1#{filename => PFfilename};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_other_address/3}).
merge_msg_other_address(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{value := PFvalue}, #{value := NFvalue}} ->
	  S2#{value =>
		  merge_msg_any(PFvalue, NFvalue, TrUserData)};
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_address/3}).
merge_msg_address(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{address := {tcpip_address, OPFaddress}},
       #{address := {tcpip_address, ONFaddress}}} ->
	  S1#{address =>
		  {tcpip_address,
		   merge_msg_tcp_ip_address(OPFaddress, ONFaddress,
					    TrUserData)}};
      {#{address := {uds_address, OPFaddress}},
       #{address := {uds_address, ONFaddress}}} ->
	  S1#{address =>
		  {uds_address,
		   merge_msg_uds_address(OPFaddress, ONFaddress,
					 TrUserData)}};
      {#{address := {other_address, OPFaddress}},
       #{address := {other_address, ONFaddress}}} ->
	  S1#{address =>
		  {other_address,
		   merge_msg_other_address(OPFaddress, ONFaddress,
					   TrUserData)}};
      {_, #{address := NFaddress}} ->
	  S1#{address => NFaddress};
      {#{address := PFaddress}, _} ->
	  S1#{address => PFaddress};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_tls/3}).
merge_msg_tls(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{cipher_suite := NFcipher_suite}} ->
	       S1#{cipher_suite => NFcipher_suite};
	   {#{cipher_suite := PFcipher_suite}, _} ->
	       S1#{cipher_suite => PFcipher_suite};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{local_certificate := NFlocal_certificate}} ->
	       S2#{local_certificate => NFlocal_certificate};
	   {#{local_certificate := PFlocal_certificate}, _} ->
	       S2#{local_certificate => PFlocal_certificate};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{remote_certificate := NFremote_certificate}} ->
	  S3#{remote_certificate => NFremote_certificate};
      {#{remote_certificate := PFremote_certificate}, _} ->
	  S3#{remote_certificate => PFremote_certificate};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_other_security/3}).
merge_msg_other_security(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{value := PFvalue}, #{value := NFvalue}} ->
	  S2#{value =>
		  merge_msg_any(PFvalue, NFvalue, TrUserData)};
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_security/3}).
merge_msg_security(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{model := {tls, OPFmodel}},
       #{model := {tls, ONFmodel}}} ->
	  S1#{model =>
		  {tls, merge_msg_tls(OPFmodel, ONFmodel, TrUserData)}};
      {#{model := {other, OPFmodel}},
       #{model := {other, ONFmodel}}} ->
	  S1#{model =>
		  {other,
		   merge_msg_other_security(OPFmodel, ONFmodel,
					    TrUserData)}};
      {_, #{model := NFmodel}} -> S1#{model => NFmodel};
      {#{model := PFmodel}, _} -> S1#{model => PFmodel};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_socket_option/3}).
merge_msg_socket_option(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S2#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S2#{value => PFvalue};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{additional := PFadditional},
       #{additional := NFadditional}} ->
	  S3#{additional =>
		  merge_msg_any(PFadditional, NFadditional, TrUserData)};
      {_, #{additional := NFadditional}} ->
	  S3#{additional => NFadditional};
      {#{additional := PFadditional}, _} ->
	  S3#{additional => PFadditional};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_socket_option_timeout/3}).
merge_msg_socket_option_timeout(PMsg, NMsg,
				TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{duration := PFduration},
       #{duration := NFduration}} ->
	  S1#{duration =>
		  merge_msg_duration(PFduration, NFduration, TrUserData)};
      {_, #{duration := NFduration}} ->
	  S1#{duration => NFduration};
      {#{duration := PFduration}, _} ->
	  S1#{duration => PFduration};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_socket_option_linger/3}).
merge_msg_socket_option_linger(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{active := NFactive}} -> S1#{active => NFactive};
	   {#{active := PFactive}, _} -> S1#{active => PFactive};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{duration := PFduration},
       #{duration := NFduration}} ->
	  S2#{duration =>
		  merge_msg_duration(PFduration, NFduration, TrUserData)};
      {_, #{duration := NFduration}} ->
	  S2#{duration => NFduration};
      {#{duration := PFduration}, _} ->
	  S2#{duration => PFduration};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_socket_option_tcp_info/3}).
merge_msg_socket_option_tcp_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{tcpi_state := NFtcpi_state}} ->
	       S1#{tcpi_state => NFtcpi_state};
	   {#{tcpi_state := PFtcpi_state}, _} ->
	       S1#{tcpi_state => PFtcpi_state};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{tcpi_ca_state := NFtcpi_ca_state}} ->
	       S2#{tcpi_ca_state => NFtcpi_ca_state};
	   {#{tcpi_ca_state := PFtcpi_ca_state}, _} ->
	       S2#{tcpi_ca_state => PFtcpi_ca_state};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{tcpi_retransmits := NFtcpi_retransmits}} ->
	       S3#{tcpi_retransmits => NFtcpi_retransmits};
	   {#{tcpi_retransmits := PFtcpi_retransmits}, _} ->
	       S3#{tcpi_retransmits => PFtcpi_retransmits};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{tcpi_probes := NFtcpi_probes}} ->
	       S4#{tcpi_probes => NFtcpi_probes};
	   {#{tcpi_probes := PFtcpi_probes}, _} ->
	       S4#{tcpi_probes => PFtcpi_probes};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{tcpi_backoff := NFtcpi_backoff}} ->
	       S5#{tcpi_backoff => NFtcpi_backoff};
	   {#{tcpi_backoff := PFtcpi_backoff}, _} ->
	       S5#{tcpi_backoff => PFtcpi_backoff};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{tcpi_options := NFtcpi_options}} ->
	       S6#{tcpi_options => NFtcpi_options};
	   {#{tcpi_options := PFtcpi_options}, _} ->
	       S6#{tcpi_options => PFtcpi_options};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{tcpi_snd_wscale := NFtcpi_snd_wscale}} ->
	       S7#{tcpi_snd_wscale => NFtcpi_snd_wscale};
	   {#{tcpi_snd_wscale := PFtcpi_snd_wscale}, _} ->
	       S7#{tcpi_snd_wscale => PFtcpi_snd_wscale};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {_, #{tcpi_rcv_wscale := NFtcpi_rcv_wscale}} ->
	       S8#{tcpi_rcv_wscale => NFtcpi_rcv_wscale};
	   {#{tcpi_rcv_wscale := PFtcpi_rcv_wscale}, _} ->
	       S8#{tcpi_rcv_wscale => PFtcpi_rcv_wscale};
	   _ -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {_, #{tcpi_rto := NFtcpi_rto}} ->
		S9#{tcpi_rto => NFtcpi_rto};
	    {#{tcpi_rto := PFtcpi_rto}, _} ->
		S9#{tcpi_rto => PFtcpi_rto};
	    _ -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {_, #{tcpi_ato := NFtcpi_ato}} ->
		S10#{tcpi_ato => NFtcpi_ato};
	    {#{tcpi_ato := PFtcpi_ato}, _} ->
		S10#{tcpi_ato => PFtcpi_ato};
	    _ -> S10
	  end,
    S12 = case {PMsg, NMsg} of
	    {_, #{tcpi_snd_mss := NFtcpi_snd_mss}} ->
		S11#{tcpi_snd_mss => NFtcpi_snd_mss};
	    {#{tcpi_snd_mss := PFtcpi_snd_mss}, _} ->
		S11#{tcpi_snd_mss => PFtcpi_snd_mss};
	    _ -> S11
	  end,
    S13 = case {PMsg, NMsg} of
	    {_, #{tcpi_rcv_mss := NFtcpi_rcv_mss}} ->
		S12#{tcpi_rcv_mss => NFtcpi_rcv_mss};
	    {#{tcpi_rcv_mss := PFtcpi_rcv_mss}, _} ->
		S12#{tcpi_rcv_mss => PFtcpi_rcv_mss};
	    _ -> S12
	  end,
    S14 = case {PMsg, NMsg} of
	    {_, #{tcpi_unacked := NFtcpi_unacked}} ->
		S13#{tcpi_unacked => NFtcpi_unacked};
	    {#{tcpi_unacked := PFtcpi_unacked}, _} ->
		S13#{tcpi_unacked => PFtcpi_unacked};
	    _ -> S13
	  end,
    S15 = case {PMsg, NMsg} of
	    {_, #{tcpi_sacked := NFtcpi_sacked}} ->
		S14#{tcpi_sacked => NFtcpi_sacked};
	    {#{tcpi_sacked := PFtcpi_sacked}, _} ->
		S14#{tcpi_sacked => PFtcpi_sacked};
	    _ -> S14
	  end,
    S16 = case {PMsg, NMsg} of
	    {_, #{tcpi_lost := NFtcpi_lost}} ->
		S15#{tcpi_lost => NFtcpi_lost};
	    {#{tcpi_lost := PFtcpi_lost}, _} ->
		S15#{tcpi_lost => PFtcpi_lost};
	    _ -> S15
	  end,
    S17 = case {PMsg, NMsg} of
	    {_, #{tcpi_retrans := NFtcpi_retrans}} ->
		S16#{tcpi_retrans => NFtcpi_retrans};
	    {#{tcpi_retrans := PFtcpi_retrans}, _} ->
		S16#{tcpi_retrans => PFtcpi_retrans};
	    _ -> S16
	  end,
    S18 = case {PMsg, NMsg} of
	    {_, #{tcpi_fackets := NFtcpi_fackets}} ->
		S17#{tcpi_fackets => NFtcpi_fackets};
	    {#{tcpi_fackets := PFtcpi_fackets}, _} ->
		S17#{tcpi_fackets => PFtcpi_fackets};
	    _ -> S17
	  end,
    S19 = case {PMsg, NMsg} of
	    {_, #{tcpi_last_data_sent := NFtcpi_last_data_sent}} ->
		S18#{tcpi_last_data_sent => NFtcpi_last_data_sent};
	    {#{tcpi_last_data_sent := PFtcpi_last_data_sent}, _} ->
		S18#{tcpi_last_data_sent => PFtcpi_last_data_sent};
	    _ -> S18
	  end,
    S20 = case {PMsg, NMsg} of
	    {_, #{tcpi_last_ack_sent := NFtcpi_last_ack_sent}} ->
		S19#{tcpi_last_ack_sent => NFtcpi_last_ack_sent};
	    {#{tcpi_last_ack_sent := PFtcpi_last_ack_sent}, _} ->
		S19#{tcpi_last_ack_sent => PFtcpi_last_ack_sent};
	    _ -> S19
	  end,
    S21 = case {PMsg, NMsg} of
	    {_, #{tcpi_last_data_recv := NFtcpi_last_data_recv}} ->
		S20#{tcpi_last_data_recv => NFtcpi_last_data_recv};
	    {#{tcpi_last_data_recv := PFtcpi_last_data_recv}, _} ->
		S20#{tcpi_last_data_recv => PFtcpi_last_data_recv};
	    _ -> S20
	  end,
    S22 = case {PMsg, NMsg} of
	    {_, #{tcpi_last_ack_recv := NFtcpi_last_ack_recv}} ->
		S21#{tcpi_last_ack_recv => NFtcpi_last_ack_recv};
	    {#{tcpi_last_ack_recv := PFtcpi_last_ack_recv}, _} ->
		S21#{tcpi_last_ack_recv => PFtcpi_last_ack_recv};
	    _ -> S21
	  end,
    S23 = case {PMsg, NMsg} of
	    {_, #{tcpi_pmtu := NFtcpi_pmtu}} ->
		S22#{tcpi_pmtu => NFtcpi_pmtu};
	    {#{tcpi_pmtu := PFtcpi_pmtu}, _} ->
		S22#{tcpi_pmtu => PFtcpi_pmtu};
	    _ -> S22
	  end,
    S24 = case {PMsg, NMsg} of
	    {_, #{tcpi_rcv_ssthresh := NFtcpi_rcv_ssthresh}} ->
		S23#{tcpi_rcv_ssthresh => NFtcpi_rcv_ssthresh};
	    {#{tcpi_rcv_ssthresh := PFtcpi_rcv_ssthresh}, _} ->
		S23#{tcpi_rcv_ssthresh => PFtcpi_rcv_ssthresh};
	    _ -> S23
	  end,
    S25 = case {PMsg, NMsg} of
	    {_, #{tcpi_rtt := NFtcpi_rtt}} ->
		S24#{tcpi_rtt => NFtcpi_rtt};
	    {#{tcpi_rtt := PFtcpi_rtt}, _} ->
		S24#{tcpi_rtt => PFtcpi_rtt};
	    _ -> S24
	  end,
    S26 = case {PMsg, NMsg} of
	    {_, #{tcpi_rttvar := NFtcpi_rttvar}} ->
		S25#{tcpi_rttvar => NFtcpi_rttvar};
	    {#{tcpi_rttvar := PFtcpi_rttvar}, _} ->
		S25#{tcpi_rttvar => PFtcpi_rttvar};
	    _ -> S25
	  end,
    S27 = case {PMsg, NMsg} of
	    {_, #{tcpi_snd_ssthresh := NFtcpi_snd_ssthresh}} ->
		S26#{tcpi_snd_ssthresh => NFtcpi_snd_ssthresh};
	    {#{tcpi_snd_ssthresh := PFtcpi_snd_ssthresh}, _} ->
		S26#{tcpi_snd_ssthresh => PFtcpi_snd_ssthresh};
	    _ -> S26
	  end,
    S28 = case {PMsg, NMsg} of
	    {_, #{tcpi_snd_cwnd := NFtcpi_snd_cwnd}} ->
		S27#{tcpi_snd_cwnd => NFtcpi_snd_cwnd};
	    {#{tcpi_snd_cwnd := PFtcpi_snd_cwnd}, _} ->
		S27#{tcpi_snd_cwnd => PFtcpi_snd_cwnd};
	    _ -> S27
	  end,
    S29 = case {PMsg, NMsg} of
	    {_, #{tcpi_advmss := NFtcpi_advmss}} ->
		S28#{tcpi_advmss => NFtcpi_advmss};
	    {#{tcpi_advmss := PFtcpi_advmss}, _} ->
		S28#{tcpi_advmss => PFtcpi_advmss};
	    _ -> S28
	  end,
    case {PMsg, NMsg} of
      {_, #{tcpi_reordering := NFtcpi_reordering}} ->
	  S29#{tcpi_reordering => NFtcpi_reordering};
      {#{tcpi_reordering := PFtcpi_reordering}, _} ->
	  S29#{tcpi_reordering => PFtcpi_reordering};
      _ -> S29
    end.

-compile({nowarn_unused_function,merge_msg_get_top_channels_request/3}).
merge_msg_get_top_channels_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{start_channel_id := NFstart_channel_id}} ->
	       S1#{start_channel_id => NFstart_channel_id};
	   {#{start_channel_id := PFstart_channel_id}, _} ->
	       S1#{start_channel_id => PFstart_channel_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{max_results := NFmax_results}} ->
	  S2#{max_results => NFmax_results};
      {#{max_results := PFmax_results}, _} ->
	  S2#{max_results => PFmax_results};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_get_top_channels_response/3}).
merge_msg_get_top_channels_response(PMsg, NMsg,
				    TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{channel := PFchannel}, #{channel := NFchannel}} ->
	       S1#{channel =>
		       'erlang_++'(PFchannel, NFchannel, TrUserData)};
	   {_, #{channel := NFchannel}} ->
	       S1#{channel => NFchannel};
	   {#{channel := PFchannel}, _} ->
	       S1#{channel => PFchannel};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{'end' := NFend}} -> S2#{'end' => NFend};
      {#{'end' := PFend}, _} -> S2#{'end' => PFend};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_get_servers_request/3}).
merge_msg_get_servers_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{start_server_id := NFstart_server_id}} ->
	       S1#{start_server_id => NFstart_server_id};
	   {#{start_server_id := PFstart_server_id}, _} ->
	       S1#{start_server_id => PFstart_server_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{max_results := NFmax_results}} ->
	  S2#{max_results => NFmax_results};
      {#{max_results := PFmax_results}, _} ->
	  S2#{max_results => PFmax_results};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_get_servers_response/3}).
merge_msg_get_servers_response(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{server := PFserver}, #{server := NFserver}} ->
	       S1#{server =>
		       'erlang_++'(PFserver, NFserver, TrUserData)};
	   {_, #{server := NFserver}} -> S1#{server => NFserver};
	   {#{server := PFserver}, _} -> S1#{server => PFserver};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{'end' := NFend}} -> S2#{'end' => NFend};
      {#{'end' := PFend}, _} -> S2#{'end' => PFend};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_get_server_request/3}).
merge_msg_get_server_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{server_id := NFserver_id}} ->
	  S1#{server_id => NFserver_id};
      {#{server_id := PFserver_id}, _} ->
	  S1#{server_id => PFserver_id};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_server_response/3}).
merge_msg_get_server_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{server := PFserver}, #{server := NFserver}} ->
	  S1#{server =>
		  merge_msg_server(PFserver, NFserver, TrUserData)};
      {_, #{server := NFserver}} -> S1#{server => NFserver};
      {#{server := PFserver}, _} -> S1#{server => PFserver};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_server_sockets_request/3}).
merge_msg_get_server_sockets_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{server_id := NFserver_id}} ->
	       S1#{server_id => NFserver_id};
	   {#{server_id := PFserver_id}, _} ->
	       S1#{server_id => PFserver_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{start_socket_id := NFstart_socket_id}} ->
	       S2#{start_socket_id => NFstart_socket_id};
	   {#{start_socket_id := PFstart_socket_id}, _} ->
	       S2#{start_socket_id => PFstart_socket_id};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{max_results := NFmax_results}} ->
	  S3#{max_results => NFmax_results};
      {#{max_results := PFmax_results}, _} ->
	  S3#{max_results => PFmax_results};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_get_server_sockets_response/3}).
merge_msg_get_server_sockets_response(PMsg, NMsg,
				      TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{socket_ref := PFsocket_ref},
	    #{socket_ref := NFsocket_ref}} ->
	       S1#{socket_ref =>
		       'erlang_++'(PFsocket_ref, NFsocket_ref, TrUserData)};
	   {_, #{socket_ref := NFsocket_ref}} ->
	       S1#{socket_ref => NFsocket_ref};
	   {#{socket_ref := PFsocket_ref}, _} ->
	       S1#{socket_ref => PFsocket_ref};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{'end' := NFend}} -> S2#{'end' => NFend};
      {#{'end' := PFend}, _} -> S2#{'end' => PFend};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_get_channel_request/3}).
merge_msg_get_channel_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{channel_id := NFchannel_id}} ->
	  S1#{channel_id => NFchannel_id};
      {#{channel_id := PFchannel_id}, _} ->
	  S1#{channel_id => PFchannel_id};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_channel_response/3}).
merge_msg_get_channel_response(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{channel := PFchannel}, #{channel := NFchannel}} ->
	  S1#{channel =>
		  merge_msg_channel(PFchannel, NFchannel, TrUserData)};
      {_, #{channel := NFchannel}} ->
	  S1#{channel => NFchannel};
      {#{channel := PFchannel}, _} ->
	  S1#{channel => PFchannel};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_subchannel_request/3}).
merge_msg_get_subchannel_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{subchannel_id := NFsubchannel_id}} ->
	  S1#{subchannel_id => NFsubchannel_id};
      {#{subchannel_id := PFsubchannel_id}, _} ->
	  S1#{subchannel_id => PFsubchannel_id};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_subchannel_response/3}).
merge_msg_get_subchannel_response(PMsg, NMsg,
				  TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{subchannel := PFsubchannel},
       #{subchannel := NFsubchannel}} ->
	  S1#{subchannel =>
		  merge_msg_subchannel(PFsubchannel, NFsubchannel,
				       TrUserData)};
      {_, #{subchannel := NFsubchannel}} ->
	  S1#{subchannel => NFsubchannel};
      {#{subchannel := PFsubchannel}, _} ->
	  S1#{subchannel => PFsubchannel};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_socket_request/3}).
merge_msg_get_socket_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{socket_id := NFsocket_id}} ->
	       S1#{socket_id => NFsocket_id};
	   {#{socket_id := PFsocket_id}, _} ->
	       S1#{socket_id => PFsocket_id};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{summary := NFsummary}} ->
	  S2#{summary => NFsummary};
      {#{summary := PFsummary}, _} ->
	  S2#{summary => PFsummary};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_get_socket_response/3}).
merge_msg_get_socket_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{socket := PFsocket}, #{socket := NFsocket}} ->
	  S1#{socket =>
		  merge_msg_socket(PFsocket, NFsocket, TrUserData)};
      {_, #{socket := NFsocket}} -> S1#{socket => NFsocket};
      {#{socket := PFsocket}, _} -> S1#{socket => PFsocket};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_any/3}).
merge_msg_any(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type_url := NFtype_url}} ->
	       S1#{type_url => NFtype_url};
	   {#{type_url := PFtype_url}, _} ->
	       S1#{type_url => PFtype_url};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_duration/3}).
merge_msg_duration(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_timestamp/3}).
merge_msg_timestamp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_double_value/3}).
merge_msg_double_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_float_value/3}).
merge_msg_float_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_int_64_value/3}).
merge_msg_int_64_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_u_int_64_value/3}).
merge_msg_u_int_64_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_int_32_value/3}).
merge_msg_int_32_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_u_int_32_value/3}).
merge_msg_u_int_32_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_bool_value/3}).
merge_msg_bool_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_string_value/3}).
merge_msg_string_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_bytes_value/3}).
merge_msg_bytes_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      channel -> v_msg_channel(Msg, [MsgName], TrUserData);
      subchannel ->
	  v_msg_subchannel(Msg, [MsgName], TrUserData);
      channel_connectivity_state ->
	  v_msg_channel_connectivity_state(Msg, [MsgName],
					   TrUserData);
      channel_data ->
	  v_msg_channel_data(Msg, [MsgName], TrUserData);
      channel_trace_event ->
	  v_msg_channel_trace_event(Msg, [MsgName], TrUserData);
      channel_trace ->
	  v_msg_channel_trace(Msg, [MsgName], TrUserData);
      channel_ref ->
	  v_msg_channel_ref(Msg, [MsgName], TrUserData);
      subchannel_ref ->
	  v_msg_subchannel_ref(Msg, [MsgName], TrUserData);
      socket_ref ->
	  v_msg_socket_ref(Msg, [MsgName], TrUserData);
      server_ref ->
	  v_msg_server_ref(Msg, [MsgName], TrUserData);
      server -> v_msg_server(Msg, [MsgName], TrUserData);
      server_data ->
	  v_msg_server_data(Msg, [MsgName], TrUserData);
      socket -> v_msg_socket(Msg, [MsgName], TrUserData);
      socket_data ->
	  v_msg_socket_data(Msg, [MsgName], TrUserData);
      tcp_ip_address ->
	  v_msg_tcp_ip_address(Msg, [MsgName], TrUserData);
      uds_address ->
	  v_msg_uds_address(Msg, [MsgName], TrUserData);
      other_address ->
	  v_msg_other_address(Msg, [MsgName], TrUserData);
      address -> v_msg_address(Msg, [MsgName], TrUserData);
      tls -> v_msg_tls(Msg, [MsgName], TrUserData);
      other_security ->
	  v_msg_other_security(Msg, [MsgName], TrUserData);
      security -> v_msg_security(Msg, [MsgName], TrUserData);
      socket_option ->
	  v_msg_socket_option(Msg, [MsgName], TrUserData);
      socket_option_timeout ->
	  v_msg_socket_option_timeout(Msg, [MsgName], TrUserData);
      socket_option_linger ->
	  v_msg_socket_option_linger(Msg, [MsgName], TrUserData);
      socket_option_tcp_info ->
	  v_msg_socket_option_tcp_info(Msg, [MsgName],
				       TrUserData);
      get_top_channels_request ->
	  v_msg_get_top_channels_request(Msg, [MsgName],
					 TrUserData);
      get_top_channels_response ->
	  v_msg_get_top_channels_response(Msg, [MsgName],
					  TrUserData);
      get_servers_request ->
	  v_msg_get_servers_request(Msg, [MsgName], TrUserData);
      get_servers_response ->
	  v_msg_get_servers_response(Msg, [MsgName], TrUserData);
      get_server_request ->
	  v_msg_get_server_request(Msg, [MsgName], TrUserData);
      get_server_response ->
	  v_msg_get_server_response(Msg, [MsgName], TrUserData);
      get_server_sockets_request ->
	  v_msg_get_server_sockets_request(Msg, [MsgName],
					   TrUserData);
      get_server_sockets_response ->
	  v_msg_get_server_sockets_response(Msg, [MsgName],
					    TrUserData);
      get_channel_request ->
	  v_msg_get_channel_request(Msg, [MsgName], TrUserData);
      get_channel_response ->
	  v_msg_get_channel_response(Msg, [MsgName], TrUserData);
      get_subchannel_request ->
	  v_msg_get_subchannel_request(Msg, [MsgName],
				       TrUserData);
      get_subchannel_response ->
	  v_msg_get_subchannel_response(Msg, [MsgName],
					TrUserData);
      get_socket_request ->
	  v_msg_get_socket_request(Msg, [MsgName], TrUserData);
      get_socket_response ->
	  v_msg_get_socket_response(Msg, [MsgName], TrUserData);
      any -> v_msg_any(Msg, [MsgName], TrUserData);
      duration -> v_msg_duration(Msg, [MsgName], TrUserData);
      timestamp ->
	  v_msg_timestamp(Msg, [MsgName], TrUserData);
      double_value ->
	  v_msg_double_value(Msg, [MsgName], TrUserData);
      float_value ->
	  v_msg_float_value(Msg, [MsgName], TrUserData);
      int_64_value ->
	  v_msg_int_64_value(Msg, [MsgName], TrUserData);
      u_int_64_value ->
	  v_msg_u_int_64_value(Msg, [MsgName], TrUserData);
      int_32_value ->
	  v_msg_int_32_value(Msg, [MsgName], TrUserData);
      u_int_32_value ->
	  v_msg_u_int_32_value(Msg, [MsgName], TrUserData);
      bool_value ->
	  v_msg_bool_value(Msg, [MsgName], TrUserData);
      string_value ->
	  v_msg_string_value(Msg, [MsgName], TrUserData);
      bytes_value ->
	  v_msg_bytes_value(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_channel/3}).
-dialyzer({nowarn_function,v_msg_channel/3}).
v_msg_channel(#{} = M, Path, TrUserData) ->
    case M of
      #{ref := F1} ->
	  v_msg_channel_ref(F1, [ref | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{data := F2} ->
	  v_msg_channel_data(F2, [data | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{channel_ref := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_channel_ref(Elem, [channel_ref | Path],
					TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, channel_ref}}, F3,
			       [channel_ref | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{subchannel_ref := F4} ->
	  if is_list(F4) ->
		 _ = [v_msg_subchannel_ref(Elem, [subchannel_ref | Path],
					   TrUserData)
		      || Elem <- F4],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, subchannel_ref}},
			       F4, [subchannel_ref | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{socket_ref := F5} ->
	  if is_list(F5) ->
		 _ = [v_msg_socket_ref(Elem, [socket_ref | Path],
				       TrUserData)
		      || Elem <- F5],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, socket_ref}}, F5,
			       [socket_ref | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (ref) -> ok;
		      (data) -> ok;
		      (channel_ref) -> ok;
		      (subchannel_ref) -> ok;
		      (socket_ref) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_channel(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   channel},
		  M, Path);
v_msg_channel(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, channel}, X, Path).

-compile({nowarn_unused_function,v_msg_subchannel/3}).
-dialyzer({nowarn_function,v_msg_subchannel/3}).
v_msg_subchannel(#{} = M, Path, TrUserData) ->
    case M of
      #{ref := F1} ->
	  v_msg_subchannel_ref(F1, [ref | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{data := F2} ->
	  v_msg_channel_data(F2, [data | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{channel_ref := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_channel_ref(Elem, [channel_ref | Path],
					TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, channel_ref}}, F3,
			       [channel_ref | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{subchannel_ref := F4} ->
	  if is_list(F4) ->
		 _ = [v_msg_subchannel_ref(Elem, [subchannel_ref | Path],
					   TrUserData)
		      || Elem <- F4],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, subchannel_ref}},
			       F4, [subchannel_ref | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{socket_ref := F5} ->
	  if is_list(F5) ->
		 _ = [v_msg_socket_ref(Elem, [socket_ref | Path],
				       TrUserData)
		      || Elem <- F5],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, socket_ref}}, F5,
			       [socket_ref | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (ref) -> ok;
		      (data) -> ok;
		      (channel_ref) -> ok;
		      (subchannel_ref) -> ok;
		      (socket_ref) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_subchannel(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   subchannel},
		  M, Path);
v_msg_subchannel(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, subchannel}, X, Path).

-compile({nowarn_unused_function,v_msg_channel_connectivity_state/3}).
-dialyzer({nowarn_function,v_msg_channel_connectivity_state/3}).
v_msg_channel_connectivity_state(#{} = M, Path,
				 TrUserData) ->
    case M of
      #{state := F1} ->
	  'v_enum_channel_connectivity_state.State'(F1,
						    [state | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (state) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_channel_connectivity_state(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   channel_connectivity_state},
		  M, Path);
v_msg_channel_connectivity_state(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   channel_connectivity_state},
		  X, Path).

-compile({nowarn_unused_function,v_msg_channel_data/3}).
-dialyzer({nowarn_function,v_msg_channel_data/3}).
v_msg_channel_data(#{} = M, Path, TrUserData) ->
    case M of
      #{state := F1} ->
	  v_msg_channel_connectivity_state(F1, [state | Path],
					   TrUserData);
      _ -> ok
    end,
    case M of
      #{target := F2} ->
	  v_type_string(F2, [target | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{trace := F3} ->
	  v_msg_channel_trace(F3, [trace | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_started := F4} ->
	  v_type_int64(F4, [calls_started | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_succeeded := F5} ->
	  v_type_int64(F5, [calls_succeeded | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_failed := F6} ->
	  v_type_int64(F6, [calls_failed | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{last_call_started_timestamp := F7} ->
	  v_msg_timestamp(F7,
			  [last_call_started_timestamp | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (state) -> ok;
		      (target) -> ok;
		      (trace) -> ok;
		      (calls_started) -> ok;
		      (calls_succeeded) -> ok;
		      (calls_failed) -> ok;
		      (last_call_started_timestamp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_channel_data(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   channel_data},
		  M, Path);
v_msg_channel_data(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, channel_data}, X, Path).

-compile({nowarn_unused_function,v_msg_channel_trace_event/3}).
-dialyzer({nowarn_function,v_msg_channel_trace_event/3}).
v_msg_channel_trace_event(#{} = M, Path, TrUserData) ->
    case M of
      #{description := F1} ->
	  v_type_string(F1, [description | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{severity := F2} ->
	  'v_enum_channel_trace_event.Severity'(F2,
						[severity | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{timestamp := F3} ->
	  v_msg_timestamp(F3, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{child_ref := {channel_ref, OF4}} ->
	  v_msg_channel_ref(OF4, [channel_ref, child_ref | Path],
			    TrUserData);
      #{child_ref := {subchannel_ref, OF4}} ->
	  v_msg_subchannel_ref(OF4,
			       [subchannel_ref, child_ref | Path], TrUserData);
      #{child_ref := F4} ->
	  mk_type_error(invalid_oneof, F4, [child_ref | Path]);
      _ -> ok
    end,
    lists:foreach(fun (description) -> ok;
		      (severity) -> ok;
		      (timestamp) -> ok;
		      (child_ref) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_channel_trace_event(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   channel_trace_event},
		  M, Path);
v_msg_channel_trace_event(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, channel_trace_event}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_channel_trace/3}).
-dialyzer({nowarn_function,v_msg_channel_trace/3}).
v_msg_channel_trace(#{} = M, Path, TrUserData) ->
    case M of
      #{num_events_logged := F1} ->
	  v_type_int64(F1, [num_events_logged | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{creation_timestamp := F2} ->
	  v_msg_timestamp(F2, [creation_timestamp | Path],
			  TrUserData);
      _ -> ok
    end,
    case M of
      #{events := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_channel_trace_event(Elem, [events | Path],
						TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, channel_trace_event}},
			       F3, [events | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (num_events_logged) -> ok;
		      (creation_timestamp) -> ok;
		      (events) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_channel_trace(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   channel_trace},
		  M, Path);
v_msg_channel_trace(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, channel_trace}, X, Path).

-compile({nowarn_unused_function,v_msg_channel_ref/3}).
-dialyzer({nowarn_function,v_msg_channel_ref/3}).
v_msg_channel_ref(#{} = M, Path, TrUserData) ->
    case M of
      #{channel_id := F1} ->
	  v_type_int64(F1, [channel_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{name := F2} ->
	  v_type_string(F2, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (channel_id) -> ok;
		      (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_channel_ref(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   channel_ref},
		  M, Path);
v_msg_channel_ref(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, channel_ref}, X, Path).

-compile({nowarn_unused_function,v_msg_subchannel_ref/3}).
-dialyzer({nowarn_function,v_msg_subchannel_ref/3}).
v_msg_subchannel_ref(#{} = M, Path, TrUserData) ->
    case M of
      #{subchannel_id := F1} ->
	  v_type_int64(F1, [subchannel_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{name := F2} ->
	  v_type_string(F2, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (subchannel_id) -> ok;
		      (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_subchannel_ref(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   subchannel_ref},
		  M, Path);
v_msg_subchannel_ref(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, subchannel_ref}, X, Path).

-compile({nowarn_unused_function,v_msg_socket_ref/3}).
-dialyzer({nowarn_function,v_msg_socket_ref/3}).
v_msg_socket_ref(#{} = M, Path, TrUserData) ->
    case M of
      #{socket_id := F1} ->
	  v_type_int64(F1, [socket_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{name := F2} ->
	  v_type_string(F2, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (socket_id) -> ok;
		      (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_socket_ref(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   socket_ref},
		  M, Path);
v_msg_socket_ref(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, socket_ref}, X, Path).

-compile({nowarn_unused_function,v_msg_server_ref/3}).
-dialyzer({nowarn_function,v_msg_server_ref/3}).
v_msg_server_ref(#{} = M, Path, TrUserData) ->
    case M of
      #{server_id := F1} ->
	  v_type_int64(F1, [server_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{name := F2} ->
	  v_type_string(F2, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (server_id) -> ok;
		      (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_server_ref(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   server_ref},
		  M, Path);
v_msg_server_ref(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_ref}, X, Path).

-compile({nowarn_unused_function,v_msg_server/3}).
-dialyzer({nowarn_function,v_msg_server/3}).
v_msg_server(#{} = M, Path, TrUserData) ->
    case M of
      #{ref := F1} ->
	  v_msg_server_ref(F1, [ref | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{data := F2} ->
	  v_msg_server_data(F2, [data | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{listen_socket := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_socket_ref(Elem, [listen_socket | Path],
				       TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, socket_ref}}, F3,
			       [listen_socket | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (ref) -> ok;
		      (data) -> ok;
		      (listen_socket) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_server(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   server},
		  M, Path);
v_msg_server(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server}, X, Path).

-compile({nowarn_unused_function,v_msg_server_data/3}).
-dialyzer({nowarn_function,v_msg_server_data/3}).
v_msg_server_data(#{} = M, Path, TrUserData) ->
    case M of
      #{trace := F1} ->
	  v_msg_channel_trace(F1, [trace | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_started := F2} ->
	  v_type_int64(F2, [calls_started | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_succeeded := F3} ->
	  v_type_int64(F3, [calls_succeeded | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_failed := F4} ->
	  v_type_int64(F4, [calls_failed | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{last_call_started_timestamp := F5} ->
	  v_msg_timestamp(F5,
			  [last_call_started_timestamp | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (trace) -> ok;
		      (calls_started) -> ok;
		      (calls_succeeded) -> ok;
		      (calls_failed) -> ok;
		      (last_call_started_timestamp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_server_data(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   server_data},
		  M, Path);
v_msg_server_data(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_data}, X, Path).

-compile({nowarn_unused_function,v_msg_socket/3}).
-dialyzer({nowarn_function,v_msg_socket/3}).
v_msg_socket(#{} = M, Path, TrUserData) ->
    case M of
      #{ref := F1} ->
	  v_msg_socket_ref(F1, [ref | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{data := F2} ->
	  v_msg_socket_data(F2, [data | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{local := F3} ->
	  v_msg_address(F3, [local | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{remote := F4} ->
	  v_msg_address(F4, [remote | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{security := F5} ->
	  v_msg_security(F5, [security | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{remote_name := F6} ->
	  v_type_string(F6, [remote_name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (ref) -> ok;
		      (data) -> ok;
		      (local) -> ok;
		      (remote) -> ok;
		      (security) -> ok;
		      (remote_name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_socket(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   socket},
		  M, Path);
v_msg_socket(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, socket}, X, Path).

-compile({nowarn_unused_function,v_msg_socket_data/3}).
-dialyzer({nowarn_function,v_msg_socket_data/3}).
v_msg_socket_data(#{} = M, Path, TrUserData) ->
    case M of
      #{streams_started := F1} ->
	  v_type_int64(F1, [streams_started | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{streams_succeeded := F2} ->
	  v_type_int64(F2, [streams_succeeded | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{streams_failed := F3} ->
	  v_type_int64(F3, [streams_failed | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{messages_sent := F4} ->
	  v_type_int64(F4, [messages_sent | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{messages_received := F5} ->
	  v_type_int64(F5, [messages_received | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{keep_alives_sent := F6} ->
	  v_type_int64(F6, [keep_alives_sent | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{last_local_stream_created_timestamp := F7} ->
	  v_msg_timestamp(F7,
			  [last_local_stream_created_timestamp | Path],
			  TrUserData);
      _ -> ok
    end,
    case M of
      #{last_remote_stream_created_timestamp := F8} ->
	  v_msg_timestamp(F8,
			  [last_remote_stream_created_timestamp | Path],
			  TrUserData);
      _ -> ok
    end,
    case M of
      #{last_message_sent_timestamp := F9} ->
	  v_msg_timestamp(F9,
			  [last_message_sent_timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{last_message_received_timestamp := F10} ->
	  v_msg_timestamp(F10,
			  [last_message_received_timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{local_flow_control_window := F11} ->
	  v_msg_int_64_value(F11,
			     [local_flow_control_window | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{remote_flow_control_window := F12} ->
	  v_msg_int_64_value(F12,
			     [remote_flow_control_window | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{option := F13} ->
	  if is_list(F13) ->
		 _ = [v_msg_socket_option(Elem, [option | Path],
					  TrUserData)
		      || Elem <- F13],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, socket_option}},
			       F13, [option | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (streams_started) -> ok;
		      (streams_succeeded) -> ok;
		      (streams_failed) -> ok;
		      (messages_sent) -> ok;
		      (messages_received) -> ok;
		      (keep_alives_sent) -> ok;
		      (last_local_stream_created_timestamp) -> ok;
		      (last_remote_stream_created_timestamp) -> ok;
		      (last_message_sent_timestamp) -> ok;
		      (last_message_received_timestamp) -> ok;
		      (local_flow_control_window) -> ok;
		      (remote_flow_control_window) -> ok;
		      (option) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_socket_data(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   socket_data},
		  M, Path);
v_msg_socket_data(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, socket_data}, X, Path).

-compile({nowarn_unused_function,v_msg_tcp_ip_address/3}).
-dialyzer({nowarn_function,v_msg_tcp_ip_address/3}).
v_msg_tcp_ip_address(#{} = M, Path, TrUserData) ->
    case M of
      #{ip_address := F1} ->
	  v_type_bytes(F1, [ip_address | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{port := F2} ->
	  v_type_int32(F2, [port | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (ip_address) -> ok;
		      (port) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_tcp_ip_address(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   tcp_ip_address},
		  M, Path);
v_msg_tcp_ip_address(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, tcp_ip_address}, X, Path).

-compile({nowarn_unused_function,v_msg_uds_address/3}).
-dialyzer({nowarn_function,v_msg_uds_address/3}).
v_msg_uds_address(#{} = M, Path, TrUserData) ->
    case M of
      #{filename := F1} ->
	  v_type_string(F1, [filename | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (filename) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_uds_address(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   uds_address},
		  M, Path);
v_msg_uds_address(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, uds_address}, X, Path).

-compile({nowarn_unused_function,v_msg_other_address/3}).
-dialyzer({nowarn_function,v_msg_other_address/3}).
v_msg_other_address(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_msg_any(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_other_address(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   other_address},
		  M, Path);
v_msg_other_address(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, other_address}, X, Path).

-compile({nowarn_unused_function,v_msg_address/3}).
-dialyzer({nowarn_function,v_msg_address/3}).
v_msg_address(#{} = M, Path, TrUserData) ->
    case M of
      #{address := {tcpip_address, OF1}} ->
	  v_msg_tcp_ip_address(OF1,
			       [tcpip_address, address | Path], TrUserData);
      #{address := {uds_address, OF1}} ->
	  v_msg_uds_address(OF1, [uds_address, address | Path],
			    TrUserData);
      #{address := {other_address, OF1}} ->
	  v_msg_other_address(OF1,
			      [other_address, address | Path], TrUserData);
      #{address := F1} ->
	  mk_type_error(invalid_oneof, F1, [address | Path]);
      _ -> ok
    end,
    lists:foreach(fun (address) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_address(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   address},
		  M, Path);
v_msg_address(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, address}, X, Path).

-compile({nowarn_unused_function,v_msg_tls/3}).
-dialyzer({nowarn_function,v_msg_tls/3}).
v_msg_tls(#{} = M, Path, TrUserData) ->
    case M of
      #{cipher_suite := {standard_name, OF1}} ->
	  v_type_string(OF1, [standard_name, cipher_suite | Path],
			TrUserData);
      #{cipher_suite := {other_name, OF1}} ->
	  v_type_string(OF1, [other_name, cipher_suite | Path],
			TrUserData);
      #{cipher_suite := F1} ->
	  mk_type_error(invalid_oneof, F1, [cipher_suite | Path]);
      _ -> ok
    end,
    case M of
      #{local_certificate := F2} ->
	  v_type_bytes(F2, [local_certificate | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{remote_certificate := F3} ->
	  v_type_bytes(F3, [remote_certificate | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (cipher_suite) -> ok;
		      (local_certificate) -> ok;
		      (remote_certificate) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_tls(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), tls},
		  M, Path);
v_msg_tls(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, tls}, X, Path).

-compile({nowarn_unused_function,v_msg_other_security/3}).
-dialyzer({nowarn_function,v_msg_other_security/3}).
v_msg_other_security(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_msg_any(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_other_security(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   other_security},
		  M, Path);
v_msg_other_security(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, other_security}, X, Path).

-compile({nowarn_unused_function,v_msg_security/3}).
-dialyzer({nowarn_function,v_msg_security/3}).
v_msg_security(#{} = M, Path, TrUserData) ->
    case M of
      #{model := {tls, OF1}} ->
	  v_msg_tls(OF1, [tls, model | Path], TrUserData);
      #{model := {other, OF1}} ->
	  v_msg_other_security(OF1, [other, model | Path],
			       TrUserData);
      #{model := F1} ->
	  mk_type_error(invalid_oneof, F1, [model | Path]);
      _ -> ok
    end,
    lists:foreach(fun (model) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_security(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   security},
		  M, Path);
v_msg_security(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, security}, X, Path).

-compile({nowarn_unused_function,v_msg_socket_option/3}).
-dialyzer({nowarn_function,v_msg_socket_option/3}).
v_msg_socket_option(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_string(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{additional := F3} ->
	  v_msg_any(F3, [additional | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (value) -> ok;
		      (additional) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_socket_option(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   socket_option},
		  M, Path);
v_msg_socket_option(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, socket_option}, X, Path).

-compile({nowarn_unused_function,v_msg_socket_option_timeout/3}).
-dialyzer({nowarn_function,v_msg_socket_option_timeout/3}).
v_msg_socket_option_timeout(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{duration := F1} ->
	  v_msg_duration(F1, [duration | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (duration) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_socket_option_timeout(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   socket_option_timeout},
		  M, Path);
v_msg_socket_option_timeout(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, socket_option_timeout}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_socket_option_linger/3}).
-dialyzer({nowarn_function,v_msg_socket_option_linger/3}).
v_msg_socket_option_linger(#{} = M, Path, TrUserData) ->
    case M of
      #{active := F1} ->
	  v_type_bool(F1, [active | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{duration := F2} ->
	  v_msg_duration(F2, [duration | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (active) -> ok;
		      (duration) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_socket_option_linger(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   socket_option_linger},
		  M, Path);
v_msg_socket_option_linger(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, socket_option_linger}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_socket_option_tcp_info/3}).
-dialyzer({nowarn_function,v_msg_socket_option_tcp_info/3}).
v_msg_socket_option_tcp_info(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{tcpi_state := F1} ->
	  v_type_uint32(F1, [tcpi_state | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_ca_state := F2} ->
	  v_type_uint32(F2, [tcpi_ca_state | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_retransmits := F3} ->
	  v_type_uint32(F3, [tcpi_retransmits | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_probes := F4} ->
	  v_type_uint32(F4, [tcpi_probes | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_backoff := F5} ->
	  v_type_uint32(F5, [tcpi_backoff | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_options := F6} ->
	  v_type_uint32(F6, [tcpi_options | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_snd_wscale := F7} ->
	  v_type_uint32(F7, [tcpi_snd_wscale | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_rcv_wscale := F8} ->
	  v_type_uint32(F8, [tcpi_rcv_wscale | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_rto := F9} ->
	  v_type_uint32(F9, [tcpi_rto | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_ato := F10} ->
	  v_type_uint32(F10, [tcpi_ato | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_snd_mss := F11} ->
	  v_type_uint32(F11, [tcpi_snd_mss | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_rcv_mss := F12} ->
	  v_type_uint32(F12, [tcpi_rcv_mss | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_unacked := F13} ->
	  v_type_uint32(F13, [tcpi_unacked | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_sacked := F14} ->
	  v_type_uint32(F14, [tcpi_sacked | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_lost := F15} ->
	  v_type_uint32(F15, [tcpi_lost | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_retrans := F16} ->
	  v_type_uint32(F16, [tcpi_retrans | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_fackets := F17} ->
	  v_type_uint32(F17, [tcpi_fackets | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_last_data_sent := F18} ->
	  v_type_uint32(F18, [tcpi_last_data_sent | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_last_ack_sent := F19} ->
	  v_type_uint32(F19, [tcpi_last_ack_sent | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_last_data_recv := F20} ->
	  v_type_uint32(F20, [tcpi_last_data_recv | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_last_ack_recv := F21} ->
	  v_type_uint32(F21, [tcpi_last_ack_recv | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_pmtu := F22} ->
	  v_type_uint32(F22, [tcpi_pmtu | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_rcv_ssthresh := F23} ->
	  v_type_uint32(F23, [tcpi_rcv_ssthresh | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_rtt := F24} ->
	  v_type_uint32(F24, [tcpi_rtt | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_rttvar := F25} ->
	  v_type_uint32(F25, [tcpi_rttvar | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_snd_ssthresh := F26} ->
	  v_type_uint32(F26, [tcpi_snd_ssthresh | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_snd_cwnd := F27} ->
	  v_type_uint32(F27, [tcpi_snd_cwnd | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_advmss := F28} ->
	  v_type_uint32(F28, [tcpi_advmss | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tcpi_reordering := F29} ->
	  v_type_uint32(F29, [tcpi_reordering | Path],
			TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (tcpi_state) -> ok;
		      (tcpi_ca_state) -> ok;
		      (tcpi_retransmits) -> ok;
		      (tcpi_probes) -> ok;
		      (tcpi_backoff) -> ok;
		      (tcpi_options) -> ok;
		      (tcpi_snd_wscale) -> ok;
		      (tcpi_rcv_wscale) -> ok;
		      (tcpi_rto) -> ok;
		      (tcpi_ato) -> ok;
		      (tcpi_snd_mss) -> ok;
		      (tcpi_rcv_mss) -> ok;
		      (tcpi_unacked) -> ok;
		      (tcpi_sacked) -> ok;
		      (tcpi_lost) -> ok;
		      (tcpi_retrans) -> ok;
		      (tcpi_fackets) -> ok;
		      (tcpi_last_data_sent) -> ok;
		      (tcpi_last_ack_sent) -> ok;
		      (tcpi_last_data_recv) -> ok;
		      (tcpi_last_ack_recv) -> ok;
		      (tcpi_pmtu) -> ok;
		      (tcpi_rcv_ssthresh) -> ok;
		      (tcpi_rtt) -> ok;
		      (tcpi_rttvar) -> ok;
		      (tcpi_snd_ssthresh) -> ok;
		      (tcpi_snd_cwnd) -> ok;
		      (tcpi_advmss) -> ok;
		      (tcpi_reordering) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_socket_option_tcp_info(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   socket_option_tcp_info},
		  M, Path);
v_msg_socket_option_tcp_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, socket_option_tcp_info}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_top_channels_request/3}).
-dialyzer({nowarn_function,v_msg_get_top_channels_request/3}).
v_msg_get_top_channels_request(#{} = M, Path,
			       TrUserData) ->
    case M of
      #{start_channel_id := F1} ->
	  v_type_int64(F1, [start_channel_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{max_results := F2} ->
	  v_type_int64(F2, [max_results | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (start_channel_id) -> ok;
		      (max_results) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_top_channels_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_top_channels_request},
		  M, Path);
v_msg_get_top_channels_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_top_channels_request},
		  X, Path).

-compile({nowarn_unused_function,v_msg_get_top_channels_response/3}).
-dialyzer({nowarn_function,v_msg_get_top_channels_response/3}).
v_msg_get_top_channels_response(#{} = M, Path,
				TrUserData) ->
    case M of
      #{channel := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_channel(Elem, [channel | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, channel}}, F1,
			       [channel | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{'end' := F2} ->
	  v_type_bool(F2, ['end' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (channel) -> ok;
		      ('end') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_top_channels_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_top_channels_response},
		  M, Path);
v_msg_get_top_channels_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_top_channels_response},
		  X, Path).

-compile({nowarn_unused_function,v_msg_get_servers_request/3}).
-dialyzer({nowarn_function,v_msg_get_servers_request/3}).
v_msg_get_servers_request(#{} = M, Path, TrUserData) ->
    case M of
      #{start_server_id := F1} ->
	  v_type_int64(F1, [start_server_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{max_results := F2} ->
	  v_type_int64(F2, [max_results | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (start_server_id) -> ok;
		      (max_results) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_servers_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_servers_request},
		  M, Path);
v_msg_get_servers_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_servers_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_servers_response/3}).
-dialyzer({nowarn_function,v_msg_get_servers_response/3}).
v_msg_get_servers_response(#{} = M, Path, TrUserData) ->
    case M of
      #{server := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_server(Elem, [server | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, server}}, F1,
			       [server | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{'end' := F2} ->
	  v_type_bool(F2, ['end' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (server) -> ok;
		      ('end') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_servers_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_servers_response},
		  M, Path);
v_msg_get_servers_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_servers_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_server_request/3}).
-dialyzer({nowarn_function,v_msg_get_server_request/3}).
v_msg_get_server_request(#{} = M, Path, TrUserData) ->
    case M of
      #{server_id := F1} ->
	  v_type_int64(F1, [server_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (server_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_server_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_server_request},
		  M, Path);
v_msg_get_server_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_server_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_server_response/3}).
-dialyzer({nowarn_function,v_msg_get_server_response/3}).
v_msg_get_server_response(#{} = M, Path, TrUserData) ->
    case M of
      #{server := F1} ->
	  v_msg_server(F1, [server | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (server) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_server_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_server_response},
		  M, Path);
v_msg_get_server_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_server_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_server_sockets_request/3}).
-dialyzer({nowarn_function,v_msg_get_server_sockets_request/3}).
v_msg_get_server_sockets_request(#{} = M, Path,
				 TrUserData) ->
    case M of
      #{server_id := F1} ->
	  v_type_int64(F1, [server_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{start_socket_id := F2} ->
	  v_type_int64(F2, [start_socket_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{max_results := F3} ->
	  v_type_int64(F3, [max_results | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (server_id) -> ok;
		      (start_socket_id) -> ok;
		      (max_results) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_server_sockets_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_server_sockets_request},
		  M, Path);
v_msg_get_server_sockets_request(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   get_server_sockets_request},
		  X, Path).

-compile({nowarn_unused_function,v_msg_get_server_sockets_response/3}).
-dialyzer({nowarn_function,v_msg_get_server_sockets_response/3}).
v_msg_get_server_sockets_response(#{} = M, Path,
				  TrUserData) ->
    case M of
      #{socket_ref := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_socket_ref(Elem, [socket_ref | Path],
				       TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, socket_ref}}, F1,
			       [socket_ref | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{'end' := F2} ->
	  v_type_bool(F2, ['end' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (socket_ref) -> ok;
		      ('end') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_server_sockets_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_server_sockets_response},
		  M, Path);
v_msg_get_server_sockets_response(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   get_server_sockets_response},
		  X, Path).

-compile({nowarn_unused_function,v_msg_get_channel_request/3}).
-dialyzer({nowarn_function,v_msg_get_channel_request/3}).
v_msg_get_channel_request(#{} = M, Path, TrUserData) ->
    case M of
      #{channel_id := F1} ->
	  v_type_int64(F1, [channel_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (channel_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_channel_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_channel_request},
		  M, Path);
v_msg_get_channel_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_channel_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_channel_response/3}).
-dialyzer({nowarn_function,v_msg_get_channel_response/3}).
v_msg_get_channel_response(#{} = M, Path, TrUserData) ->
    case M of
      #{channel := F1} ->
	  v_msg_channel(F1, [channel | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (channel) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_channel_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_channel_response},
		  M, Path);
v_msg_get_channel_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_channel_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_subchannel_request/3}).
-dialyzer({nowarn_function,v_msg_get_subchannel_request/3}).
v_msg_get_subchannel_request(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{subchannel_id := F1} ->
	  v_type_int64(F1, [subchannel_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (subchannel_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_subchannel_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_subchannel_request},
		  M, Path);
v_msg_get_subchannel_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_subchannel_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_subchannel_response/3}).
-dialyzer({nowarn_function,v_msg_get_subchannel_response/3}).
v_msg_get_subchannel_response(#{} = M, Path,
			      TrUserData) ->
    case M of
      #{subchannel := F1} ->
	  v_msg_subchannel(F1, [subchannel | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (subchannel) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_subchannel_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_subchannel_response},
		  M, Path);
v_msg_get_subchannel_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_subchannel_response},
		  X, Path).

-compile({nowarn_unused_function,v_msg_get_socket_request/3}).
-dialyzer({nowarn_function,v_msg_get_socket_request/3}).
v_msg_get_socket_request(#{} = M, Path, TrUserData) ->
    case M of
      #{socket_id := F1} ->
	  v_type_int64(F1, [socket_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{summary := F2} ->
	  v_type_bool(F2, [summary | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (socket_id) -> ok;
		      (summary) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_socket_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_socket_request},
		  M, Path);
v_msg_get_socket_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_socket_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_socket_response/3}).
-dialyzer({nowarn_function,v_msg_get_socket_response/3}).
v_msg_get_socket_response(#{} = M, Path, TrUserData) ->
    case M of
      #{socket := F1} ->
	  v_msg_socket(F1, [socket | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (socket) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_socket_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_socket_response},
		  M, Path);
v_msg_get_socket_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_socket_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_any/3}).
-dialyzer({nowarn_function,v_msg_any/3}).
v_msg_any(#{} = M, Path, TrUserData) ->
    case M of
      #{type_url := F1} ->
	  v_type_string(F1, [type_url | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_bytes(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type_url) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_any(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), any},
		  M, Path);
v_msg_any(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, any}, X, Path).

-compile({nowarn_unused_function,v_msg_duration/3}).
-dialyzer({nowarn_function,v_msg_duration/3}).
v_msg_duration(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_duration(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   duration},
		  M, Path);
v_msg_duration(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, duration}, X, Path).

-compile({nowarn_unused_function,v_msg_timestamp/3}).
-dialyzer({nowarn_function,v_msg_timestamp/3}).
v_msg_timestamp(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_timestamp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   timestamp},
		  M, Path);
v_msg_timestamp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, timestamp}, X, Path).

-compile({nowarn_unused_function,v_msg_double_value/3}).
-dialyzer({nowarn_function,v_msg_double_value/3}).
v_msg_double_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_double(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_double_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   double_value},
		  M, Path);
v_msg_double_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, double_value}, X, Path).

-compile({nowarn_unused_function,v_msg_float_value/3}).
-dialyzer({nowarn_function,v_msg_float_value/3}).
v_msg_float_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_float(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_float_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   float_value},
		  M, Path);
v_msg_float_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, float_value}, X, Path).

-compile({nowarn_unused_function,v_msg_int_64_value/3}).
-dialyzer({nowarn_function,v_msg_int_64_value/3}).
v_msg_int_64_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_int64(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_int_64_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   int_64_value},
		  M, Path);
v_msg_int_64_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_64_value}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_64_value/3}).
-dialyzer({nowarn_function,v_msg_u_int_64_value/3}).
v_msg_u_int_64_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_uint64(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_u_int_64_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   u_int_64_value},
		  M, Path);
v_msg_u_int_64_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_64_value}, X, Path).

-compile({nowarn_unused_function,v_msg_int_32_value/3}).
-dialyzer({nowarn_function,v_msg_int_32_value/3}).
v_msg_int_32_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_int32(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_int_32_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   int_32_value},
		  M, Path);
v_msg_int_32_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_32_value}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_32_value/3}).
-dialyzer({nowarn_function,v_msg_u_int_32_value/3}).
v_msg_u_int_32_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_uint32(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_u_int_32_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   u_int_32_value},
		  M, Path);
v_msg_u_int_32_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_32_value}, X, Path).

-compile({nowarn_unused_function,v_msg_bool_value/3}).
-dialyzer({nowarn_function,v_msg_bool_value/3}).
v_msg_bool_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_bool(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bool_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bool_value},
		  M, Path);
v_msg_bool_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bool_value}, X, Path).

-compile({nowarn_unused_function,v_msg_string_value/3}).
-dialyzer({nowarn_function,v_msg_string_value/3}).
v_msg_string_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_string(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_string_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   string_value},
		  M, Path);
v_msg_string_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, string_value}, X, Path).

-compile({nowarn_unused_function,v_msg_bytes_value/3}).
-dialyzer({nowarn_function,v_msg_bytes_value/3}).
v_msg_bytes_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_bytes(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bytes_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bytes_value},
		  M, Path);
v_msg_bytes_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bytes_value}, X, Path).

-compile({nowarn_unused_function,'v_enum_channel_connectivity_state.State'/3}).
-dialyzer({nowarn_function,'v_enum_channel_connectivity_state.State'/3}).
'v_enum_channel_connectivity_state.State'('UNKNOWN',
					  _Path, _TrUserData) ->
    ok;
'v_enum_channel_connectivity_state.State'('IDLE', _Path,
					  _TrUserData) ->
    ok;
'v_enum_channel_connectivity_state.State'('CONNECTING',
					  _Path, _TrUserData) ->
    ok;
'v_enum_channel_connectivity_state.State'('READY',
					  _Path, _TrUserData) ->
    ok;
'v_enum_channel_connectivity_state.State'('TRANSIENT_FAILURE',
					  _Path, _TrUserData) ->
    ok;
'v_enum_channel_connectivity_state.State'('SHUTDOWN',
					  _Path, _TrUserData) ->
    ok;
'v_enum_channel_connectivity_state.State'(V, Path,
					  TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_channel_connectivity_state.State'(X, Path,
					  _TrUserData) ->
    mk_type_error({invalid_enum,
		   'channel_connectivity_state.State'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_channel_trace_event.Severity'/3}).
-dialyzer({nowarn_function,'v_enum_channel_trace_event.Severity'/3}).
'v_enum_channel_trace_event.Severity'('CT_UNKNOWN',
				      _Path, _TrUserData) ->
    ok;
'v_enum_channel_trace_event.Severity'('CT_INFO', _Path,
				      _TrUserData) ->
    ok;
'v_enum_channel_trace_event.Severity'('CT_WARNING',
				      _Path, _TrUserData) ->
    ok;
'v_enum_channel_trace_event.Severity'('CT_ERROR', _Path,
				      _TrUserData) ->
    ok;
'v_enum_channel_trace_event.Severity'(V, Path,
				      TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_channel_trace_event.Severity'(X, Path,
				      _TrUserData) ->
    mk_type_error({invalid_enum,
		   'channel_trace_event.Severity'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'channel_connectivity_state.State'},
      [{'UNKNOWN', 0}, {'IDLE', 1}, {'CONNECTING', 2},
       {'READY', 3}, {'TRANSIENT_FAILURE', 4},
       {'SHUTDOWN', 5}]},
     {{enum, 'channel_trace_event.Severity'},
      [{'CT_UNKNOWN', 0}, {'CT_INFO', 1}, {'CT_WARNING', 2},
       {'CT_ERROR', 3}]},
     {{msg, channel},
      [#{name => ref, fnum => 1, rnum => 2,
	 type => {msg, channel_ref}, occurrence => optional,
	 opts => []},
       #{name => data, fnum => 2, rnum => 3,
	 type => {msg, channel_data}, occurrence => optional,
	 opts => []},
       #{name => channel_ref, fnum => 3, rnum => 4,
	 type => {msg, channel_ref}, occurrence => repeated,
	 opts => []},
       #{name => subchannel_ref, fnum => 4, rnum => 5,
	 type => {msg, subchannel_ref}, occurrence => repeated,
	 opts => []},
       #{name => socket_ref, fnum => 5, rnum => 6,
	 type => {msg, socket_ref}, occurrence => repeated,
	 opts => []}]},
     {{msg, subchannel},
      [#{name => ref, fnum => 1, rnum => 2,
	 type => {msg, subchannel_ref}, occurrence => optional,
	 opts => []},
       #{name => data, fnum => 2, rnum => 3,
	 type => {msg, channel_data}, occurrence => optional,
	 opts => []},
       #{name => channel_ref, fnum => 3, rnum => 4,
	 type => {msg, channel_ref}, occurrence => repeated,
	 opts => []},
       #{name => subchannel_ref, fnum => 4, rnum => 5,
	 type => {msg, subchannel_ref}, occurrence => repeated,
	 opts => []},
       #{name => socket_ref, fnum => 5, rnum => 6,
	 type => {msg, socket_ref}, occurrence => repeated,
	 opts => []}]},
     {{msg, channel_connectivity_state},
      [#{name => state, fnum => 1, rnum => 2,
	 type => {enum, 'channel_connectivity_state.State'},
	 occurrence => optional, opts => []}]},
     {{msg, channel_data},
      [#{name => state, fnum => 1, rnum => 2,
	 type => {msg, channel_connectivity_state},
	 occurrence => optional, opts => []},
       #{name => target, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => trace, fnum => 3, rnum => 4,
	 type => {msg, channel_trace}, occurrence => optional,
	 opts => []},
       #{name => calls_started, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => calls_succeeded, fnum => 5, rnum => 6,
	 type => int64, occurrence => optional, opts => []},
       #{name => calls_failed, fnum => 6, rnum => 7,
	 type => int64, occurrence => optional, opts => []},
       #{name => last_call_started_timestamp, fnum => 7,
	 rnum => 8, type => {msg, timestamp},
	 occurrence => optional, opts => []}]},
     {{msg, channel_trace_event},
      [#{name => description, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => severity, fnum => 2, rnum => 3,
	 type => {enum, 'channel_trace_event.Severity'},
	 occurrence => optional, opts => []},
       #{name => timestamp, fnum => 3, rnum => 4,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => child_ref, rnum => 5,
	 fields =>
	     [#{name => channel_ref, fnum => 4, rnum => 5,
		type => {msg, channel_ref}, occurrence => optional,
		opts => []},
	      #{name => subchannel_ref, fnum => 5, rnum => 5,
		type => {msg, subchannel_ref}, occurrence => optional,
		opts => []}]}]},
     {{msg, channel_trace},
      [#{name => num_events_logged, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => creation_timestamp, fnum => 2, rnum => 3,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => events, fnum => 3, rnum => 4,
	 type => {msg, channel_trace_event},
	 occurrence => repeated, opts => []}]},
     {{msg, channel_ref},
      [#{name => channel_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, subchannel_ref},
      [#{name => subchannel_id, fnum => 7, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => name, fnum => 8, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, socket_ref},
      [#{name => socket_id, fnum => 3, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => name, fnum => 4, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, server_ref},
      [#{name => server_id, fnum => 5, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => name, fnum => 6, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, server},
      [#{name => ref, fnum => 1, rnum => 2,
	 type => {msg, server_ref}, occurrence => optional,
	 opts => []},
       #{name => data, fnum => 2, rnum => 3,
	 type => {msg, server_data}, occurrence => optional,
	 opts => []},
       #{name => listen_socket, fnum => 3, rnum => 4,
	 type => {msg, socket_ref}, occurrence => repeated,
	 opts => []}]},
     {{msg, server_data},
      [#{name => trace, fnum => 1, rnum => 2,
	 type => {msg, channel_trace}, occurrence => optional,
	 opts => []},
       #{name => calls_started, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []},
       #{name => calls_succeeded, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []},
       #{name => calls_failed, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => last_call_started_timestamp, fnum => 5,
	 rnum => 6, type => {msg, timestamp},
	 occurrence => optional, opts => []}]},
     {{msg, socket},
      [#{name => ref, fnum => 1, rnum => 2,
	 type => {msg, socket_ref}, occurrence => optional,
	 opts => []},
       #{name => data, fnum => 2, rnum => 3,
	 type => {msg, socket_data}, occurrence => optional,
	 opts => []},
       #{name => local, fnum => 3, rnum => 4,
	 type => {msg, address}, occurrence => optional,
	 opts => []},
       #{name => remote, fnum => 4, rnum => 5,
	 type => {msg, address}, occurrence => optional,
	 opts => []},
       #{name => security, fnum => 5, rnum => 6,
	 type => {msg, security}, occurrence => optional,
	 opts => []},
       #{name => remote_name, fnum => 6, rnum => 7,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, socket_data},
      [#{name => streams_started, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => streams_succeeded, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []},
       #{name => streams_failed, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []},
       #{name => messages_sent, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => messages_received, fnum => 5, rnum => 6,
	 type => int64, occurrence => optional, opts => []},
       #{name => keep_alives_sent, fnum => 6, rnum => 7,
	 type => int64, occurrence => optional, opts => []},
       #{name => last_local_stream_created_timestamp,
	 fnum => 7, rnum => 8, type => {msg, timestamp},
	 occurrence => optional, opts => []},
       #{name => last_remote_stream_created_timestamp,
	 fnum => 8, rnum => 9, type => {msg, timestamp},
	 occurrence => optional, opts => []},
       #{name => last_message_sent_timestamp, fnum => 9,
	 rnum => 10, type => {msg, timestamp},
	 occurrence => optional, opts => []},
       #{name => last_message_received_timestamp, fnum => 10,
	 rnum => 11, type => {msg, timestamp},
	 occurrence => optional, opts => []},
       #{name => local_flow_control_window, fnum => 11,
	 rnum => 12, type => {msg, int_64_value},
	 occurrence => optional, opts => []},
       #{name => remote_flow_control_window, fnum => 12,
	 rnum => 13, type => {msg, int_64_value},
	 occurrence => optional, opts => []},
       #{name => option, fnum => 13, rnum => 14,
	 type => {msg, socket_option}, occurrence => repeated,
	 opts => []}]},
     {{msg, tcp_ip_address},
      [#{name => ip_address, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, uds_address},
      [#{name => filename, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, other_address},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3,
	 type => {msg, any}, occurrence => optional,
	 opts => []}]},
     {{msg, address},
      [#{name => address, rnum => 2,
	 fields =>
	     [#{name => tcpip_address, fnum => 1, rnum => 2,
		type => {msg, tcp_ip_address}, occurrence => optional,
		opts => []},
	      #{name => uds_address, fnum => 2, rnum => 2,
		type => {msg, uds_address}, occurrence => optional,
		opts => []},
	      #{name => other_address, fnum => 3, rnum => 2,
		type => {msg, other_address}, occurrence => optional,
		opts => []}]}]},
     {{msg, tls},
      [#{name => cipher_suite, rnum => 2,
	 fields =>
	     [#{name => standard_name, fnum => 1, rnum => 2,
		type => string, occurrence => optional, opts => []},
	      #{name => other_name, fnum => 2, rnum => 2,
		type => string, occurrence => optional, opts => []}]},
       #{name => local_certificate, fnum => 3, rnum => 3,
	 type => bytes, occurrence => optional, opts => []},
       #{name => remote_certificate, fnum => 4, rnum => 4,
	 type => bytes, occurrence => optional, opts => []}]},
     {{msg, other_security},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3,
	 type => {msg, any}, occurrence => optional,
	 opts => []}]},
     {{msg, security},
      [#{name => model, rnum => 2,
	 fields =>
	     [#{name => tls, fnum => 1, rnum => 2,
		type => {msg, tls}, occurrence => optional, opts => []},
	      #{name => other, fnum => 2, rnum => 2,
		type => {msg, other_security}, occurrence => optional,
		opts => []}]}]},
     {{msg, socket_option},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => additional, fnum => 3, rnum => 4,
	 type => {msg, any}, occurrence => optional,
	 opts => []}]},
     {{msg, socket_option_timeout},
      [#{name => duration, fnum => 1, rnum => 2,
	 type => {msg, duration}, occurrence => optional,
	 opts => []}]},
     {{msg, socket_option_linger},
      [#{name => active, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => duration, fnum => 2, rnum => 3,
	 type => {msg, duration}, occurrence => optional,
	 opts => []}]},
     {{msg, socket_option_tcp_info},
      [#{name => tcpi_state, fnum => 1, rnum => 2,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_ca_state, fnum => 2, rnum => 3,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_retransmits, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_probes, fnum => 4, rnum => 5,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_backoff, fnum => 5, rnum => 6,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_options, fnum => 6, rnum => 7,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_snd_wscale, fnum => 7, rnum => 8,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_rcv_wscale, fnum => 8, rnum => 9,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_rto, fnum => 9, rnum => 10,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_ato, fnum => 10, rnum => 11,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_snd_mss, fnum => 11, rnum => 12,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_rcv_mss, fnum => 12, rnum => 13,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_unacked, fnum => 13, rnum => 14,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_sacked, fnum => 14, rnum => 15,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_lost, fnum => 15, rnum => 16,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_retrans, fnum => 16, rnum => 17,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_fackets, fnum => 17, rnum => 18,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_last_data_sent, fnum => 18, rnum => 19,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_last_ack_sent, fnum => 19, rnum => 20,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_last_data_recv, fnum => 20, rnum => 21,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_last_ack_recv, fnum => 21, rnum => 22,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_pmtu, fnum => 22, rnum => 23,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_rcv_ssthresh, fnum => 23, rnum => 24,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_rtt, fnum => 24, rnum => 25,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_rttvar, fnum => 25, rnum => 26,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_snd_ssthresh, fnum => 26, rnum => 27,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_snd_cwnd, fnum => 27, rnum => 28,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_advmss, fnum => 28, rnum => 29,
	 type => uint32, occurrence => optional, opts => []},
       #{name => tcpi_reordering, fnum => 29, rnum => 30,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, get_top_channels_request},
      [#{name => start_channel_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => max_results, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, get_top_channels_response},
      [#{name => channel, fnum => 1, rnum => 2,
	 type => {msg, channel}, occurrence => repeated,
	 opts => []},
       #{name => 'end', fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, get_servers_request},
      [#{name => start_server_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => max_results, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, get_servers_response},
      [#{name => server, fnum => 1, rnum => 2,
	 type => {msg, server}, occurrence => repeated,
	 opts => []},
       #{name => 'end', fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, get_server_request},
      [#{name => server_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, get_server_response},
      [#{name => server, fnum => 1, rnum => 2,
	 type => {msg, server}, occurrence => optional,
	 opts => []}]},
     {{msg, get_server_sockets_request},
      [#{name => server_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => start_socket_id, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []},
       #{name => max_results, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, get_server_sockets_response},
      [#{name => socket_ref, fnum => 1, rnum => 2,
	 type => {msg, socket_ref}, occurrence => repeated,
	 opts => []},
       #{name => 'end', fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, get_channel_request},
      [#{name => channel_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, get_channel_response},
      [#{name => channel, fnum => 1, rnum => 2,
	 type => {msg, channel}, occurrence => optional,
	 opts => []}]},
     {{msg, get_subchannel_request},
      [#{name => subchannel_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, get_subchannel_response},
      [#{name => subchannel, fnum => 1, rnum => 2,
	 type => {msg, subchannel}, occurrence => optional,
	 opts => []}]},
     {{msg, get_socket_request},
      [#{name => socket_id, fnum => 1, rnum => 2,
	 type => int64, occurrence => optional, opts => []},
       #{name => summary, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, get_socket_response},
      [#{name => socket, fnum => 1, rnum => 2,
	 type => {msg, socket}, occurrence => optional,
	 opts => []}]},
     {{msg, any},
      [#{name => type_url, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, duration},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, timestamp},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, double_value},
      [#{name => value, fnum => 1, rnum => 2, type => double,
	 occurrence => optional, opts => []}]},
     {{msg, float_value},
      [#{name => value, fnum => 1, rnum => 2, type => float,
	 occurrence => optional, opts => []}]},
     {{msg, int_64_value},
      [#{name => value, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, u_int_64_value},
      [#{name => value, fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []}]},
     {{msg, int_32_value},
      [#{name => value, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, u_int_32_value},
      [#{name => value, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, bool_value},
      [#{name => value, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, string_value},
      [#{name => value, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, bytes_value},
      [#{name => value, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [channel, subchannel, channel_connectivity_state,
     channel_data, channel_trace_event, channel_trace,
     channel_ref, subchannel_ref, socket_ref, server_ref,
     server, server_data, socket, socket_data,
     tcp_ip_address, uds_address, other_address, address,
     tls, other_security, security, socket_option,
     socket_option_timeout, socket_option_linger,
     socket_option_tcp_info, get_top_channels_request,
     get_top_channels_response, get_servers_request,
     get_servers_response, get_server_request,
     get_server_response, get_server_sockets_request,
     get_server_sockets_response, get_channel_request,
     get_channel_response, get_subchannel_request,
     get_subchannel_response, get_socket_request,
     get_socket_response, any, duration, timestamp,
     double_value, float_value, int_64_value, u_int_64_value,
     int_32_value, u_int_32_value, bool_value, string_value,
     bytes_value].


get_group_names() -> [].


get_msg_or_group_names() ->
    [channel, subchannel, channel_connectivity_state,
     channel_data, channel_trace_event, channel_trace,
     channel_ref, subchannel_ref, socket_ref, server_ref,
     server, server_data, socket, socket_data,
     tcp_ip_address, uds_address, other_address, address,
     tls, other_security, security, socket_option,
     socket_option_timeout, socket_option_linger,
     socket_option_tcp_info, get_top_channels_request,
     get_top_channels_response, get_servers_request,
     get_servers_response, get_server_request,
     get_server_response, get_server_sockets_request,
     get_server_sockets_response, get_channel_request,
     get_channel_response, get_subchannel_request,
     get_subchannel_response, get_socket_request,
     get_socket_response, any, duration, timestamp,
     double_value, float_value, int_64_value, u_int_64_value,
     int_32_value, u_int_32_value, bool_value, string_value,
     bytes_value].


get_enum_names() ->
    ['channel_connectivity_state.State',
     'channel_trace_event.Severity'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(channel) ->
    [#{name => ref, fnum => 1, rnum => 2,
       type => {msg, channel_ref}, occurrence => optional,
       opts => []},
     #{name => data, fnum => 2, rnum => 3,
       type => {msg, channel_data}, occurrence => optional,
       opts => []},
     #{name => channel_ref, fnum => 3, rnum => 4,
       type => {msg, channel_ref}, occurrence => repeated,
       opts => []},
     #{name => subchannel_ref, fnum => 4, rnum => 5,
       type => {msg, subchannel_ref}, occurrence => repeated,
       opts => []},
     #{name => socket_ref, fnum => 5, rnum => 6,
       type => {msg, socket_ref}, occurrence => repeated,
       opts => []}];
find_msg_def(subchannel) ->
    [#{name => ref, fnum => 1, rnum => 2,
       type => {msg, subchannel_ref}, occurrence => optional,
       opts => []},
     #{name => data, fnum => 2, rnum => 3,
       type => {msg, channel_data}, occurrence => optional,
       opts => []},
     #{name => channel_ref, fnum => 3, rnum => 4,
       type => {msg, channel_ref}, occurrence => repeated,
       opts => []},
     #{name => subchannel_ref, fnum => 4, rnum => 5,
       type => {msg, subchannel_ref}, occurrence => repeated,
       opts => []},
     #{name => socket_ref, fnum => 5, rnum => 6,
       type => {msg, socket_ref}, occurrence => repeated,
       opts => []}];
find_msg_def(channel_connectivity_state) ->
    [#{name => state, fnum => 1, rnum => 2,
       type => {enum, 'channel_connectivity_state.State'},
       occurrence => optional, opts => []}];
find_msg_def(channel_data) ->
    [#{name => state, fnum => 1, rnum => 2,
       type => {msg, channel_connectivity_state},
       occurrence => optional, opts => []},
     #{name => target, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => trace, fnum => 3, rnum => 4,
       type => {msg, channel_trace}, occurrence => optional,
       opts => []},
     #{name => calls_started, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => calls_succeeded, fnum => 5, rnum => 6,
       type => int64, occurrence => optional, opts => []},
     #{name => calls_failed, fnum => 6, rnum => 7,
       type => int64, occurrence => optional, opts => []},
     #{name => last_call_started_timestamp, fnum => 7,
       rnum => 8, type => {msg, timestamp},
       occurrence => optional, opts => []}];
find_msg_def(channel_trace_event) ->
    [#{name => description, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => severity, fnum => 2, rnum => 3,
       type => {enum, 'channel_trace_event.Severity'},
       occurrence => optional, opts => []},
     #{name => timestamp, fnum => 3, rnum => 4,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => child_ref, rnum => 5,
       fields =>
	   [#{name => channel_ref, fnum => 4, rnum => 5,
	      type => {msg, channel_ref}, occurrence => optional,
	      opts => []},
	    #{name => subchannel_ref, fnum => 5, rnum => 5,
	      type => {msg, subchannel_ref}, occurrence => optional,
	      opts => []}]}];
find_msg_def(channel_trace) ->
    [#{name => num_events_logged, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => creation_timestamp, fnum => 2, rnum => 3,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => events, fnum => 3, rnum => 4,
       type => {msg, channel_trace_event},
       occurrence => repeated, opts => []}];
find_msg_def(channel_ref) ->
    [#{name => channel_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(subchannel_ref) ->
    [#{name => subchannel_id, fnum => 7, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => name, fnum => 8, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(socket_ref) ->
    [#{name => socket_id, fnum => 3, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => name, fnum => 4, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(server_ref) ->
    [#{name => server_id, fnum => 5, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => name, fnum => 6, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(server) ->
    [#{name => ref, fnum => 1, rnum => 2,
       type => {msg, server_ref}, occurrence => optional,
       opts => []},
     #{name => data, fnum => 2, rnum => 3,
       type => {msg, server_data}, occurrence => optional,
       opts => []},
     #{name => listen_socket, fnum => 3, rnum => 4,
       type => {msg, socket_ref}, occurrence => repeated,
       opts => []}];
find_msg_def(server_data) ->
    [#{name => trace, fnum => 1, rnum => 2,
       type => {msg, channel_trace}, occurrence => optional,
       opts => []},
     #{name => calls_started, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []},
     #{name => calls_succeeded, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []},
     #{name => calls_failed, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => last_call_started_timestamp, fnum => 5,
       rnum => 6, type => {msg, timestamp},
       occurrence => optional, opts => []}];
find_msg_def(socket) ->
    [#{name => ref, fnum => 1, rnum => 2,
       type => {msg, socket_ref}, occurrence => optional,
       opts => []},
     #{name => data, fnum => 2, rnum => 3,
       type => {msg, socket_data}, occurrence => optional,
       opts => []},
     #{name => local, fnum => 3, rnum => 4,
       type => {msg, address}, occurrence => optional,
       opts => []},
     #{name => remote, fnum => 4, rnum => 5,
       type => {msg, address}, occurrence => optional,
       opts => []},
     #{name => security, fnum => 5, rnum => 6,
       type => {msg, security}, occurrence => optional,
       opts => []},
     #{name => remote_name, fnum => 6, rnum => 7,
       type => string, occurrence => optional, opts => []}];
find_msg_def(socket_data) ->
    [#{name => streams_started, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => streams_succeeded, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []},
     #{name => streams_failed, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []},
     #{name => messages_sent, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => messages_received, fnum => 5, rnum => 6,
       type => int64, occurrence => optional, opts => []},
     #{name => keep_alives_sent, fnum => 6, rnum => 7,
       type => int64, occurrence => optional, opts => []},
     #{name => last_local_stream_created_timestamp,
       fnum => 7, rnum => 8, type => {msg, timestamp},
       occurrence => optional, opts => []},
     #{name => last_remote_stream_created_timestamp,
       fnum => 8, rnum => 9, type => {msg, timestamp},
       occurrence => optional, opts => []},
     #{name => last_message_sent_timestamp, fnum => 9,
       rnum => 10, type => {msg, timestamp},
       occurrence => optional, opts => []},
     #{name => last_message_received_timestamp, fnum => 10,
       rnum => 11, type => {msg, timestamp},
       occurrence => optional, opts => []},
     #{name => local_flow_control_window, fnum => 11,
       rnum => 12, type => {msg, int_64_value},
       occurrence => optional, opts => []},
     #{name => remote_flow_control_window, fnum => 12,
       rnum => 13, type => {msg, int_64_value},
       occurrence => optional, opts => []},
     #{name => option, fnum => 13, rnum => 14,
       type => {msg, socket_option}, occurrence => repeated,
       opts => []}];
find_msg_def(tcp_ip_address) ->
    [#{name => ip_address, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(uds_address) ->
    [#{name => filename, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(other_address) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3,
       type => {msg, any}, occurrence => optional,
       opts => []}];
find_msg_def(address) ->
    [#{name => address, rnum => 2,
       fields =>
	   [#{name => tcpip_address, fnum => 1, rnum => 2,
	      type => {msg, tcp_ip_address}, occurrence => optional,
	      opts => []},
	    #{name => uds_address, fnum => 2, rnum => 2,
	      type => {msg, uds_address}, occurrence => optional,
	      opts => []},
	    #{name => other_address, fnum => 3, rnum => 2,
	      type => {msg, other_address}, occurrence => optional,
	      opts => []}]}];
find_msg_def(tls) ->
    [#{name => cipher_suite, rnum => 2,
       fields =>
	   [#{name => standard_name, fnum => 1, rnum => 2,
	      type => string, occurrence => optional, opts => []},
	    #{name => other_name, fnum => 2, rnum => 2,
	      type => string, occurrence => optional, opts => []}]},
     #{name => local_certificate, fnum => 3, rnum => 3,
       type => bytes, occurrence => optional, opts => []},
     #{name => remote_certificate, fnum => 4, rnum => 4,
       type => bytes, occurrence => optional, opts => []}];
find_msg_def(other_security) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3,
       type => {msg, any}, occurrence => optional,
       opts => []}];
find_msg_def(security) ->
    [#{name => model, rnum => 2,
       fields =>
	   [#{name => tls, fnum => 1, rnum => 2,
	      type => {msg, tls}, occurrence => optional, opts => []},
	    #{name => other, fnum => 2, rnum => 2,
	      type => {msg, other_security}, occurrence => optional,
	      opts => []}]}];
find_msg_def(socket_option) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => additional, fnum => 3, rnum => 4,
       type => {msg, any}, occurrence => optional,
       opts => []}];
find_msg_def(socket_option_timeout) ->
    [#{name => duration, fnum => 1, rnum => 2,
       type => {msg, duration}, occurrence => optional,
       opts => []}];
find_msg_def(socket_option_linger) ->
    [#{name => active, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => duration, fnum => 2, rnum => 3,
       type => {msg, duration}, occurrence => optional,
       opts => []}];
find_msg_def(socket_option_tcp_info) ->
    [#{name => tcpi_state, fnum => 1, rnum => 2,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_ca_state, fnum => 2, rnum => 3,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_retransmits, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_probes, fnum => 4, rnum => 5,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_backoff, fnum => 5, rnum => 6,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_options, fnum => 6, rnum => 7,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_snd_wscale, fnum => 7, rnum => 8,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_rcv_wscale, fnum => 8, rnum => 9,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_rto, fnum => 9, rnum => 10,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_ato, fnum => 10, rnum => 11,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_snd_mss, fnum => 11, rnum => 12,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_rcv_mss, fnum => 12, rnum => 13,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_unacked, fnum => 13, rnum => 14,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_sacked, fnum => 14, rnum => 15,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_lost, fnum => 15, rnum => 16,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_retrans, fnum => 16, rnum => 17,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_fackets, fnum => 17, rnum => 18,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_last_data_sent, fnum => 18, rnum => 19,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_last_ack_sent, fnum => 19, rnum => 20,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_last_data_recv, fnum => 20, rnum => 21,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_last_ack_recv, fnum => 21, rnum => 22,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_pmtu, fnum => 22, rnum => 23,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_rcv_ssthresh, fnum => 23, rnum => 24,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_rtt, fnum => 24, rnum => 25,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_rttvar, fnum => 25, rnum => 26,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_snd_ssthresh, fnum => 26, rnum => 27,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_snd_cwnd, fnum => 27, rnum => 28,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_advmss, fnum => 28, rnum => 29,
       type => uint32, occurrence => optional, opts => []},
     #{name => tcpi_reordering, fnum => 29, rnum => 30,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def(get_top_channels_request) ->
    [#{name => start_channel_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => max_results, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(get_top_channels_response) ->
    [#{name => channel, fnum => 1, rnum => 2,
       type => {msg, channel}, occurrence => repeated,
       opts => []},
     #{name => 'end', fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(get_servers_request) ->
    [#{name => start_server_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => max_results, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(get_servers_response) ->
    [#{name => server, fnum => 1, rnum => 2,
       type => {msg, server}, occurrence => repeated,
       opts => []},
     #{name => 'end', fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(get_server_request) ->
    [#{name => server_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(get_server_response) ->
    [#{name => server, fnum => 1, rnum => 2,
       type => {msg, server}, occurrence => optional,
       opts => []}];
find_msg_def(get_server_sockets_request) ->
    [#{name => server_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => start_socket_id, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []},
     #{name => max_results, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(get_server_sockets_response) ->
    [#{name => socket_ref, fnum => 1, rnum => 2,
       type => {msg, socket_ref}, occurrence => repeated,
       opts => []},
     #{name => 'end', fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(get_channel_request) ->
    [#{name => channel_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(get_channel_response) ->
    [#{name => channel, fnum => 1, rnum => 2,
       type => {msg, channel}, occurrence => optional,
       opts => []}];
find_msg_def(get_subchannel_request) ->
    [#{name => subchannel_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(get_subchannel_response) ->
    [#{name => subchannel, fnum => 1, rnum => 2,
       type => {msg, subchannel}, occurrence => optional,
       opts => []}];
find_msg_def(get_socket_request) ->
    [#{name => socket_id, fnum => 1, rnum => 2,
       type => int64, occurrence => optional, opts => []},
     #{name => summary, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(get_socket_response) ->
    [#{name => socket, fnum => 1, rnum => 2,
       type => {msg, socket}, occurrence => optional,
       opts => []}];
find_msg_def(any) ->
    [#{name => type_url, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def(duration) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(timestamp) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(double_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => double,
       occurrence => optional, opts => []}];
find_msg_def(float_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => float,
       occurrence => optional, opts => []}];
find_msg_def(int_64_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []}];
find_msg_def(u_int_64_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []}];
find_msg_def(int_32_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(u_int_32_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(bool_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(string_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(bytes_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('channel_connectivity_state.State') ->
    [{'UNKNOWN', 0}, {'IDLE', 1}, {'CONNECTING', 2},
     {'READY', 3}, {'TRANSIENT_FAILURE', 4},
     {'SHUTDOWN', 5}];
find_enum_def('channel_trace_event.Severity') ->
    [{'CT_UNKNOWN', 0}, {'CT_INFO', 1}, {'CT_WARNING', 2},
     {'CT_ERROR', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('channel_connectivity_state.State',
		     Value) ->
    'enum_symbol_by_value_channel_connectivity_state.State'(Value);
enum_symbol_by_value('channel_trace_event.Severity',
		     Value) ->
    'enum_symbol_by_value_channel_trace_event.Severity'(Value).


enum_value_by_symbol('channel_connectivity_state.State',
		     Sym) ->
    'enum_value_by_symbol_channel_connectivity_state.State'(Sym);
enum_value_by_symbol('channel_trace_event.Severity',
		     Sym) ->
    'enum_value_by_symbol_channel_trace_event.Severity'(Sym).


'enum_symbol_by_value_channel_connectivity_state.State'(0) ->
    'UNKNOWN';
'enum_symbol_by_value_channel_connectivity_state.State'(1) ->
    'IDLE';
'enum_symbol_by_value_channel_connectivity_state.State'(2) ->
    'CONNECTING';
'enum_symbol_by_value_channel_connectivity_state.State'(3) ->
    'READY';
'enum_symbol_by_value_channel_connectivity_state.State'(4) ->
    'TRANSIENT_FAILURE';
'enum_symbol_by_value_channel_connectivity_state.State'(5) ->
    'SHUTDOWN'.


'enum_value_by_symbol_channel_connectivity_state.State'('UNKNOWN') ->
    0;
'enum_value_by_symbol_channel_connectivity_state.State'('IDLE') ->
    1;
'enum_value_by_symbol_channel_connectivity_state.State'('CONNECTING') ->
    2;
'enum_value_by_symbol_channel_connectivity_state.State'('READY') ->
    3;
'enum_value_by_symbol_channel_connectivity_state.State'('TRANSIENT_FAILURE') ->
    4;
'enum_value_by_symbol_channel_connectivity_state.State'('SHUTDOWN') ->
    5.

'enum_symbol_by_value_channel_trace_event.Severity'(0) ->
    'CT_UNKNOWN';
'enum_symbol_by_value_channel_trace_event.Severity'(1) ->
    'CT_INFO';
'enum_symbol_by_value_channel_trace_event.Severity'(2) ->
    'CT_WARNING';
'enum_symbol_by_value_channel_trace_event.Severity'(3) ->
    'CT_ERROR'.


'enum_value_by_symbol_channel_trace_event.Severity'('CT_UNKNOWN') ->
    0;
'enum_value_by_symbol_channel_trace_event.Severity'('CT_INFO') ->
    1;
'enum_value_by_symbol_channel_trace_event.Severity'('CT_WARNING') ->
    2;
'enum_value_by_symbol_channel_trace_event.Severity'('CT_ERROR') ->
    3.


get_service_names() -> ['grpc.channelz.v1.Channelz'].


get_service_def('grpc.channelz.v1.Channelz') ->
    {{service, 'grpc.channelz.v1.Channelz'},
     [#{name => 'GetTopChannels',
	input => get_top_channels_request,
	output => get_top_channels_response,
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetServers', input => get_servers_request,
	output => get_servers_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetServer', input => get_server_request,
	output => get_server_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetServerSockets',
	input => get_server_sockets_request,
	output => get_server_sockets_response,
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetChannel', input => get_channel_request,
	output => get_channel_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'GetSubchannel',
	input => get_subchannel_request,
	output => get_subchannel_response,
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'GetSocket', input => get_socket_request,
	output => get_socket_response, input_stream => false,
	output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('grpc.channelz.v1.Channelz') ->
    ['GetTopChannels', 'GetServers', 'GetServer',
     'GetServerSockets', 'GetChannel', 'GetSubchannel',
     'GetSocket'];
get_rpc_names(_) -> error.


find_rpc_def('grpc.channelz.v1.Channelz', RpcName) ->
    'find_rpc_def_grpc.channelz.v1.Channelz'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_grpc.channelz.v1.Channelz'('GetTopChannels') ->
    #{name => 'GetTopChannels',
      input => get_top_channels_request,
      output => get_top_channels_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_grpc.channelz.v1.Channelz'('GetServers') ->
    #{name => 'GetServers', input => get_servers_request,
      output => get_servers_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_grpc.channelz.v1.Channelz'('GetServer') ->
    #{name => 'GetServer', input => get_server_request,
      output => get_server_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_grpc.channelz.v1.Channelz'('GetServerSockets') ->
    #{name => 'GetServerSockets',
      input => get_server_sockets_request,
      output => get_server_sockets_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_grpc.channelz.v1.Channelz'('GetChannel') ->
    #{name => 'GetChannel', input => get_channel_request,
      output => get_channel_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_grpc.channelz.v1.Channelz'('GetSubchannel') ->
    #{name => 'GetSubchannel',
      input => get_subchannel_request,
      output => get_subchannel_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_grpc.channelz.v1.Channelz'('GetSocket') ->
    #{name => 'GetSocket', input => get_socket_request,
      output => get_socket_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_grpc.channelz.v1.Channelz'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"grpc.channelz.v1.Channelz">>) ->
    'grpc.channelz.v1.Channelz';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('grpc.channelz.v1.Channelz') ->
    <<"grpc.channelz.v1.Channelz">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"grpc.channelz.v1.Channelz">>, <<"GetTopChannels">>) ->
    {'grpc.channelz.v1.Channelz', 'GetTopChannels'};
fqbins_to_service_and_rpc_name(<<"grpc.channelz.v1.Channelz">>, <<"GetServers">>) ->
    {'grpc.channelz.v1.Channelz', 'GetServers'};
fqbins_to_service_and_rpc_name(<<"grpc.channelz.v1.Channelz">>, <<"GetServer">>) ->
    {'grpc.channelz.v1.Channelz', 'GetServer'};
fqbins_to_service_and_rpc_name(<<"grpc.channelz.v1.Channelz">>, <<"GetServerSockets">>) ->
    {'grpc.channelz.v1.Channelz', 'GetServerSockets'};
fqbins_to_service_and_rpc_name(<<"grpc.channelz.v1.Channelz">>, <<"GetChannel">>) ->
    {'grpc.channelz.v1.Channelz', 'GetChannel'};
fqbins_to_service_and_rpc_name(<<"grpc.channelz.v1.Channelz">>, <<"GetSubchannel">>) ->
    {'grpc.channelz.v1.Channelz', 'GetSubchannel'};
fqbins_to_service_and_rpc_name(<<"grpc.channelz.v1.Channelz">>, <<"GetSocket">>) ->
    {'grpc.channelz.v1.Channelz', 'GetSocket'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('grpc.channelz.v1.Channelz',
			       'GetTopChannels') ->
    {<<"grpc.channelz.v1.Channelz">>, <<"GetTopChannels">>};
service_and_rpc_name_to_fqbins('grpc.channelz.v1.Channelz',
			       'GetServers') ->
    {<<"grpc.channelz.v1.Channelz">>, <<"GetServers">>};
service_and_rpc_name_to_fqbins('grpc.channelz.v1.Channelz',
			       'GetServer') ->
    {<<"grpc.channelz.v1.Channelz">>, <<"GetServer">>};
service_and_rpc_name_to_fqbins('grpc.channelz.v1.Channelz',
			       'GetServerSockets') ->
    {<<"grpc.channelz.v1.Channelz">>, <<"GetServerSockets">>};
service_and_rpc_name_to_fqbins('grpc.channelz.v1.Channelz',
			       'GetChannel') ->
    {<<"grpc.channelz.v1.Channelz">>, <<"GetChannel">>};
service_and_rpc_name_to_fqbins('grpc.channelz.v1.Channelz',
			       'GetSubchannel') ->
    {<<"grpc.channelz.v1.Channelz">>, <<"GetSubchannel">>};
service_and_rpc_name_to_fqbins('grpc.channelz.v1.Channelz',
			       'GetSocket') ->
    {<<"grpc.channelz.v1.Channelz">>, <<"GetSocket">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"grpc.channelz.v1.Channel">>) -> channel;
fqbin_to_msg_name(<<"grpc.channelz.v1.Subchannel">>) -> subchannel;
fqbin_to_msg_name(<<"grpc.channelz.v1.ChannelConnectivityState">>) ->
    channel_connectivity_state;
fqbin_to_msg_name(<<"grpc.channelz.v1.ChannelData">>) -> channel_data;
fqbin_to_msg_name(<<"grpc.channelz.v1.ChannelTraceEvent">>) -> channel_trace_event;
fqbin_to_msg_name(<<"grpc.channelz.v1.ChannelTrace">>) -> channel_trace;
fqbin_to_msg_name(<<"grpc.channelz.v1.ChannelRef">>) -> channel_ref;
fqbin_to_msg_name(<<"grpc.channelz.v1.SubchannelRef">>) -> subchannel_ref;
fqbin_to_msg_name(<<"grpc.channelz.v1.SocketRef">>) -> socket_ref;
fqbin_to_msg_name(<<"grpc.channelz.v1.ServerRef">>) -> server_ref;
fqbin_to_msg_name(<<"grpc.channelz.v1.Server">>) -> server;
fqbin_to_msg_name(<<"grpc.channelz.v1.ServerData">>) -> server_data;
fqbin_to_msg_name(<<"grpc.channelz.v1.Socket">>) -> socket;
fqbin_to_msg_name(<<"grpc.channelz.v1.SocketData">>) -> socket_data;
fqbin_to_msg_name(<<"grpc.channelz.v1.Address.TcpIpAddress">>) -> tcp_ip_address;
fqbin_to_msg_name(<<"grpc.channelz.v1.Address.UdsAddress">>) -> uds_address;
fqbin_to_msg_name(<<"grpc.channelz.v1.Address.OtherAddress">>) -> other_address;
fqbin_to_msg_name(<<"grpc.channelz.v1.Address">>) -> address;
fqbin_to_msg_name(<<"grpc.channelz.v1.Security.Tls">>) -> tls;
fqbin_to_msg_name(<<"grpc.channelz.v1.Security.OtherSecurity">>) -> other_security;
fqbin_to_msg_name(<<"grpc.channelz.v1.Security">>) -> security;
fqbin_to_msg_name(<<"grpc.channelz.v1.SocketOption">>) -> socket_option;
fqbin_to_msg_name(<<"grpc.channelz.v1.SocketOptionTimeout">>) -> socket_option_timeout;
fqbin_to_msg_name(<<"grpc.channelz.v1.SocketOptionLinger">>) -> socket_option_linger;
fqbin_to_msg_name(<<"grpc.channelz.v1.SocketOptionTcpInfo">>) -> socket_option_tcp_info;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetTopChannelsRequest">>) -> get_top_channels_request;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetTopChannelsResponse">>) -> get_top_channels_response;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetServersRequest">>) -> get_servers_request;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetServersResponse">>) -> get_servers_response;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetServerRequest">>) -> get_server_request;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetServerResponse">>) -> get_server_response;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetServerSocketsRequest">>) ->
    get_server_sockets_request;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetServerSocketsResponse">>) ->
    get_server_sockets_response;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetChannelRequest">>) -> get_channel_request;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetChannelResponse">>) -> get_channel_response;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetSubchannelRequest">>) -> get_subchannel_request;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetSubchannelResponse">>) -> get_subchannel_response;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetSocketRequest">>) -> get_socket_request;
fqbin_to_msg_name(<<"grpc.channelz.v1.GetSocketResponse">>) -> get_socket_response;
fqbin_to_msg_name(<<"google.protobuf.Any">>) -> any;
fqbin_to_msg_name(<<"google.protobuf.Duration">>) -> duration;
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> timestamp;
fqbin_to_msg_name(<<"google.protobuf.DoubleValue">>) -> double_value;
fqbin_to_msg_name(<<"google.protobuf.FloatValue">>) -> float_value;
fqbin_to_msg_name(<<"google.protobuf.Int64Value">>) -> int_64_value;
fqbin_to_msg_name(<<"google.protobuf.UInt64Value">>) -> u_int_64_value;
fqbin_to_msg_name(<<"google.protobuf.Int32Value">>) -> int_32_value;
fqbin_to_msg_name(<<"google.protobuf.UInt32Value">>) -> u_int_32_value;
fqbin_to_msg_name(<<"google.protobuf.BoolValue">>) -> bool_value;
fqbin_to_msg_name(<<"google.protobuf.StringValue">>) -> string_value;
fqbin_to_msg_name(<<"google.protobuf.BytesValue">>) -> bytes_value;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(channel) -> <<"grpc.channelz.v1.Channel">>;
msg_name_to_fqbin(subchannel) -> <<"grpc.channelz.v1.Subchannel">>;
msg_name_to_fqbin(channel_connectivity_state) ->
    <<"grpc.channelz.v1.ChannelConnectivityState">>;
msg_name_to_fqbin(channel_data) -> <<"grpc.channelz.v1.ChannelData">>;
msg_name_to_fqbin(channel_trace_event) -> <<"grpc.channelz.v1.ChannelTraceEvent">>;
msg_name_to_fqbin(channel_trace) -> <<"grpc.channelz.v1.ChannelTrace">>;
msg_name_to_fqbin(channel_ref) -> <<"grpc.channelz.v1.ChannelRef">>;
msg_name_to_fqbin(subchannel_ref) -> <<"grpc.channelz.v1.SubchannelRef">>;
msg_name_to_fqbin(socket_ref) -> <<"grpc.channelz.v1.SocketRef">>;
msg_name_to_fqbin(server_ref) -> <<"grpc.channelz.v1.ServerRef">>;
msg_name_to_fqbin(server) -> <<"grpc.channelz.v1.Server">>;
msg_name_to_fqbin(server_data) -> <<"grpc.channelz.v1.ServerData">>;
msg_name_to_fqbin(socket) -> <<"grpc.channelz.v1.Socket">>;
msg_name_to_fqbin(socket_data) -> <<"grpc.channelz.v1.SocketData">>;
msg_name_to_fqbin(tcp_ip_address) -> <<"grpc.channelz.v1.Address.TcpIpAddress">>;
msg_name_to_fqbin(uds_address) -> <<"grpc.channelz.v1.Address.UdsAddress">>;
msg_name_to_fqbin(other_address) -> <<"grpc.channelz.v1.Address.OtherAddress">>;
msg_name_to_fqbin(address) -> <<"grpc.channelz.v1.Address">>;
msg_name_to_fqbin(tls) -> <<"grpc.channelz.v1.Security.Tls">>;
msg_name_to_fqbin(other_security) -> <<"grpc.channelz.v1.Security.OtherSecurity">>;
msg_name_to_fqbin(security) -> <<"grpc.channelz.v1.Security">>;
msg_name_to_fqbin(socket_option) -> <<"grpc.channelz.v1.SocketOption">>;
msg_name_to_fqbin(socket_option_timeout) -> <<"grpc.channelz.v1.SocketOptionTimeout">>;
msg_name_to_fqbin(socket_option_linger) -> <<"grpc.channelz.v1.SocketOptionLinger">>;
msg_name_to_fqbin(socket_option_tcp_info) -> <<"grpc.channelz.v1.SocketOptionTcpInfo">>;
msg_name_to_fqbin(get_top_channels_request) -> <<"grpc.channelz.v1.GetTopChannelsRequest">>;
msg_name_to_fqbin(get_top_channels_response) -> <<"grpc.channelz.v1.GetTopChannelsResponse">>;
msg_name_to_fqbin(get_servers_request) -> <<"grpc.channelz.v1.GetServersRequest">>;
msg_name_to_fqbin(get_servers_response) -> <<"grpc.channelz.v1.GetServersResponse">>;
msg_name_to_fqbin(get_server_request) -> <<"grpc.channelz.v1.GetServerRequest">>;
msg_name_to_fqbin(get_server_response) -> <<"grpc.channelz.v1.GetServerResponse">>;
msg_name_to_fqbin(get_server_sockets_request) ->
    <<"grpc.channelz.v1.GetServerSocketsRequest">>;
msg_name_to_fqbin(get_server_sockets_response) ->
    <<"grpc.channelz.v1.GetServerSocketsResponse">>;
msg_name_to_fqbin(get_channel_request) -> <<"grpc.channelz.v1.GetChannelRequest">>;
msg_name_to_fqbin(get_channel_response) -> <<"grpc.channelz.v1.GetChannelResponse">>;
msg_name_to_fqbin(get_subchannel_request) -> <<"grpc.channelz.v1.GetSubchannelRequest">>;
msg_name_to_fqbin(get_subchannel_response) -> <<"grpc.channelz.v1.GetSubchannelResponse">>;
msg_name_to_fqbin(get_socket_request) -> <<"grpc.channelz.v1.GetSocketRequest">>;
msg_name_to_fqbin(get_socket_response) -> <<"grpc.channelz.v1.GetSocketResponse">>;
msg_name_to_fqbin(any) -> <<"google.protobuf.Any">>;
msg_name_to_fqbin(duration) -> <<"google.protobuf.Duration">>;
msg_name_to_fqbin(timestamp) -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(double_value) -> <<"google.protobuf.DoubleValue">>;
msg_name_to_fqbin(float_value) -> <<"google.protobuf.FloatValue">>;
msg_name_to_fqbin(int_64_value) -> <<"google.protobuf.Int64Value">>;
msg_name_to_fqbin(u_int_64_value) -> <<"google.protobuf.UInt64Value">>;
msg_name_to_fqbin(int_32_value) -> <<"google.protobuf.Int32Value">>;
msg_name_to_fqbin(u_int_32_value) -> <<"google.protobuf.UInt32Value">>;
msg_name_to_fqbin(bool_value) -> <<"google.protobuf.BoolValue">>;
msg_name_to_fqbin(string_value) -> <<"google.protobuf.StringValue">>;
msg_name_to_fqbin(bytes_value) -> <<"google.protobuf.BytesValue">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"grpc.channelz.v1.ChannelConnectivityState.State">>) ->
    'channel_connectivity_state.State';
fqbin_to_enum_name(<<"grpc.channelz.v1.ChannelTraceEvent.Severity">>) ->
    'channel_trace_event.Severity';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('channel_connectivity_state.State') ->
    <<"grpc.channelz.v1.ChannelConnectivityState.State">>;
enum_name_to_fqbin('channel_trace_event.Severity') ->
    <<"grpc.channelz.v1.ChannelTraceEvent.Severity">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'grpc.channelz.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "channelz.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["channelz.proto", "any.proto", "duration.proto",
     "timestamp.proto", "wrappers.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["channelz", "any", "duration", "timestamp",
     "wrappers"].


get_msg_containment("channelz") ->
    [address, other_address, tcp_ip_address, uds_address,
     channel, channel_connectivity_state, channel_data,
     channel_ref, channel_trace, channel_trace_event,
     get_channel_request, get_channel_response,
     get_server_request, get_server_response,
     get_server_sockets_request, get_server_sockets_response,
     get_servers_request, get_servers_response,
     get_socket_request, get_socket_response,
     get_subchannel_request, get_subchannel_response,
     get_top_channels_request, get_top_channels_response,
     security, other_security, tls, server, server_data,
     server_ref, socket, socket_data, socket_option,
     socket_option_linger, socket_option_tcp_info,
     socket_option_timeout, socket_ref, subchannel,
     subchannel_ref];
get_msg_containment("any") -> [any];
get_msg_containment("duration") -> [duration];
get_msg_containment("timestamp") -> [timestamp];
get_msg_containment("wrappers") ->
    [bool_value, bytes_value, double_value, float_value,
     int_32_value, int_64_value, string_value,
     u_int_32_value, u_int_64_value];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("channelz") -> 'grpc.channelz.v1';
get_pkg_containment("any") -> 'google.protobuf';
get_pkg_containment("duration") -> 'google.protobuf';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("wrappers") -> 'google.protobuf';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("channelz") ->
    ['grpc.channelz.v1.Channelz'];
get_service_containment("any") -> [];
get_service_containment("duration") -> [];
get_service_containment("timestamp") -> [];
get_service_containment("wrappers") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("channelz") ->
    [{'grpc.channelz.v1.Channelz', 'GetTopChannels'},
     {'grpc.channelz.v1.Channelz', 'GetServers'},
     {'grpc.channelz.v1.Channelz', 'GetServer'},
     {'grpc.channelz.v1.Channelz', 'GetServerSockets'},
     {'grpc.channelz.v1.Channelz', 'GetChannel'},
     {'grpc.channelz.v1.Channelz', 'GetSubchannel'},
     {'grpc.channelz.v1.Channelz', 'GetSocket'}];
get_rpc_containment("any") -> [];
get_rpc_containment("duration") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment("wrappers") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("channelz") ->
    ['channel_connectivity_state.State',
     'channel_trace_event.Severity'];
get_enum_containment("any") -> [];
get_enum_containment("duration") -> [];
get_enum_containment("timestamp") -> [];
get_enum_containment("wrappers") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.SocketData">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.ServerData">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.ChannelData">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.SocketOptionLinger">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Server">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Security.Tls">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Address.UdsAddress">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Address.TcpIpAddress">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Address.OtherAddress">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Address">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.SocketOptionTimeout">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Socket">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetTopChannelsRequest">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetSubchannelRequest">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetSocketRequest">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetServersRequest">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetServerSocketsRequest">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetServerRequest">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetChannelRequest">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.ChannelTraceEvent">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.UInt64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.UInt32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.StringValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Int64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Int32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.FloatValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.DoubleValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.BytesValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.BoolValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetTopChannelsResponse">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetSubchannelResponse">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetSocketResponse">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetServersResponse">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetServerSocketsResponse">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetServerResponse">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.GetChannelResponse">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.ChannelTrace">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.ChannelConnectivityState">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.SubchannelRef">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.SocketRef">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.ServerRef">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.ChannelRef">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Any">>) -> "any";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Security.OtherSecurity">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Security">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Subchannel">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.Channel">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Duration">>) -> "duration";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.SocketOption">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(<<"grpc.channelz.v1.SocketOptionTcpInfo">>) -> "channelz";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"grpc.channelz.v1.Channelz">>) ->
    "channelz";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"grpc.channelz.v1.ChannelConnectivityState.State">>) -> "channelz";
get_proto_by_enum_name_as_fqbin(<<"grpc.channelz.v1.ChannelTraceEvent.Severity">>) -> "channelz";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"grpc.channelz.v1">>) ->
    ["channelz"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["any", "duration", "timestamp", "wrappers"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).


descriptor() ->
    <<10, 182, 48, 10, 31, 103, 114, 112, 99, 47, 99, 104,
      97, 110, 110, 101, 108, 122, 47, 118, 49, 47, 99, 104,
      97, 110, 110, 101, 108, 122, 46, 112, 114, 111, 116,
      111, 18, 16, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 34, 232, 2, 10, 7, 65,
      100, 100, 114, 101, 115, 115, 18, 63, 10, 13, 116, 99,
      112, 105, 112, 95, 97, 100, 100, 114, 101, 115, 115, 24,
      1, 32, 1, 40, 11, 50, 38, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 65,
      100, 100, 114, 101, 115, 115, 46, 84, 99, 112, 73, 112,
      65, 100, 100, 114, 101, 115, 115, 72, 0, 18, 59, 10, 11,
      117, 100, 115, 95, 97, 100, 100, 114, 101, 115, 115, 24,
      2, 32, 1, 40, 11, 50, 36, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 65,
      100, 100, 114, 101, 115, 115, 46, 85, 100, 115, 65, 100,
      100, 114, 101, 115, 115, 72, 0, 18, 63, 10, 13, 111,
      116, 104, 101, 114, 95, 97, 100, 100, 114, 101, 115,
      115, 24, 3, 32, 1, 40, 11, 50, 38, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 65, 100, 100, 114, 101, 115, 115, 46, 79, 116,
      104, 101, 114, 65, 100, 100, 114, 101, 115, 115, 72, 0,
      26, 65, 10, 12, 79, 116, 104, 101, 114, 65, 100, 100,
      114, 101, 115, 115, 18, 12, 10, 4, 110, 97, 109, 101,
      24, 1, 32, 1, 40, 9, 18, 35, 10, 5, 118, 97, 108, 117,
      101, 24, 2, 32, 1, 40, 11, 50, 20, 46, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 46, 65, 110, 121, 26, 48, 10, 12, 84, 99, 112, 73,
      112, 65, 100, 100, 114, 101, 115, 115, 18, 18, 10, 10,
      105, 112, 95, 97, 100, 100, 114, 101, 115, 115, 24, 1,
      32, 1, 40, 12, 18, 12, 10, 4, 112, 111, 114, 116, 24, 2,
      32, 1, 40, 5, 26, 30, 10, 10, 85, 100, 115, 65, 100,
      100, 114, 101, 115, 115, 18, 16, 10, 8, 102, 105, 108,
      101, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 66, 9, 10,
      7, 97, 100, 100, 114, 101, 115, 115, 34, 254, 1, 10, 7,
      67, 104, 97, 110, 110, 101, 108, 18, 41, 10, 3, 114,
      101, 102, 24, 1, 32, 1, 40, 11, 50, 28, 46, 103, 114,
      112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46,
      118, 49, 46, 67, 104, 97, 110, 110, 101, 108, 82, 101,
      102, 18, 43, 10, 4, 100, 97, 116, 97, 24, 2, 32, 1, 40,
      11, 50, 29, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97, 110,
      110, 101, 108, 68, 97, 116, 97, 18, 49, 10, 11, 99, 104,
      97, 110, 110, 101, 108, 95, 114, 101, 102, 24, 3, 32, 3,
      40, 11, 50, 28, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97,
      110, 110, 101, 108, 82, 101, 102, 18, 55, 10, 14, 115,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 95, 114, 101,
      102, 24, 4, 32, 3, 40, 11, 50, 31, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 83, 117, 98, 99, 104, 97, 110, 110, 101, 108,
      82, 101, 102, 18, 47, 10, 10, 115, 111, 99, 107, 101,
      116, 95, 114, 101, 102, 24, 5, 32, 3, 40, 11, 50, 27,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 83, 111, 99, 107, 101, 116,
      82, 101, 102, 34, 187, 1, 10, 24, 67, 104, 97, 110, 110,
      101, 108, 67, 111, 110, 110, 101, 99, 116, 105, 118,
      105, 116, 121, 83, 116, 97, 116, 101, 18, 63, 10, 5,
      115, 116, 97, 116, 101, 24, 1, 32, 1, 40, 14, 50, 48,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 67, 104, 97, 110, 110, 101,
      108, 67, 111, 110, 110, 101, 99, 116, 105, 118, 105,
      116, 121, 83, 116, 97, 116, 101, 46, 83, 116, 97, 116,
      101, 34, 94, 10, 5, 83, 116, 97, 116, 101, 18, 11, 10,
      7, 85, 78, 75, 78, 79, 87, 78, 16, 0, 18, 8, 10, 4, 73,
      68, 76, 69, 16, 1, 18, 14, 10, 10, 67, 79, 78, 78, 69,
      67, 84, 73, 78, 71, 16, 2, 18, 9, 10, 5, 82, 69, 65, 68,
      89, 16, 3, 18, 21, 10, 17, 84, 82, 65, 78, 83, 73, 69,
      78, 84, 95, 70, 65, 73, 76, 85, 82, 69, 16, 4, 18, 12,
      10, 8, 83, 72, 85, 84, 68, 79, 87, 78, 16, 5, 34, 142,
      2, 10, 11, 67, 104, 97, 110, 110, 101, 108, 68, 97, 116,
      97, 18, 57, 10, 5, 115, 116, 97, 116, 101, 24, 1, 32, 1,
      40, 11, 50, 42, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97,
      110, 110, 101, 108, 67, 111, 110, 110, 101, 99, 116,
      105, 118, 105, 116, 121, 83, 116, 97, 116, 101, 18, 14,
      10, 6, 116, 97, 114, 103, 101, 116, 24, 2, 32, 1, 40, 9,
      18, 45, 10, 5, 116, 114, 97, 99, 101, 24, 3, 32, 1, 40,
      11, 50, 30, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97, 110,
      110, 101, 108, 84, 114, 97, 99, 101, 18, 21, 10, 13, 99,
      97, 108, 108, 115, 95, 115, 116, 97, 114, 116, 101, 100,
      24, 4, 32, 1, 40, 3, 18, 23, 10, 15, 99, 97, 108, 108,
      115, 95, 115, 117, 99, 99, 101, 101, 100, 101, 100, 24,
      5, 32, 1, 40, 3, 18, 20, 10, 12, 99, 97, 108, 108, 115,
      95, 102, 97, 105, 108, 101, 100, 24, 6, 32, 1, 40, 3,
      18, 63, 10, 27, 108, 97, 115, 116, 95, 99, 97, 108, 108,
      95, 115, 116, 97, 114, 116, 101, 100, 95, 116, 105, 109,
      101, 115, 116, 97, 109, 112, 24, 7, 32, 1, 40, 11, 50,
      26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 46, 84, 105, 109, 101, 115, 116,
      97, 109, 112, 34, 46, 10, 10, 67, 104, 97, 110, 110,
      101, 108, 82, 101, 102, 18, 18, 10, 10, 99, 104, 97,
      110, 110, 101, 108, 95, 105, 100, 24, 1, 32, 1, 40, 3,
      18, 12, 10, 4, 110, 97, 109, 101, 24, 2, 32, 1, 40, 9,
      34, 150, 1, 10, 12, 67, 104, 97, 110, 110, 101, 108, 84,
      114, 97, 99, 101, 18, 25, 10, 17, 110, 117, 109, 95,
      101, 118, 101, 110, 116, 115, 95, 108, 111, 103, 103,
      101, 100, 24, 1, 32, 1, 40, 3, 18, 54, 10, 18, 99, 114,
      101, 97, 116, 105, 111, 110, 95, 116, 105, 109, 101,
      115, 116, 97, 109, 112, 24, 2, 32, 1, 40, 11, 50, 26,
      46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 46, 84, 105, 109, 101, 115, 116,
      97, 109, 112, 18, 51, 10, 6, 101, 118, 101, 110, 116,
      115, 24, 3, 32, 3, 40, 11, 50, 35, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 67, 104, 97, 110, 110, 101, 108, 84, 114, 97,
      99, 101, 69, 118, 101, 110, 116, 34, 219, 2, 10, 17, 67,
      104, 97, 110, 110, 101, 108, 84, 114, 97, 99, 101, 69,
      118, 101, 110, 116, 18, 19, 10, 11, 100, 101, 115, 99,
      114, 105, 112, 116, 105, 111, 110, 24, 1, 32, 1, 40, 9,
      18, 62, 10, 8, 115, 101, 118, 101, 114, 105, 116, 121,
      24, 2, 32, 1, 40, 14, 50, 44, 46, 103, 114, 112, 99, 46,
      99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46,
      67, 104, 97, 110, 110, 101, 108, 84, 114, 97, 99, 101,
      69, 118, 101, 110, 116, 46, 83, 101, 118, 101, 114, 105,
      116, 121, 18, 45, 10, 9, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 3, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 18, 51, 10, 11, 99, 104, 97, 110, 110, 101, 108,
      95, 114, 101, 102, 24, 4, 32, 1, 40, 11, 50, 28, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 67, 104, 97, 110, 110, 101, 108,
      82, 101, 102, 72, 0, 18, 57, 10, 14, 115, 117, 98, 99,
      104, 97, 110, 110, 101, 108, 95, 114, 101, 102, 24, 5,
      32, 1, 40, 11, 50, 31, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 82, 101, 102,
      72, 0, 34, 69, 10, 8, 83, 101, 118, 101, 114, 105, 116,
      121, 18, 14, 10, 10, 67, 84, 95, 85, 78, 75, 78, 79, 87,
      78, 16, 0, 18, 11, 10, 7, 67, 84, 95, 73, 78, 70, 79,
      16, 1, 18, 14, 10, 10, 67, 84, 95, 87, 65, 82, 78, 73,
      78, 71, 16, 2, 18, 12, 10, 8, 67, 84, 95, 69, 82, 82,
      79, 82, 16, 3, 66, 11, 10, 9, 99, 104, 105, 108, 100,
      95, 114, 101, 102, 34, 39, 10, 17, 71, 101, 116, 67,
      104, 97, 110, 110, 101, 108, 82, 101, 113, 117, 101,
      115, 116, 18, 18, 10, 10, 99, 104, 97, 110, 110, 101,
      108, 95, 105, 100, 24, 1, 32, 1, 40, 3, 34, 64, 10, 18,
      71, 101, 116, 67, 104, 97, 110, 110, 101, 108, 82, 101,
      115, 112, 111, 110, 115, 101, 18, 42, 10, 7, 99, 104,
      97, 110, 110, 101, 108, 24, 1, 32, 1, 40, 11, 50, 25,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 67, 104, 97, 110, 110, 101,
      108, 34, 37, 10, 16, 71, 101, 116, 83, 101, 114, 118,
      101, 114, 82, 101, 113, 117, 101, 115, 116, 18, 17, 10,
      9, 115, 101, 114, 118, 101, 114, 95, 105, 100, 24, 1,
      32, 1, 40, 3, 34, 61, 10, 17, 71, 101, 116, 83, 101,
      114, 118, 101, 114, 82, 101, 115, 112, 111, 110, 115,
      101, 18, 40, 10, 6, 115, 101, 114, 118, 101, 114, 24, 1,
      32, 1, 40, 11, 50, 24, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      101, 114, 118, 101, 114, 34, 90, 10, 23, 71, 101, 116,
      83, 101, 114, 118, 101, 114, 83, 111, 99, 107, 101, 116,
      115, 82, 101, 113, 117, 101, 115, 116, 18, 17, 10, 9,
      115, 101, 114, 118, 101, 114, 95, 105, 100, 24, 1, 32,
      1, 40, 3, 18, 23, 10, 15, 115, 116, 97, 114, 116, 95,
      115, 111, 99, 107, 101, 116, 95, 105, 100, 24, 2, 32, 1,
      40, 3, 18, 19, 10, 11, 109, 97, 120, 95, 114, 101, 115,
      117, 108, 116, 115, 24, 3, 32, 1, 40, 3, 34, 88, 10, 24,
      71, 101, 116, 83, 101, 114, 118, 101, 114, 83, 111, 99,
      107, 101, 116, 115, 82, 101, 115, 112, 111, 110, 115,
      101, 18, 47, 10, 10, 115, 111, 99, 107, 101, 116, 95,
      114, 101, 102, 24, 1, 32, 3, 40, 11, 50, 27, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 83, 111, 99, 107, 101, 116, 82, 101,
      102, 18, 11, 10, 3, 101, 110, 100, 24, 2, 32, 1, 40, 8,
      34, 65, 10, 17, 71, 101, 116, 83, 101, 114, 118, 101,
      114, 115, 82, 101, 113, 117, 101, 115, 116, 18, 23, 10,
      15, 115, 116, 97, 114, 116, 95, 115, 101, 114, 118, 101,
      114, 95, 105, 100, 24, 1, 32, 1, 40, 3, 18, 19, 10, 11,
      109, 97, 120, 95, 114, 101, 115, 117, 108, 116, 115, 24,
      2, 32, 1, 40, 3, 34, 75, 10, 18, 71, 101, 116, 83, 101,
      114, 118, 101, 114, 115, 82, 101, 115, 112, 111, 110,
      115, 101, 18, 40, 10, 6, 115, 101, 114, 118, 101, 114,
      24, 1, 32, 3, 40, 11, 50, 24, 46, 103, 114, 112, 99, 46,
      99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46,
      83, 101, 114, 118, 101, 114, 18, 11, 10, 3, 101, 110,
      100, 24, 2, 32, 1, 40, 8, 34, 54, 10, 16, 71, 101, 116,
      83, 111, 99, 107, 101, 116, 82, 101, 113, 117, 101, 115,
      116, 18, 17, 10, 9, 115, 111, 99, 107, 101, 116, 95,
      105, 100, 24, 1, 32, 1, 40, 3, 18, 15, 10, 7, 115, 117,
      109, 109, 97, 114, 121, 24, 2, 32, 1, 40, 8, 34, 61, 10,
      17, 71, 101, 116, 83, 111, 99, 107, 101, 116, 82, 101,
      115, 112, 111, 110, 115, 101, 18, 40, 10, 6, 115, 111,
      99, 107, 101, 116, 24, 1, 32, 1, 40, 11, 50, 24, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 83, 111, 99, 107, 101, 116, 34,
      45, 10, 20, 71, 101, 116, 83, 117, 98, 99, 104, 97, 110,
      110, 101, 108, 82, 101, 113, 117, 101, 115, 116, 18, 21,
      10, 13, 115, 117, 98, 99, 104, 97, 110, 110, 101, 108,
      95, 105, 100, 24, 1, 32, 1, 40, 3, 34, 73, 10, 21, 71,
      101, 116, 83, 117, 98, 99, 104, 97, 110, 110, 101, 108,
      82, 101, 115, 112, 111, 110, 115, 101, 18, 48, 10, 10,
      115, 117, 98, 99, 104, 97, 110, 110, 101, 108, 24, 1,
      32, 1, 40, 11, 50, 28, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 34, 70, 10,
      21, 71, 101, 116, 84, 111, 112, 67, 104, 97, 110, 110,
      101, 108, 115, 82, 101, 113, 117, 101, 115, 116, 18, 24,
      10, 16, 115, 116, 97, 114, 116, 95, 99, 104, 97, 110,
      110, 101, 108, 95, 105, 100, 24, 1, 32, 1, 40, 3, 18,
      19, 10, 11, 109, 97, 120, 95, 114, 101, 115, 117, 108,
      116, 115, 24, 2, 32, 1, 40, 3, 34, 81, 10, 22, 71, 101,
      116, 84, 111, 112, 67, 104, 97, 110, 110, 101, 108, 115,
      82, 101, 115, 112, 111, 110, 115, 101, 18, 42, 10, 7,
      99, 104, 97, 110, 110, 101, 108, 24, 1, 32, 3, 40, 11,
      50, 25, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97, 110,
      110, 101, 108, 18, 11, 10, 3, 101, 110, 100, 24, 2, 32,
      1, 40, 8, 34, 190, 2, 10, 8, 83, 101, 99, 117, 114, 105,
      116, 121, 18, 45, 10, 3, 116, 108, 115, 24, 1, 32, 1,
      40, 11, 50, 30, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 83, 101, 99,
      117, 114, 105, 116, 121, 46, 84, 108, 115, 72, 0, 18,
      57, 10, 5, 111, 116, 104, 101, 114, 24, 2, 32, 1, 40,
      11, 50, 40, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 83, 101, 99, 117,
      114, 105, 116, 121, 46, 79, 116, 104, 101, 114, 83, 101,
      99, 117, 114, 105, 116, 121, 72, 0, 26, 66, 10, 13, 79,
      116, 104, 101, 114, 83, 101, 99, 117, 114, 105, 116,
      121, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40,
      9, 18, 35, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1,
      40, 11, 50, 20, 46, 103, 111, 111, 103, 108, 101, 46,
      112, 114, 111, 116, 111, 98, 117, 102, 46, 65, 110, 121,
      26, 123, 10, 3, 84, 108, 115, 18, 23, 10, 13, 115, 116,
      97, 110, 100, 97, 114, 100, 95, 110, 97, 109, 101, 24,
      1, 32, 1, 40, 9, 72, 0, 18, 20, 10, 10, 111, 116, 104,
      101, 114, 95, 110, 97, 109, 101, 24, 2, 32, 1, 40, 9,
      72, 0, 18, 25, 10, 17, 108, 111, 99, 97, 108, 95, 99,
      101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 24, 3,
      32, 1, 40, 12, 18, 26, 10, 18, 114, 101, 109, 111, 116,
      101, 95, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116,
      101, 24, 4, 32, 1, 40, 12, 66, 14, 10, 12, 99, 105, 112,
      104, 101, 114, 95, 115, 117, 105, 116, 101, 66, 7, 10,
      5, 109, 111, 100, 101, 108, 34, 146, 1, 10, 6, 83, 101,
      114, 118, 101, 114, 18, 40, 10, 3, 114, 101, 102, 24, 1,
      32, 1, 40, 11, 50, 27, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      101, 114, 118, 101, 114, 82, 101, 102, 18, 42, 10, 4,
      100, 97, 116, 97, 24, 2, 32, 1, 40, 11, 50, 28, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 83, 101, 114, 118, 101, 114, 68, 97,
      116, 97, 18, 50, 10, 13, 108, 105, 115, 116, 101, 110,
      95, 115, 111, 99, 107, 101, 116, 24, 3, 32, 3, 40, 11,
      50, 27, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 83, 111, 99, 107,
      101, 116, 82, 101, 102, 34, 194, 1, 10, 10, 83, 101,
      114, 118, 101, 114, 68, 97, 116, 97, 18, 45, 10, 5, 116,
      114, 97, 99, 101, 24, 1, 32, 1, 40, 11, 50, 30, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 67, 104, 97, 110, 110, 101, 108, 84,
      114, 97, 99, 101, 18, 21, 10, 13, 99, 97, 108, 108, 115,
      95, 115, 116, 97, 114, 116, 101, 100, 24, 2, 32, 1, 40,
      3, 18, 23, 10, 15, 99, 97, 108, 108, 115, 95, 115, 117,
      99, 99, 101, 101, 100, 101, 100, 24, 3, 32, 1, 40, 3,
      18, 20, 10, 12, 99, 97, 108, 108, 115, 95, 102, 97, 105,
      108, 101, 100, 24, 4, 32, 1, 40, 3, 18, 63, 10, 27, 108,
      97, 115, 116, 95, 99, 97, 108, 108, 95, 115, 116, 97,
      114, 116, 101, 100, 95, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 5, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 34, 44, 10, 9, 83, 101, 114, 118, 101, 114, 82,
      101, 102, 18, 17, 10, 9, 115, 101, 114, 118, 101, 114,
      95, 105, 100, 24, 5, 32, 1, 40, 3, 18, 12, 10, 4, 110,
      97, 109, 101, 24, 6, 32, 1, 40, 9, 34, 246, 1, 10, 6,
      83, 111, 99, 107, 101, 116, 18, 40, 10, 3, 114, 101,
      102, 24, 1, 32, 1, 40, 11, 50, 27, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 83, 111, 99, 107, 101, 116, 82, 101, 102, 18,
      42, 10, 4, 100, 97, 116, 97, 24, 2, 32, 1, 40, 11, 50,
      28, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 83, 111, 99, 107, 101,
      116, 68, 97, 116, 97, 18, 40, 10, 5, 108, 111, 99, 97,
      108, 24, 3, 32, 1, 40, 11, 50, 25, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 65, 100, 100, 114, 101, 115, 115, 18, 41, 10, 6,
      114, 101, 109, 111, 116, 101, 24, 4, 32, 1, 40, 11, 50,
      25, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 65, 100, 100, 114, 101,
      115, 115, 18, 44, 10, 8, 115, 101, 99, 117, 114, 105,
      116, 121, 24, 5, 32, 1, 40, 11, 50, 26, 46, 103, 114,
      112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46,
      118, 49, 46, 83, 101, 99, 117, 114, 105, 116, 121, 18,
      19, 10, 11, 114, 101, 109, 111, 116, 101, 95, 110, 97,
      109, 101, 24, 6, 32, 1, 40, 9, 34, 238, 4, 10, 10, 83,
      111, 99, 107, 101, 116, 68, 97, 116, 97, 18, 23, 10, 15,
      115, 116, 114, 101, 97, 109, 115, 95, 115, 116, 97, 114,
      116, 101, 100, 24, 1, 32, 1, 40, 3, 18, 25, 10, 17, 115,
      116, 114, 101, 97, 109, 115, 95, 115, 117, 99, 99, 101,
      101, 100, 101, 100, 24, 2, 32, 1, 40, 3, 18, 22, 10, 14,
      115, 116, 114, 101, 97, 109, 115, 95, 102, 97, 105, 108,
      101, 100, 24, 3, 32, 1, 40, 3, 18, 21, 10, 13, 109, 101,
      115, 115, 97, 103, 101, 115, 95, 115, 101, 110, 116, 24,
      4, 32, 1, 40, 3, 18, 25, 10, 17, 109, 101, 115, 115, 97,
      103, 101, 115, 95, 114, 101, 99, 101, 105, 118, 101,
      100, 24, 5, 32, 1, 40, 3, 18, 24, 10, 16, 107, 101, 101,
      112, 95, 97, 108, 105, 118, 101, 115, 95, 115, 101, 110,
      116, 24, 6, 32, 1, 40, 3, 18, 71, 10, 35, 108, 97, 115,
      116, 95, 108, 111, 99, 97, 108, 95, 115, 116, 114, 101,
      97, 109, 95, 99, 114, 101, 97, 116, 101, 100, 95, 116,
      105, 109, 101, 115, 116, 97, 109, 112, 24, 7, 32, 1, 40,
      11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112,
      114, 111, 116, 111, 98, 117, 102, 46, 84, 105, 109, 101,
      115, 116, 97, 109, 112, 18, 72, 10, 36, 108, 97, 115,
      116, 95, 114, 101, 109, 111, 116, 101, 95, 115, 116,
      114, 101, 97, 109, 95, 99, 114, 101, 97, 116, 101, 100,
      95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 24, 8,
      32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101,
      46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 84, 105,
      109, 101, 115, 116, 97, 109, 112, 18, 63, 10, 27, 108,
      97, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95,
      115, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 9, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 18, 67, 10, 31, 108, 97, 115, 116, 95, 109, 101,
      115, 115, 97, 103, 101, 95, 114, 101, 99, 101, 105, 118,
      101, 100, 95, 116, 105, 109, 101, 115, 116, 97, 109,
      112, 24, 10, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 112, 18,
      62, 10, 25, 108, 111, 99, 97, 108, 95, 102, 108, 111,
      119, 95, 99, 111, 110, 116, 114, 111, 108, 95, 119, 105,
      110, 100, 111, 119, 24, 11, 32, 1, 40, 11, 50, 27, 46,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 46, 73, 110, 116, 54, 52, 86, 97,
      108, 117, 101, 18, 63, 10, 26, 114, 101, 109, 111, 116,
      101, 95, 102, 108, 111, 119, 95, 99, 111, 110, 116, 114,
      111, 108, 95, 119, 105, 110, 100, 111, 119, 24, 12, 32,
      1, 40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46,
      112, 114, 111, 116, 111, 98, 117, 102, 46, 73, 110, 116,
      54, 52, 86, 97, 108, 117, 101, 18, 46, 10, 6, 111, 112,
      116, 105, 111, 110, 24, 13, 32, 3, 40, 11, 50, 30, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 83, 111, 99, 107, 101, 116, 79,
      112, 116, 105, 111, 110, 34, 85, 10, 12, 83, 111, 99,
      107, 101, 116, 79, 112, 116, 105, 111, 110, 18, 12, 10,
      4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 18, 13, 10,
      5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 9, 18, 40,
      10, 10, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108,
      24, 3, 32, 1, 40, 11, 50, 20, 46, 103, 111, 111, 103,
      108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46,
      65, 110, 121, 34, 81, 10, 18, 83, 111, 99, 107, 101,
      116, 79, 112, 116, 105, 111, 110, 76, 105, 110, 103,
      101, 114, 18, 14, 10, 6, 97, 99, 116, 105, 118, 101, 24,
      1, 32, 1, 40, 8, 18, 43, 10, 8, 100, 117, 114, 97, 116,
      105, 111, 110, 24, 2, 32, 1, 40, 11, 50, 25, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 68, 117, 114, 97, 116, 105, 111, 110,
      34, 174, 5, 10, 19, 83, 111, 99, 107, 101, 116, 79, 112,
      116, 105, 111, 110, 84, 99, 112, 73, 110, 102, 111, 18,
      18, 10, 10, 116, 99, 112, 105, 95, 115, 116, 97, 116,
      101, 24, 1, 32, 1, 40, 13, 18, 21, 10, 13, 116, 99, 112,
      105, 95, 99, 97, 95, 115, 116, 97, 116, 101, 24, 2, 32,
      1, 40, 13, 18, 24, 10, 16, 116, 99, 112, 105, 95, 114,
      101, 116, 114, 97, 110, 115, 109, 105, 116, 115, 24, 3,
      32, 1, 40, 13, 18, 19, 10, 11, 116, 99, 112, 105, 95,
      112, 114, 111, 98, 101, 115, 24, 4, 32, 1, 40, 13, 18,
      20, 10, 12, 116, 99, 112, 105, 95, 98, 97, 99, 107, 111,
      102, 102, 24, 5, 32, 1, 40, 13, 18, 20, 10, 12, 116, 99,
      112, 105, 95, 111, 112, 116, 105, 111, 110, 115, 24, 6,
      32, 1, 40, 13, 18, 23, 10, 15, 116, 99, 112, 105, 95,
      115, 110, 100, 95, 119, 115, 99, 97, 108, 101, 24, 7,
      32, 1, 40, 13, 18, 23, 10, 15, 116, 99, 112, 105, 95,
      114, 99, 118, 95, 119, 115, 99, 97, 108, 101, 24, 8, 32,
      1, 40, 13, 18, 16, 10, 8, 116, 99, 112, 105, 95, 114,
      116, 111, 24, 9, 32, 1, 40, 13, 18, 16, 10, 8, 116, 99,
      112, 105, 95, 97, 116, 111, 24, 10, 32, 1, 40, 13, 18,
      20, 10, 12, 116, 99, 112, 105, 95, 115, 110, 100, 95,
      109, 115, 115, 24, 11, 32, 1, 40, 13, 18, 20, 10, 12,
      116, 99, 112, 105, 95, 114, 99, 118, 95, 109, 115, 115,
      24, 12, 32, 1, 40, 13, 18, 20, 10, 12, 116, 99, 112,
      105, 95, 117, 110, 97, 99, 107, 101, 100, 24, 13, 32, 1,
      40, 13, 18, 19, 10, 11, 116, 99, 112, 105, 95, 115, 97,
      99, 107, 101, 100, 24, 14, 32, 1, 40, 13, 18, 17, 10, 9,
      116, 99, 112, 105, 95, 108, 111, 115, 116, 24, 15, 32,
      1, 40, 13, 18, 20, 10, 12, 116, 99, 112, 105, 95, 114,
      101, 116, 114, 97, 110, 115, 24, 16, 32, 1, 40, 13, 18,
      20, 10, 12, 116, 99, 112, 105, 95, 102, 97, 99, 107,
      101, 116, 115, 24, 17, 32, 1, 40, 13, 18, 27, 10, 19,
      116, 99, 112, 105, 95, 108, 97, 115, 116, 95, 100, 97,
      116, 97, 95, 115, 101, 110, 116, 24, 18, 32, 1, 40, 13,
      18, 26, 10, 18, 116, 99, 112, 105, 95, 108, 97, 115,
      116, 95, 97, 99, 107, 95, 115, 101, 110, 116, 24, 19,
      32, 1, 40, 13, 18, 27, 10, 19, 116, 99, 112, 105, 95,
      108, 97, 115, 116, 95, 100, 97, 116, 97, 95, 114, 101,
      99, 118, 24, 20, 32, 1, 40, 13, 18, 26, 10, 18, 116, 99,
      112, 105, 95, 108, 97, 115, 116, 95, 97, 99, 107, 95,
      114, 101, 99, 118, 24, 21, 32, 1, 40, 13, 18, 17, 10, 9,
      116, 99, 112, 105, 95, 112, 109, 116, 117, 24, 22, 32,
      1, 40, 13, 18, 25, 10, 17, 116, 99, 112, 105, 95, 114,
      99, 118, 95, 115, 115, 116, 104, 114, 101, 115, 104, 24,
      23, 32, 1, 40, 13, 18, 16, 10, 8, 116, 99, 112, 105, 95,
      114, 116, 116, 24, 24, 32, 1, 40, 13, 18, 19, 10, 11,
      116, 99, 112, 105, 95, 114, 116, 116, 118, 97, 114, 24,
      25, 32, 1, 40, 13, 18, 25, 10, 17, 116, 99, 112, 105,
      95, 115, 110, 100, 95, 115, 115, 116, 104, 114, 101,
      115, 104, 24, 26, 32, 1, 40, 13, 18, 21, 10, 13, 116,
      99, 112, 105, 95, 115, 110, 100, 95, 99, 119, 110, 100,
      24, 27, 32, 1, 40, 13, 18, 19, 10, 11, 116, 99, 112,
      105, 95, 97, 100, 118, 109, 115, 115, 24, 28, 32, 1, 40,
      13, 18, 23, 10, 15, 116, 99, 112, 105, 95, 114, 101,
      111, 114, 100, 101, 114, 105, 110, 103, 24, 29, 32, 1,
      40, 13, 34, 66, 10, 19, 83, 111, 99, 107, 101, 116, 79,
      112, 116, 105, 111, 110, 84, 105, 109, 101, 111, 117,
      116, 18, 43, 10, 8, 100, 117, 114, 97, 116, 105, 111,
      110, 24, 1, 32, 1, 40, 11, 50, 25, 46, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 46, 68, 117, 114, 97, 116, 105, 111, 110, 34, 44,
      10, 9, 83, 111, 99, 107, 101, 116, 82, 101, 102, 18, 17,
      10, 9, 115, 111, 99, 107, 101, 116, 95, 105, 100, 24, 3,
      32, 1, 40, 3, 18, 12, 10, 4, 110, 97, 109, 101, 24, 4,
      32, 1, 40, 9, 34, 132, 2, 10, 10, 83, 117, 98, 99, 104,
      97, 110, 110, 101, 108, 18, 44, 10, 3, 114, 101, 102,
      24, 1, 32, 1, 40, 11, 50, 31, 46, 103, 114, 112, 99, 46,
      99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46,
      83, 117, 98, 99, 104, 97, 110, 110, 101, 108, 82, 101,
      102, 18, 43, 10, 4, 100, 97, 116, 97, 24, 2, 32, 1, 40,
      11, 50, 29, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97, 110,
      110, 101, 108, 68, 97, 116, 97, 18, 49, 10, 11, 99, 104,
      97, 110, 110, 101, 108, 95, 114, 101, 102, 24, 3, 32, 3,
      40, 11, 50, 28, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97,
      110, 110, 101, 108, 82, 101, 102, 18, 55, 10, 14, 115,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 95, 114, 101,
      102, 24, 4, 32, 3, 40, 11, 50, 31, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 83, 117, 98, 99, 104, 97, 110, 110, 101, 108,
      82, 101, 102, 18, 47, 10, 10, 115, 111, 99, 107, 101,
      116, 95, 114, 101, 102, 24, 5, 32, 3, 40, 11, 50, 27,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 83, 111, 99, 107, 101, 116,
      82, 101, 102, 34, 52, 10, 13, 83, 117, 98, 99, 104, 97,
      110, 110, 101, 108, 82, 101, 102, 18, 21, 10, 13, 115,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 95, 105, 100,
      24, 7, 32, 1, 40, 3, 18, 12, 10, 4, 110, 97, 109, 101,
      24, 8, 32, 1, 40, 9, 50, 182, 5, 10, 8, 67, 104, 97,
      110, 110, 101, 108, 122, 18, 103, 10, 14, 71, 101, 116,
      84, 111, 112, 67, 104, 97, 110, 110, 101, 108, 115, 18,
      39, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 71, 101, 116, 84, 111,
      112, 67, 104, 97, 110, 110, 101, 108, 115, 82, 101, 113,
      117, 101, 115, 116, 26, 40, 46, 103, 114, 112, 99, 46,
      99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46,
      71, 101, 116, 84, 111, 112, 67, 104, 97, 110, 110, 101,
      108, 115, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0,
      48, 0, 18, 91, 10, 10, 71, 101, 116, 83, 101, 114, 118,
      101, 114, 115, 18, 35, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 71,
      101, 116, 83, 101, 114, 118, 101, 114, 115, 82, 101,
      113, 117, 101, 115, 116, 26, 36, 46, 103, 114, 112, 99,
      46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49,
      46, 71, 101, 116, 83, 101, 114, 118, 101, 114, 115, 82,
      101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 88,
      10, 9, 71, 101, 116, 83, 101, 114, 118, 101, 114, 18,
      34, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 71, 101, 116, 83, 101,
      114, 118, 101, 114, 82, 101, 113, 117, 101, 115, 116,
      26, 35, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 71, 101, 116, 83,
      101, 114, 118, 101, 114, 82, 101, 115, 112, 111, 110,
      115, 101, 40, 0, 48, 0, 18, 109, 10, 16, 71, 101, 116,
      83, 101, 114, 118, 101, 114, 83, 111, 99, 107, 101, 116,
      115, 18, 41, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 71, 101, 116,
      83, 101, 114, 118, 101, 114, 83, 111, 99, 107, 101, 116,
      115, 82, 101, 113, 117, 101, 115, 116, 26, 42, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 71, 101, 116, 83, 101, 114, 118, 101,
      114, 83, 111, 99, 107, 101, 116, 115, 82, 101, 115, 112,
      111, 110, 115, 101, 40, 0, 48, 0, 18, 91, 10, 10, 71,
      101, 116, 67, 104, 97, 110, 110, 101, 108, 18, 35, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 71, 101, 116, 67, 104, 97, 110,
      110, 101, 108, 82, 101, 113, 117, 101, 115, 116, 26, 36,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 71, 101, 116, 67, 104, 97,
      110, 110, 101, 108, 82, 101, 115, 112, 111, 110, 115,
      101, 40, 0, 48, 0, 18, 100, 10, 13, 71, 101, 116, 83,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 18, 38, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 71, 101, 116, 83, 117, 98, 99,
      104, 97, 110, 110, 101, 108, 82, 101, 113, 117, 101,
      115, 116, 26, 39, 46, 103, 114, 112, 99, 46, 99, 104,
      97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 71, 101,
      116, 83, 117, 98, 99, 104, 97, 110, 110, 101, 108, 82,
      101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 88,
      10, 9, 71, 101, 116, 83, 111, 99, 107, 101, 116, 18, 34,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 71, 101, 116, 83, 111, 99,
      107, 101, 116, 82, 101, 113, 117, 101, 115, 116, 26, 35,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 71, 101, 116, 83, 111, 99,
      107, 101, 116, 82, 101, 115, 112, 111, 110, 115, 101,
      40, 0, 48, 0, 98, 6, 112, 114, 111, 116, 111, 51, 10,
      92, 10, 25, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 97, 110, 121, 46, 112,
      114, 111, 116, 111, 18, 15, 103, 111, 111, 103, 108,
      101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34, 38,
      10, 3, 65, 110, 121, 18, 16, 10, 8, 116, 121, 112, 101,
      95, 117, 114, 108, 24, 1, 32, 1, 40, 9, 18, 13, 10, 5,
      118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 12, 98, 6,
      112, 114, 111, 116, 111, 51, 10, 101, 10, 30, 103, 111,
      111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98,
      117, 102, 47, 100, 117, 114, 97, 116, 105, 111, 110, 46,
      112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103,
      108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34,
      42, 10, 8, 68, 117, 114, 97, 116, 105, 111, 110, 18, 15,
      10, 7, 115, 101, 99, 111, 110, 100, 115, 24, 1, 32, 1,
      40, 3, 18, 13, 10, 5, 110, 97, 110, 111, 115, 24, 2, 32,
      1, 40, 5, 98, 6, 112, 114, 111, 116, 111, 51, 10, 103,
      10, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111,
      116, 111, 98, 117, 102, 47, 116, 105, 109, 101, 115,
      116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 18, 15,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 34, 43, 10, 9, 84, 105, 109, 101,
      115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101, 99,
      111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13, 10, 5,
      110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112,
      114, 111, 116, 111, 51, 10, 193, 2, 10, 30, 103, 111,
      111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98,
      117, 102, 47, 119, 114, 97, 112, 112, 101, 114, 115, 46,
      112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103,
      108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34,
      26, 10, 9, 66, 111, 111, 108, 86, 97, 108, 117, 101, 18,
      13, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 8,
      34, 27, 10, 10, 66, 121, 116, 101, 115, 86, 97, 108,
      117, 101, 18, 13, 10, 5, 118, 97, 108, 117, 101, 24, 1,
      32, 1, 40, 12, 34, 28, 10, 11, 68, 111, 117, 98, 108,
      101, 86, 97, 108, 117, 101, 18, 13, 10, 5, 118, 97, 108,
      117, 101, 24, 1, 32, 1, 40, 1, 34, 27, 10, 10, 70, 108,
      111, 97, 116, 86, 97, 108, 117, 101, 18, 13, 10, 5, 118,
      97, 108, 117, 101, 24, 1, 32, 1, 40, 2, 34, 27, 10, 10,
      73, 110, 116, 51, 50, 86, 97, 108, 117, 101, 18, 13, 10,
      5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 5, 34, 27,
      10, 10, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 18,
      13, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 3,
      34, 28, 10, 11, 83, 116, 114, 105, 110, 103, 86, 97,
      108, 117, 101, 18, 13, 10, 5, 118, 97, 108, 117, 101,
      24, 1, 32, 1, 40, 9, 34, 28, 10, 11, 85, 73, 110, 116,
      51, 50, 86, 97, 108, 117, 101, 18, 13, 10, 5, 118, 97,
      108, 117, 101, 24, 1, 32, 1, 40, 13, 34, 28, 10, 11, 85,
      73, 110, 116, 54, 52, 86, 97, 108, 117, 101, 18, 13, 10,
      5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 4, 98, 6,
      112, 114, 111, 116, 111, 51>>.

descriptor("channelz") ->
    <<10, 31, 103, 114, 112, 99, 47, 99, 104, 97, 110, 110,
      101, 108, 122, 47, 118, 49, 47, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 112, 114, 111, 116, 111, 18, 16, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 34, 232, 2, 10, 7, 65, 100, 100, 114, 101,
      115, 115, 18, 63, 10, 13, 116, 99, 112, 105, 112, 95,
      97, 100, 100, 114, 101, 115, 115, 24, 1, 32, 1, 40, 11,
      50, 38, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 65, 100, 100, 114,
      101, 115, 115, 46, 84, 99, 112, 73, 112, 65, 100, 100,
      114, 101, 115, 115, 72, 0, 18, 59, 10, 11, 117, 100,
      115, 95, 97, 100, 100, 114, 101, 115, 115, 24, 2, 32, 1,
      40, 11, 50, 36, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 65, 100, 100,
      114, 101, 115, 115, 46, 85, 100, 115, 65, 100, 100, 114,
      101, 115, 115, 72, 0, 18, 63, 10, 13, 111, 116, 104,
      101, 114, 95, 97, 100, 100, 114, 101, 115, 115, 24, 3,
      32, 1, 40, 11, 50, 38, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 65,
      100, 100, 114, 101, 115, 115, 46, 79, 116, 104, 101,
      114, 65, 100, 100, 114, 101, 115, 115, 72, 0, 26, 65,
      10, 12, 79, 116, 104, 101, 114, 65, 100, 100, 114, 101,
      115, 115, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32,
      1, 40, 9, 18, 35, 10, 5, 118, 97, 108, 117, 101, 24, 2,
      32, 1, 40, 11, 50, 20, 46, 103, 111, 111, 103, 108, 101,
      46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 65, 110,
      121, 26, 48, 10, 12, 84, 99, 112, 73, 112, 65, 100, 100,
      114, 101, 115, 115, 18, 18, 10, 10, 105, 112, 95, 97,
      100, 100, 114, 101, 115, 115, 24, 1, 32, 1, 40, 12, 18,
      12, 10, 4, 112, 111, 114, 116, 24, 2, 32, 1, 40, 5, 26,
      30, 10, 10, 85, 100, 115, 65, 100, 100, 114, 101, 115,
      115, 18, 16, 10, 8, 102, 105, 108, 101, 110, 97, 109,
      101, 24, 1, 32, 1, 40, 9, 66, 9, 10, 7, 97, 100, 100,
      114, 101, 115, 115, 34, 254, 1, 10, 7, 67, 104, 97, 110,
      110, 101, 108, 18, 41, 10, 3, 114, 101, 102, 24, 1, 32,
      1, 40, 11, 50, 28, 46, 103, 114, 112, 99, 46, 99, 104,
      97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 67, 104,
      97, 110, 110, 101, 108, 82, 101, 102, 18, 43, 10, 4,
      100, 97, 116, 97, 24, 2, 32, 1, 40, 11, 50, 29, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 67, 104, 97, 110, 110, 101, 108, 68,
      97, 116, 97, 18, 49, 10, 11, 99, 104, 97, 110, 110, 101,
      108, 95, 114, 101, 102, 24, 3, 32, 3, 40, 11, 50, 28,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 67, 104, 97, 110, 110, 101,
      108, 82, 101, 102, 18, 55, 10, 14, 115, 117, 98, 99,
      104, 97, 110, 110, 101, 108, 95, 114, 101, 102, 24, 4,
      32, 3, 40, 11, 50, 31, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 82, 101, 102,
      18, 47, 10, 10, 115, 111, 99, 107, 101, 116, 95, 114,
      101, 102, 24, 5, 32, 3, 40, 11, 50, 27, 46, 103, 114,
      112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46,
      118, 49, 46, 83, 111, 99, 107, 101, 116, 82, 101, 102,
      34, 187, 1, 10, 24, 67, 104, 97, 110, 110, 101, 108, 67,
      111, 110, 110, 101, 99, 116, 105, 118, 105, 116, 121,
      83, 116, 97, 116, 101, 18, 63, 10, 5, 115, 116, 97, 116,
      101, 24, 1, 32, 1, 40, 14, 50, 48, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 67, 104, 97, 110, 110, 101, 108, 67, 111, 110,
      110, 101, 99, 116, 105, 118, 105, 116, 121, 83, 116, 97,
      116, 101, 46, 83, 116, 97, 116, 101, 34, 94, 10, 5, 83,
      116, 97, 116, 101, 18, 11, 10, 7, 85, 78, 75, 78, 79,
      87, 78, 16, 0, 18, 8, 10, 4, 73, 68, 76, 69, 16, 1, 18,
      14, 10, 10, 67, 79, 78, 78, 69, 67, 84, 73, 78, 71, 16,
      2, 18, 9, 10, 5, 82, 69, 65, 68, 89, 16, 3, 18, 21, 10,
      17, 84, 82, 65, 78, 83, 73, 69, 78, 84, 95, 70, 65, 73,
      76, 85, 82, 69, 16, 4, 18, 12, 10, 8, 83, 72, 85, 84,
      68, 79, 87, 78, 16, 5, 34, 142, 2, 10, 11, 67, 104, 97,
      110, 110, 101, 108, 68, 97, 116, 97, 18, 57, 10, 5, 115,
      116, 97, 116, 101, 24, 1, 32, 1, 40, 11, 50, 42, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 67, 104, 97, 110, 110, 101, 108,
      67, 111, 110, 110, 101, 99, 116, 105, 118, 105, 116,
      121, 83, 116, 97, 116, 101, 18, 14, 10, 6, 116, 97, 114,
      103, 101, 116, 24, 2, 32, 1, 40, 9, 18, 45, 10, 5, 116,
      114, 97, 99, 101, 24, 3, 32, 1, 40, 11, 50, 30, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 67, 104, 97, 110, 110, 101, 108, 84,
      114, 97, 99, 101, 18, 21, 10, 13, 99, 97, 108, 108, 115,
      95, 115, 116, 97, 114, 116, 101, 100, 24, 4, 32, 1, 40,
      3, 18, 23, 10, 15, 99, 97, 108, 108, 115, 95, 115, 117,
      99, 99, 101, 101, 100, 101, 100, 24, 5, 32, 1, 40, 3,
      18, 20, 10, 12, 99, 97, 108, 108, 115, 95, 102, 97, 105,
      108, 101, 100, 24, 6, 32, 1, 40, 3, 18, 63, 10, 27, 108,
      97, 115, 116, 95, 99, 97, 108, 108, 95, 115, 116, 97,
      114, 116, 101, 100, 95, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 7, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 34, 46, 10, 10, 67, 104, 97, 110, 110, 101, 108,
      82, 101, 102, 18, 18, 10, 10, 99, 104, 97, 110, 110,
      101, 108, 95, 105, 100, 24, 1, 32, 1, 40, 3, 18, 12, 10,
      4, 110, 97, 109, 101, 24, 2, 32, 1, 40, 9, 34, 150, 1,
      10, 12, 67, 104, 97, 110, 110, 101, 108, 84, 114, 97,
      99, 101, 18, 25, 10, 17, 110, 117, 109, 95, 101, 118,
      101, 110, 116, 115, 95, 108, 111, 103, 103, 101, 100,
      24, 1, 32, 1, 40, 3, 18, 54, 10, 18, 99, 114, 101, 97,
      116, 105, 111, 110, 95, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 2, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 18, 51, 10, 6, 101, 118, 101, 110, 116, 115, 24, 3,
      32, 3, 40, 11, 50, 35, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 67,
      104, 97, 110, 110, 101, 108, 84, 114, 97, 99, 101, 69,
      118, 101, 110, 116, 34, 219, 2, 10, 17, 67, 104, 97,
      110, 110, 101, 108, 84, 114, 97, 99, 101, 69, 118, 101,
      110, 116, 18, 19, 10, 11, 100, 101, 115, 99, 114, 105,
      112, 116, 105, 111, 110, 24, 1, 32, 1, 40, 9, 18, 62,
      10, 8, 115, 101, 118, 101, 114, 105, 116, 121, 24, 2,
      32, 1, 40, 14, 50, 44, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 67,
      104, 97, 110, 110, 101, 108, 84, 114, 97, 99, 101, 69,
      118, 101, 110, 116, 46, 83, 101, 118, 101, 114, 105,
      116, 121, 18, 45, 10, 9, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 3, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 18, 51, 10, 11, 99, 104, 97, 110, 110, 101, 108,
      95, 114, 101, 102, 24, 4, 32, 1, 40, 11, 50, 28, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 67, 104, 97, 110, 110, 101, 108,
      82, 101, 102, 72, 0, 18, 57, 10, 14, 115, 117, 98, 99,
      104, 97, 110, 110, 101, 108, 95, 114, 101, 102, 24, 5,
      32, 1, 40, 11, 50, 31, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 82, 101, 102,
      72, 0, 34, 69, 10, 8, 83, 101, 118, 101, 114, 105, 116,
      121, 18, 14, 10, 10, 67, 84, 95, 85, 78, 75, 78, 79, 87,
      78, 16, 0, 18, 11, 10, 7, 67, 84, 95, 73, 78, 70, 79,
      16, 1, 18, 14, 10, 10, 67, 84, 95, 87, 65, 82, 78, 73,
      78, 71, 16, 2, 18, 12, 10, 8, 67, 84, 95, 69, 82, 82,
      79, 82, 16, 3, 66, 11, 10, 9, 99, 104, 105, 108, 100,
      95, 114, 101, 102, 34, 39, 10, 17, 71, 101, 116, 67,
      104, 97, 110, 110, 101, 108, 82, 101, 113, 117, 101,
      115, 116, 18, 18, 10, 10, 99, 104, 97, 110, 110, 101,
      108, 95, 105, 100, 24, 1, 32, 1, 40, 3, 34, 64, 10, 18,
      71, 101, 116, 67, 104, 97, 110, 110, 101, 108, 82, 101,
      115, 112, 111, 110, 115, 101, 18, 42, 10, 7, 99, 104,
      97, 110, 110, 101, 108, 24, 1, 32, 1, 40, 11, 50, 25,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 67, 104, 97, 110, 110, 101,
      108, 34, 37, 10, 16, 71, 101, 116, 83, 101, 114, 118,
      101, 114, 82, 101, 113, 117, 101, 115, 116, 18, 17, 10,
      9, 115, 101, 114, 118, 101, 114, 95, 105, 100, 24, 1,
      32, 1, 40, 3, 34, 61, 10, 17, 71, 101, 116, 83, 101,
      114, 118, 101, 114, 82, 101, 115, 112, 111, 110, 115,
      101, 18, 40, 10, 6, 115, 101, 114, 118, 101, 114, 24, 1,
      32, 1, 40, 11, 50, 24, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      101, 114, 118, 101, 114, 34, 90, 10, 23, 71, 101, 116,
      83, 101, 114, 118, 101, 114, 83, 111, 99, 107, 101, 116,
      115, 82, 101, 113, 117, 101, 115, 116, 18, 17, 10, 9,
      115, 101, 114, 118, 101, 114, 95, 105, 100, 24, 1, 32,
      1, 40, 3, 18, 23, 10, 15, 115, 116, 97, 114, 116, 95,
      115, 111, 99, 107, 101, 116, 95, 105, 100, 24, 2, 32, 1,
      40, 3, 18, 19, 10, 11, 109, 97, 120, 95, 114, 101, 115,
      117, 108, 116, 115, 24, 3, 32, 1, 40, 3, 34, 88, 10, 24,
      71, 101, 116, 83, 101, 114, 118, 101, 114, 83, 111, 99,
      107, 101, 116, 115, 82, 101, 115, 112, 111, 110, 115,
      101, 18, 47, 10, 10, 115, 111, 99, 107, 101, 116, 95,
      114, 101, 102, 24, 1, 32, 3, 40, 11, 50, 27, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 83, 111, 99, 107, 101, 116, 82, 101,
      102, 18, 11, 10, 3, 101, 110, 100, 24, 2, 32, 1, 40, 8,
      34, 65, 10, 17, 71, 101, 116, 83, 101, 114, 118, 101,
      114, 115, 82, 101, 113, 117, 101, 115, 116, 18, 23, 10,
      15, 115, 116, 97, 114, 116, 95, 115, 101, 114, 118, 101,
      114, 95, 105, 100, 24, 1, 32, 1, 40, 3, 18, 19, 10, 11,
      109, 97, 120, 95, 114, 101, 115, 117, 108, 116, 115, 24,
      2, 32, 1, 40, 3, 34, 75, 10, 18, 71, 101, 116, 83, 101,
      114, 118, 101, 114, 115, 82, 101, 115, 112, 111, 110,
      115, 101, 18, 40, 10, 6, 115, 101, 114, 118, 101, 114,
      24, 1, 32, 3, 40, 11, 50, 24, 46, 103, 114, 112, 99, 46,
      99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46,
      83, 101, 114, 118, 101, 114, 18, 11, 10, 3, 101, 110,
      100, 24, 2, 32, 1, 40, 8, 34, 54, 10, 16, 71, 101, 116,
      83, 111, 99, 107, 101, 116, 82, 101, 113, 117, 101, 115,
      116, 18, 17, 10, 9, 115, 111, 99, 107, 101, 116, 95,
      105, 100, 24, 1, 32, 1, 40, 3, 18, 15, 10, 7, 115, 117,
      109, 109, 97, 114, 121, 24, 2, 32, 1, 40, 8, 34, 61, 10,
      17, 71, 101, 116, 83, 111, 99, 107, 101, 116, 82, 101,
      115, 112, 111, 110, 115, 101, 18, 40, 10, 6, 115, 111,
      99, 107, 101, 116, 24, 1, 32, 1, 40, 11, 50, 24, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 83, 111, 99, 107, 101, 116, 34,
      45, 10, 20, 71, 101, 116, 83, 117, 98, 99, 104, 97, 110,
      110, 101, 108, 82, 101, 113, 117, 101, 115, 116, 18, 21,
      10, 13, 115, 117, 98, 99, 104, 97, 110, 110, 101, 108,
      95, 105, 100, 24, 1, 32, 1, 40, 3, 34, 73, 10, 21, 71,
      101, 116, 83, 117, 98, 99, 104, 97, 110, 110, 101, 108,
      82, 101, 115, 112, 111, 110, 115, 101, 18, 48, 10, 10,
      115, 117, 98, 99, 104, 97, 110, 110, 101, 108, 24, 1,
      32, 1, 40, 11, 50, 28, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 34, 70, 10,
      21, 71, 101, 116, 84, 111, 112, 67, 104, 97, 110, 110,
      101, 108, 115, 82, 101, 113, 117, 101, 115, 116, 18, 24,
      10, 16, 115, 116, 97, 114, 116, 95, 99, 104, 97, 110,
      110, 101, 108, 95, 105, 100, 24, 1, 32, 1, 40, 3, 18,
      19, 10, 11, 109, 97, 120, 95, 114, 101, 115, 117, 108,
      116, 115, 24, 2, 32, 1, 40, 3, 34, 81, 10, 22, 71, 101,
      116, 84, 111, 112, 67, 104, 97, 110, 110, 101, 108, 115,
      82, 101, 115, 112, 111, 110, 115, 101, 18, 42, 10, 7,
      99, 104, 97, 110, 110, 101, 108, 24, 1, 32, 3, 40, 11,
      50, 25, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97, 110,
      110, 101, 108, 18, 11, 10, 3, 101, 110, 100, 24, 2, 32,
      1, 40, 8, 34, 190, 2, 10, 8, 83, 101, 99, 117, 114, 105,
      116, 121, 18, 45, 10, 3, 116, 108, 115, 24, 1, 32, 1,
      40, 11, 50, 30, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 83, 101, 99,
      117, 114, 105, 116, 121, 46, 84, 108, 115, 72, 0, 18,
      57, 10, 5, 111, 116, 104, 101, 114, 24, 2, 32, 1, 40,
      11, 50, 40, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 83, 101, 99, 117,
      114, 105, 116, 121, 46, 79, 116, 104, 101, 114, 83, 101,
      99, 117, 114, 105, 116, 121, 72, 0, 26, 66, 10, 13, 79,
      116, 104, 101, 114, 83, 101, 99, 117, 114, 105, 116,
      121, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40,
      9, 18, 35, 10, 5, 118, 97, 108, 117, 101, 24, 2, 32, 1,
      40, 11, 50, 20, 46, 103, 111, 111, 103, 108, 101, 46,
      112, 114, 111, 116, 111, 98, 117, 102, 46, 65, 110, 121,
      26, 123, 10, 3, 84, 108, 115, 18, 23, 10, 13, 115, 116,
      97, 110, 100, 97, 114, 100, 95, 110, 97, 109, 101, 24,
      1, 32, 1, 40, 9, 72, 0, 18, 20, 10, 10, 111, 116, 104,
      101, 114, 95, 110, 97, 109, 101, 24, 2, 32, 1, 40, 9,
      72, 0, 18, 25, 10, 17, 108, 111, 99, 97, 108, 95, 99,
      101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 24, 3,
      32, 1, 40, 12, 18, 26, 10, 18, 114, 101, 109, 111, 116,
      101, 95, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116,
      101, 24, 4, 32, 1, 40, 12, 66, 14, 10, 12, 99, 105, 112,
      104, 101, 114, 95, 115, 117, 105, 116, 101, 66, 7, 10,
      5, 109, 111, 100, 101, 108, 34, 146, 1, 10, 6, 83, 101,
      114, 118, 101, 114, 18, 40, 10, 3, 114, 101, 102, 24, 1,
      32, 1, 40, 11, 50, 27, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 83,
      101, 114, 118, 101, 114, 82, 101, 102, 18, 42, 10, 4,
      100, 97, 116, 97, 24, 2, 32, 1, 40, 11, 50, 28, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 83, 101, 114, 118, 101, 114, 68, 97,
      116, 97, 18, 50, 10, 13, 108, 105, 115, 116, 101, 110,
      95, 115, 111, 99, 107, 101, 116, 24, 3, 32, 3, 40, 11,
      50, 27, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 83, 111, 99, 107,
      101, 116, 82, 101, 102, 34, 194, 1, 10, 10, 83, 101,
      114, 118, 101, 114, 68, 97, 116, 97, 18, 45, 10, 5, 116,
      114, 97, 99, 101, 24, 1, 32, 1, 40, 11, 50, 30, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 67, 104, 97, 110, 110, 101, 108, 84,
      114, 97, 99, 101, 18, 21, 10, 13, 99, 97, 108, 108, 115,
      95, 115, 116, 97, 114, 116, 101, 100, 24, 2, 32, 1, 40,
      3, 18, 23, 10, 15, 99, 97, 108, 108, 115, 95, 115, 117,
      99, 99, 101, 101, 100, 101, 100, 24, 3, 32, 1, 40, 3,
      18, 20, 10, 12, 99, 97, 108, 108, 115, 95, 102, 97, 105,
      108, 101, 100, 24, 4, 32, 1, 40, 3, 18, 63, 10, 27, 108,
      97, 115, 116, 95, 99, 97, 108, 108, 95, 115, 116, 97,
      114, 116, 101, 100, 95, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 5, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 34, 44, 10, 9, 83, 101, 114, 118, 101, 114, 82,
      101, 102, 18, 17, 10, 9, 115, 101, 114, 118, 101, 114,
      95, 105, 100, 24, 5, 32, 1, 40, 3, 18, 12, 10, 4, 110,
      97, 109, 101, 24, 6, 32, 1, 40, 9, 34, 246, 1, 10, 6,
      83, 111, 99, 107, 101, 116, 18, 40, 10, 3, 114, 101,
      102, 24, 1, 32, 1, 40, 11, 50, 27, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 83, 111, 99, 107, 101, 116, 82, 101, 102, 18,
      42, 10, 4, 100, 97, 116, 97, 24, 2, 32, 1, 40, 11, 50,
      28, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 83, 111, 99, 107, 101,
      116, 68, 97, 116, 97, 18, 40, 10, 5, 108, 111, 99, 97,
      108, 24, 3, 32, 1, 40, 11, 50, 25, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 65, 100, 100, 114, 101, 115, 115, 18, 41, 10, 6,
      114, 101, 109, 111, 116, 101, 24, 4, 32, 1, 40, 11, 50,
      25, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 65, 100, 100, 114, 101,
      115, 115, 18, 44, 10, 8, 115, 101, 99, 117, 114, 105,
      116, 121, 24, 5, 32, 1, 40, 11, 50, 26, 46, 103, 114,
      112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46,
      118, 49, 46, 83, 101, 99, 117, 114, 105, 116, 121, 18,
      19, 10, 11, 114, 101, 109, 111, 116, 101, 95, 110, 97,
      109, 101, 24, 6, 32, 1, 40, 9, 34, 238, 4, 10, 10, 83,
      111, 99, 107, 101, 116, 68, 97, 116, 97, 18, 23, 10, 15,
      115, 116, 114, 101, 97, 109, 115, 95, 115, 116, 97, 114,
      116, 101, 100, 24, 1, 32, 1, 40, 3, 18, 25, 10, 17, 115,
      116, 114, 101, 97, 109, 115, 95, 115, 117, 99, 99, 101,
      101, 100, 101, 100, 24, 2, 32, 1, 40, 3, 18, 22, 10, 14,
      115, 116, 114, 101, 97, 109, 115, 95, 102, 97, 105, 108,
      101, 100, 24, 3, 32, 1, 40, 3, 18, 21, 10, 13, 109, 101,
      115, 115, 97, 103, 101, 115, 95, 115, 101, 110, 116, 24,
      4, 32, 1, 40, 3, 18, 25, 10, 17, 109, 101, 115, 115, 97,
      103, 101, 115, 95, 114, 101, 99, 101, 105, 118, 101,
      100, 24, 5, 32, 1, 40, 3, 18, 24, 10, 16, 107, 101, 101,
      112, 95, 97, 108, 105, 118, 101, 115, 95, 115, 101, 110,
      116, 24, 6, 32, 1, 40, 3, 18, 71, 10, 35, 108, 97, 115,
      116, 95, 108, 111, 99, 97, 108, 95, 115, 116, 114, 101,
      97, 109, 95, 99, 114, 101, 97, 116, 101, 100, 95, 116,
      105, 109, 101, 115, 116, 97, 109, 112, 24, 7, 32, 1, 40,
      11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112,
      114, 111, 116, 111, 98, 117, 102, 46, 84, 105, 109, 101,
      115, 116, 97, 109, 112, 18, 72, 10, 36, 108, 97, 115,
      116, 95, 114, 101, 109, 111, 116, 101, 95, 115, 116,
      114, 101, 97, 109, 95, 99, 114, 101, 97, 116, 101, 100,
      95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 24, 8,
      32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101,
      46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 84, 105,
      109, 101, 115, 116, 97, 109, 112, 18, 63, 10, 27, 108,
      97, 115, 116, 95, 109, 101, 115, 115, 97, 103, 101, 95,
      115, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116,
      97, 109, 112, 24, 9, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 18, 67, 10, 31, 108, 97, 115, 116, 95, 109, 101,
      115, 115, 97, 103, 101, 95, 114, 101, 99, 101, 105, 118,
      101, 100, 95, 116, 105, 109, 101, 115, 116, 97, 109,
      112, 24, 10, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 112, 18,
      62, 10, 25, 108, 111, 99, 97, 108, 95, 102, 108, 111,
      119, 95, 99, 111, 110, 116, 114, 111, 108, 95, 119, 105,
      110, 100, 111, 119, 24, 11, 32, 1, 40, 11, 50, 27, 46,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 46, 73, 110, 116, 54, 52, 86, 97,
      108, 117, 101, 18, 63, 10, 26, 114, 101, 109, 111, 116,
      101, 95, 102, 108, 111, 119, 95, 99, 111, 110, 116, 114,
      111, 108, 95, 119, 105, 110, 100, 111, 119, 24, 12, 32,
      1, 40, 11, 50, 27, 46, 103, 111, 111, 103, 108, 101, 46,
      112, 114, 111, 116, 111, 98, 117, 102, 46, 73, 110, 116,
      54, 52, 86, 97, 108, 117, 101, 18, 46, 10, 6, 111, 112,
      116, 105, 111, 110, 24, 13, 32, 3, 40, 11, 50, 30, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 83, 111, 99, 107, 101, 116, 79,
      112, 116, 105, 111, 110, 34, 85, 10, 12, 83, 111, 99,
      107, 101, 116, 79, 112, 116, 105, 111, 110, 18, 12, 10,
      4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 18, 13, 10,
      5, 118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 9, 18, 40,
      10, 10, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108,
      24, 3, 32, 1, 40, 11, 50, 20, 46, 103, 111, 111, 103,
      108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46,
      65, 110, 121, 34, 81, 10, 18, 83, 111, 99, 107, 101,
      116, 79, 112, 116, 105, 111, 110, 76, 105, 110, 103,
      101, 114, 18, 14, 10, 6, 97, 99, 116, 105, 118, 101, 24,
      1, 32, 1, 40, 8, 18, 43, 10, 8, 100, 117, 114, 97, 116,
      105, 111, 110, 24, 2, 32, 1, 40, 11, 50, 25, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 68, 117, 114, 97, 116, 105, 111, 110,
      34, 174, 5, 10, 19, 83, 111, 99, 107, 101, 116, 79, 112,
      116, 105, 111, 110, 84, 99, 112, 73, 110, 102, 111, 18,
      18, 10, 10, 116, 99, 112, 105, 95, 115, 116, 97, 116,
      101, 24, 1, 32, 1, 40, 13, 18, 21, 10, 13, 116, 99, 112,
      105, 95, 99, 97, 95, 115, 116, 97, 116, 101, 24, 2, 32,
      1, 40, 13, 18, 24, 10, 16, 116, 99, 112, 105, 95, 114,
      101, 116, 114, 97, 110, 115, 109, 105, 116, 115, 24, 3,
      32, 1, 40, 13, 18, 19, 10, 11, 116, 99, 112, 105, 95,
      112, 114, 111, 98, 101, 115, 24, 4, 32, 1, 40, 13, 18,
      20, 10, 12, 116, 99, 112, 105, 95, 98, 97, 99, 107, 111,
      102, 102, 24, 5, 32, 1, 40, 13, 18, 20, 10, 12, 116, 99,
      112, 105, 95, 111, 112, 116, 105, 111, 110, 115, 24, 6,
      32, 1, 40, 13, 18, 23, 10, 15, 116, 99, 112, 105, 95,
      115, 110, 100, 95, 119, 115, 99, 97, 108, 101, 24, 7,
      32, 1, 40, 13, 18, 23, 10, 15, 116, 99, 112, 105, 95,
      114, 99, 118, 95, 119, 115, 99, 97, 108, 101, 24, 8, 32,
      1, 40, 13, 18, 16, 10, 8, 116, 99, 112, 105, 95, 114,
      116, 111, 24, 9, 32, 1, 40, 13, 18, 16, 10, 8, 116, 99,
      112, 105, 95, 97, 116, 111, 24, 10, 32, 1, 40, 13, 18,
      20, 10, 12, 116, 99, 112, 105, 95, 115, 110, 100, 95,
      109, 115, 115, 24, 11, 32, 1, 40, 13, 18, 20, 10, 12,
      116, 99, 112, 105, 95, 114, 99, 118, 95, 109, 115, 115,
      24, 12, 32, 1, 40, 13, 18, 20, 10, 12, 116, 99, 112,
      105, 95, 117, 110, 97, 99, 107, 101, 100, 24, 13, 32, 1,
      40, 13, 18, 19, 10, 11, 116, 99, 112, 105, 95, 115, 97,
      99, 107, 101, 100, 24, 14, 32, 1, 40, 13, 18, 17, 10, 9,
      116, 99, 112, 105, 95, 108, 111, 115, 116, 24, 15, 32,
      1, 40, 13, 18, 20, 10, 12, 116, 99, 112, 105, 95, 114,
      101, 116, 114, 97, 110, 115, 24, 16, 32, 1, 40, 13, 18,
      20, 10, 12, 116, 99, 112, 105, 95, 102, 97, 99, 107,
      101, 116, 115, 24, 17, 32, 1, 40, 13, 18, 27, 10, 19,
      116, 99, 112, 105, 95, 108, 97, 115, 116, 95, 100, 97,
      116, 97, 95, 115, 101, 110, 116, 24, 18, 32, 1, 40, 13,
      18, 26, 10, 18, 116, 99, 112, 105, 95, 108, 97, 115,
      116, 95, 97, 99, 107, 95, 115, 101, 110, 116, 24, 19,
      32, 1, 40, 13, 18, 27, 10, 19, 116, 99, 112, 105, 95,
      108, 97, 115, 116, 95, 100, 97, 116, 97, 95, 114, 101,
      99, 118, 24, 20, 32, 1, 40, 13, 18, 26, 10, 18, 116, 99,
      112, 105, 95, 108, 97, 115, 116, 95, 97, 99, 107, 95,
      114, 101, 99, 118, 24, 21, 32, 1, 40, 13, 18, 17, 10, 9,
      116, 99, 112, 105, 95, 112, 109, 116, 117, 24, 22, 32,
      1, 40, 13, 18, 25, 10, 17, 116, 99, 112, 105, 95, 114,
      99, 118, 95, 115, 115, 116, 104, 114, 101, 115, 104, 24,
      23, 32, 1, 40, 13, 18, 16, 10, 8, 116, 99, 112, 105, 95,
      114, 116, 116, 24, 24, 32, 1, 40, 13, 18, 19, 10, 11,
      116, 99, 112, 105, 95, 114, 116, 116, 118, 97, 114, 24,
      25, 32, 1, 40, 13, 18, 25, 10, 17, 116, 99, 112, 105,
      95, 115, 110, 100, 95, 115, 115, 116, 104, 114, 101,
      115, 104, 24, 26, 32, 1, 40, 13, 18, 21, 10, 13, 116,
      99, 112, 105, 95, 115, 110, 100, 95, 99, 119, 110, 100,
      24, 27, 32, 1, 40, 13, 18, 19, 10, 11, 116, 99, 112,
      105, 95, 97, 100, 118, 109, 115, 115, 24, 28, 32, 1, 40,
      13, 18, 23, 10, 15, 116, 99, 112, 105, 95, 114, 101,
      111, 114, 100, 101, 114, 105, 110, 103, 24, 29, 32, 1,
      40, 13, 34, 66, 10, 19, 83, 111, 99, 107, 101, 116, 79,
      112, 116, 105, 111, 110, 84, 105, 109, 101, 111, 117,
      116, 18, 43, 10, 8, 100, 117, 114, 97, 116, 105, 111,
      110, 24, 1, 32, 1, 40, 11, 50, 25, 46, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 46, 68, 117, 114, 97, 116, 105, 111, 110, 34, 44,
      10, 9, 83, 111, 99, 107, 101, 116, 82, 101, 102, 18, 17,
      10, 9, 115, 111, 99, 107, 101, 116, 95, 105, 100, 24, 3,
      32, 1, 40, 3, 18, 12, 10, 4, 110, 97, 109, 101, 24, 4,
      32, 1, 40, 9, 34, 132, 2, 10, 10, 83, 117, 98, 99, 104,
      97, 110, 110, 101, 108, 18, 44, 10, 3, 114, 101, 102,
      24, 1, 32, 1, 40, 11, 50, 31, 46, 103, 114, 112, 99, 46,
      99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46,
      83, 117, 98, 99, 104, 97, 110, 110, 101, 108, 82, 101,
      102, 18, 43, 10, 4, 100, 97, 116, 97, 24, 2, 32, 1, 40,
      11, 50, 29, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97, 110,
      110, 101, 108, 68, 97, 116, 97, 18, 49, 10, 11, 99, 104,
      97, 110, 110, 101, 108, 95, 114, 101, 102, 24, 3, 32, 3,
      40, 11, 50, 28, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 67, 104, 97,
      110, 110, 101, 108, 82, 101, 102, 18, 55, 10, 14, 115,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 95, 114, 101,
      102, 24, 4, 32, 3, 40, 11, 50, 31, 46, 103, 114, 112,
      99, 46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118,
      49, 46, 83, 117, 98, 99, 104, 97, 110, 110, 101, 108,
      82, 101, 102, 18, 47, 10, 10, 115, 111, 99, 107, 101,
      116, 95, 114, 101, 102, 24, 5, 32, 3, 40, 11, 50, 27,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 83, 111, 99, 107, 101, 116,
      82, 101, 102, 34, 52, 10, 13, 83, 117, 98, 99, 104, 97,
      110, 110, 101, 108, 82, 101, 102, 18, 21, 10, 13, 115,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 95, 105, 100,
      24, 7, 32, 1, 40, 3, 18, 12, 10, 4, 110, 97, 109, 101,
      24, 8, 32, 1, 40, 9, 50, 182, 5, 10, 8, 67, 104, 97,
      110, 110, 101, 108, 122, 18, 103, 10, 14, 71, 101, 116,
      84, 111, 112, 67, 104, 97, 110, 110, 101, 108, 115, 18,
      39, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 71, 101, 116, 84, 111,
      112, 67, 104, 97, 110, 110, 101, 108, 115, 82, 101, 113,
      117, 101, 115, 116, 26, 40, 46, 103, 114, 112, 99, 46,
      99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46,
      71, 101, 116, 84, 111, 112, 67, 104, 97, 110, 110, 101,
      108, 115, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0,
      48, 0, 18, 91, 10, 10, 71, 101, 116, 83, 101, 114, 118,
      101, 114, 115, 18, 35, 46, 103, 114, 112, 99, 46, 99,
      104, 97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 71,
      101, 116, 83, 101, 114, 118, 101, 114, 115, 82, 101,
      113, 117, 101, 115, 116, 26, 36, 46, 103, 114, 112, 99,
      46, 99, 104, 97, 110, 110, 101, 108, 122, 46, 118, 49,
      46, 71, 101, 116, 83, 101, 114, 118, 101, 114, 115, 82,
      101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 88,
      10, 9, 71, 101, 116, 83, 101, 114, 118, 101, 114, 18,
      34, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110,
      101, 108, 122, 46, 118, 49, 46, 71, 101, 116, 83, 101,
      114, 118, 101, 114, 82, 101, 113, 117, 101, 115, 116,
      26, 35, 46, 103, 114, 112, 99, 46, 99, 104, 97, 110,
      110, 101, 108, 122, 46, 118, 49, 46, 71, 101, 116, 83,
      101, 114, 118, 101, 114, 82, 101, 115, 112, 111, 110,
      115, 101, 40, 0, 48, 0, 18, 109, 10, 16, 71, 101, 116,
      83, 101, 114, 118, 101, 114, 83, 111, 99, 107, 101, 116,
      115, 18, 41, 46, 103, 114, 112, 99, 46, 99, 104, 97,
      110, 110, 101, 108, 122, 46, 118, 49, 46, 71, 101, 116,
      83, 101, 114, 118, 101, 114, 83, 111, 99, 107, 101, 116,
      115, 82, 101, 113, 117, 101, 115, 116, 26, 42, 46, 103,
      114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108, 122,
      46, 118, 49, 46, 71, 101, 116, 83, 101, 114, 118, 101,
      114, 83, 111, 99, 107, 101, 116, 115, 82, 101, 115, 112,
      111, 110, 115, 101, 40, 0, 48, 0, 18, 91, 10, 10, 71,
      101, 116, 67, 104, 97, 110, 110, 101, 108, 18, 35, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 71, 101, 116, 67, 104, 97, 110,
      110, 101, 108, 82, 101, 113, 117, 101, 115, 116, 26, 36,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 71, 101, 116, 67, 104, 97,
      110, 110, 101, 108, 82, 101, 115, 112, 111, 110, 115,
      101, 40, 0, 48, 0, 18, 100, 10, 13, 71, 101, 116, 83,
      117, 98, 99, 104, 97, 110, 110, 101, 108, 18, 38, 46,
      103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101, 108,
      122, 46, 118, 49, 46, 71, 101, 116, 83, 117, 98, 99,
      104, 97, 110, 110, 101, 108, 82, 101, 113, 117, 101,
      115, 116, 26, 39, 46, 103, 114, 112, 99, 46, 99, 104,
      97, 110, 110, 101, 108, 122, 46, 118, 49, 46, 71, 101,
      116, 83, 117, 98, 99, 104, 97, 110, 110, 101, 108, 82,
      101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 88,
      10, 9, 71, 101, 116, 83, 111, 99, 107, 101, 116, 18, 34,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 71, 101, 116, 83, 111, 99,
      107, 101, 116, 82, 101, 113, 117, 101, 115, 116, 26, 35,
      46, 103, 114, 112, 99, 46, 99, 104, 97, 110, 110, 101,
      108, 122, 46, 118, 49, 46, 71, 101, 116, 83, 111, 99,
      107, 101, 116, 82, 101, 115, 112, 111, 110, 115, 101,
      40, 0, 48, 0, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor("any") ->
    <<10, 25, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 97, 110, 121, 46, 112,
      114, 111, 116, 111, 18, 15, 103, 111, 111, 103, 108,
      101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34, 38,
      10, 3, 65, 110, 121, 18, 16, 10, 8, 116, 121, 112, 101,
      95, 117, 114, 108, 24, 1, 32, 1, 40, 9, 18, 13, 10, 5,
      118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 12, 98, 6,
      112, 114, 111, 116, 111, 51>>;
descriptor("duration") ->
    <<10, 30, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 100, 117, 114, 97, 116,
      105, 111, 110, 46, 112, 114, 111, 116, 111, 18, 15, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 34, 42, 10, 8, 68, 117, 114, 97, 116, 105,
      111, 110, 18, 15, 10, 7, 115, 101, 99, 111, 110, 100,
      115, 24, 1, 32, 1, 40, 3, 18, 13, 10, 5, 110, 97, 110,
      111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112, 114, 111,
      116, 111, 51>>;
descriptor("timestamp") ->
    <<10, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 116, 105, 109, 101,
      115, 116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 18,
      15, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 34, 43, 10, 9, 84, 105, 109,
      101, 115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101,
      99, 111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13, 10,
      5, 110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6,
      112, 114, 111, 116, 111, 51>>;
descriptor("wrappers") ->
    <<10, 30, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 119, 114, 97, 112, 112,
      101, 114, 115, 46, 112, 114, 111, 116, 111, 18, 15, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 34, 26, 10, 9, 66, 111, 111, 108, 86, 97,
      108, 117, 101, 18, 13, 10, 5, 118, 97, 108, 117, 101,
      24, 1, 32, 1, 40, 8, 34, 27, 10, 10, 66, 121, 116, 101,
      115, 86, 97, 108, 117, 101, 18, 13, 10, 5, 118, 97, 108,
      117, 101, 24, 1, 32, 1, 40, 12, 34, 28, 10, 11, 68, 111,
      117, 98, 108, 101, 86, 97, 108, 117, 101, 18, 13, 10, 5,
      118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 1, 34, 27, 10,
      10, 70, 108, 111, 97, 116, 86, 97, 108, 117, 101, 18,
      13, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 2,
      34, 27, 10, 10, 73, 110, 116, 51, 50, 86, 97, 108, 117,
      101, 18, 13, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32,
      1, 40, 5, 34, 27, 10, 10, 73, 110, 116, 54, 52, 86, 97,
      108, 117, 101, 18, 13, 10, 5, 118, 97, 108, 117, 101,
      24, 1, 32, 1, 40, 3, 34, 28, 10, 11, 83, 116, 114, 105,
      110, 103, 86, 97, 108, 117, 101, 18, 13, 10, 5, 118, 97,
      108, 117, 101, 24, 1, 32, 1, 40, 9, 34, 28, 10, 11, 85,
      73, 110, 116, 51, 50, 86, 97, 108, 117, 101, 18, 13, 10,
      5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40, 13, 34, 28,
      10, 11, 85, 73, 110, 116, 54, 52, 86, 97, 108, 117, 101,
      18, 13, 10, 5, 118, 97, 108, 117, 101, 24, 1, 32, 1, 40,
      4, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor(X) -> error({gpb_error, {badname, X}}).


gpb_version_as_string() ->
    "4.7.2".

gpb_version_as_list() ->
    [4,7,2].
