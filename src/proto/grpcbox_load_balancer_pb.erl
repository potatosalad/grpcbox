%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.2
-module(grpcbox_load_balancer_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([descriptor/0, descriptor/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type load_balance_request() ::
      #{load_balance_request_type => {initial_request, initial_load_balance_request()} | {client_stats, client_stats()} % oneof
       }.

-type initial_load_balance_request() ::
      #{name                    => iodata()         % = 1
       }.

-type client_stats_per_token() ::
      #{load_balance_token      => iodata(),        % = 1
        num_calls               => integer()        % = 2, 32 bits
       }.

-type client_stats() ::
      #{timestamp               => timestamp(),     % = 1
        num_calls_started       => integer(),       % = 2, 32 bits
        num_calls_finished      => integer(),       % = 3, 32 bits
        num_calls_finished_with_client_failed_to_send => integer(), % = 6, 32 bits
        num_calls_finished_known_received => integer(), % = 7, 32 bits
        calls_finished_with_drop => [client_stats_per_token()] % = 8
       }.

-type load_balance_response() ::
      #{load_balance_response_type => {initial_response, initial_load_balance_response()} | {server_list, server_list()} % oneof
       }.

-type initial_load_balance_response() ::
      #{load_balancer_delegate  => iodata(),        % = 1
        client_stats_report_interval => duration()  % = 2
       }.

-type server_list() ::
      #{servers                 => [server()]       % = 1
       }.

-type server() ::
      #{ip_address              => iodata(),        % = 1
        port                    => integer(),       % = 2, 32 bits
        load_balance_token      => iodata(),        % = 3
        drop                    => boolean() | 0 | 1 % = 4
       }.

-type duration() ::
      #{seconds                 => integer(),       % = 1, 32 bits
        nanos                   => integer()        % = 2, 32 bits
       }.

-type timestamp() ::
      #{seconds                 => integer(),       % = 1, 32 bits
        nanos                   => integer()        % = 2, 32 bits
       }.

-export_type(['load_balance_request'/0, 'initial_load_balance_request'/0, 'client_stats_per_token'/0, 'client_stats'/0, 'load_balance_response'/0, 'initial_load_balance_response'/0, 'server_list'/0, 'server'/0, 'duration'/0, 'timestamp'/0]).

-spec encode_msg(load_balance_request() | initial_load_balance_request() | client_stats_per_token() | client_stats() | load_balance_response() | initial_load_balance_response() | server_list() | server() | duration() | timestamp(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(load_balance_request() | initial_load_balance_request() | client_stats_per_token() | client_stats() | load_balance_response() | initial_load_balance_response() | server_list() | server() | duration() | timestamp(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      load_balance_request ->
	  encode_msg_load_balance_request(id(Msg, TrUserData),
					  TrUserData);
      initial_load_balance_request ->
	  encode_msg_initial_load_balance_request(id(Msg,
						     TrUserData),
						  TrUserData);
      client_stats_per_token ->
	  encode_msg_client_stats_per_token(id(Msg, TrUserData),
					    TrUserData);
      client_stats ->
	  encode_msg_client_stats(id(Msg, TrUserData),
				  TrUserData);
      load_balance_response ->
	  encode_msg_load_balance_response(id(Msg, TrUserData),
					   TrUserData);
      initial_load_balance_response ->
	  encode_msg_initial_load_balance_response(id(Msg,
						      TrUserData),
						   TrUserData);
      server_list ->
	  encode_msg_server_list(id(Msg, TrUserData), TrUserData);
      server ->
	  encode_msg_server(id(Msg, TrUserData), TrUserData);
      duration ->
	  encode_msg_duration(id(Msg, TrUserData), TrUserData);
      timestamp ->
	  encode_msg_timestamp(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_load_balance_request(Msg, TrUserData) ->
    encode_msg_load_balance_request(Msg, <<>>, TrUserData).


encode_msg_load_balance_request(#{} = M, Bin,
				TrUserData) ->
    case M of
      #{load_balance_request_type := F1} ->
	  case id(F1, TrUserData) of
	    {initial_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_load_balance_request_initial_request(TrTF1,
								<<Bin/binary,
								  10>>,
								TrUserData)
		end;
	    {client_stats, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_load_balance_request_client_stats(TrTF1,
							     <<Bin/binary, 18>>,
							     TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_initial_load_balance_request(Msg,
					TrUserData) ->
    encode_msg_initial_load_balance_request(Msg, <<>>,
					    TrUserData).


encode_msg_initial_load_balance_request(#{} = M, Bin,
					TrUserData) ->
    case M of
      #{name := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_client_stats_per_token(Msg, TrUserData) ->
    encode_msg_client_stats_per_token(Msg, <<>>,
				      TrUserData).


encode_msg_client_stats_per_token(#{} = M, Bin,
				  TrUserData) ->
    B1 = case M of
	   #{load_balance_token := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{num_calls := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_client_stats(Msg, TrUserData) ->
    encode_msg_client_stats(Msg, <<>>, TrUserData).


encode_msg_client_stats(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{timestamp := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_client_stats_timestamp(TrF1,
							<<Bin/binary, 10>>,
							TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{num_calls_started := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{num_calls_finished := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true ->
			e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{num_calls_finished_with_client_failed_to_send :=
		 F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{num_calls_finished_known_received := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true ->
			e_type_int64(TrF5, <<B4/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    case M of
      #{calls_finished_with_drop := F6} ->
	  TrF6 = id(F6, TrUserData),
	  if TrF6 == [] -> B5;
	     true ->
		 e_field_client_stats_calls_finished_with_drop(TrF6, B5,
							       TrUserData)
	  end;
      _ -> B5
    end.

encode_msg_load_balance_response(Msg, TrUserData) ->
    encode_msg_load_balance_response(Msg, <<>>, TrUserData).


encode_msg_load_balance_response(#{} = M, Bin,
				 TrUserData) ->
    case M of
      #{load_balance_response_type := F1} ->
	  case id(F1, TrUserData) of
	    {initial_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_load_balance_response_initial_response(TrTF1,
								  <<Bin/binary,
								    10>>,
								  TrUserData)
		end;
	    {server_list, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_load_balance_response_server_list(TrTF1,
							     <<Bin/binary, 18>>,
							     TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_initial_load_balance_response(Msg,
					 TrUserData) ->
    encode_msg_initial_load_balance_response(Msg, <<>>,
					     TrUserData).


encode_msg_initial_load_balance_response(#{} = M, Bin,
					 TrUserData) ->
    B1 = case M of
	   #{load_balancer_delegate := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{client_stats_report_interval := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_initial_load_balance_response_client_stats_report_interval(TrF2,
										       <<B1/binary,
											 18>>,
										       TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_server_list(Msg, TrUserData) ->
    encode_msg_server_list(Msg, <<>>, TrUserData).


encode_msg_server_list(#{} = M, Bin, TrUserData) ->
    case M of
      #{servers := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_server_list_servers(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_server(Msg, TrUserData) ->
    encode_msg_server(Msg, <<>>, TrUserData).


encode_msg_server(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{ip_address := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{port := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{load_balance_token := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{drop := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= false -> B3;
	       true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

encode_msg_duration(Msg, TrUserData) ->
    encode_msg_duration(Msg, <<>>, TrUserData).


encode_msg_duration(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_timestamp(Msg, TrUserData) ->
    encode_msg_timestamp(Msg, <<>>, TrUserData).


encode_msg_timestamp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_mfield_load_balance_request_initial_request(Msg, Bin,
					      TrUserData) ->
    SubBin = encode_msg_initial_load_balance_request(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_load_balance_request_client_stats(Msg, Bin,
					   TrUserData) ->
    SubBin = encode_msg_client_stats(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_stats_timestamp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_stats_calls_finished_with_drop(Msg, Bin,
					       TrUserData) ->
    SubBin = encode_msg_client_stats_per_token(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_client_stats_calls_finished_with_drop([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 =
	e_mfield_client_stats_calls_finished_with_drop(id(Elem,
							  TrUserData),
						       Bin2, TrUserData),
    e_field_client_stats_calls_finished_with_drop(Rest,
						  Bin3, TrUserData);
e_field_client_stats_calls_finished_with_drop([], Bin,
					      _TrUserData) ->
    Bin.

e_mfield_load_balance_response_initial_response(Msg,
						Bin, TrUserData) ->
    SubBin = encode_msg_initial_load_balance_response(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_load_balance_response_server_list(Msg, Bin,
					   TrUserData) ->
    SubBin = encode_msg_server_list(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_initial_load_balance_response_client_stats_report_interval(Msg,
								    Bin,
								    TrUserData) ->
    SubBin = encode_msg_duration(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_server_list_servers(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_server(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_server_list_servers([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_server_list_servers(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_server_list_servers(Rest, Bin3, TrUserData);
e_field_server_list_servers([], Bin, _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(load_balance_request, Bin,
		  TrUserData) ->
    id(decode_msg_load_balance_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(initial_load_balance_request, Bin,
		  TrUserData) ->
    id(decode_msg_initial_load_balance_request(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(client_stats_per_token, Bin,
		  TrUserData) ->
    id(decode_msg_client_stats_per_token(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(client_stats, Bin, TrUserData) ->
    id(decode_msg_client_stats(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(load_balance_response, Bin,
		  TrUserData) ->
    id(decode_msg_load_balance_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(initial_load_balance_response, Bin,
		  TrUserData) ->
    id(decode_msg_initial_load_balance_response(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit(server_list, Bin, TrUserData) ->
    id(decode_msg_server_list(Bin, TrUserData), TrUserData);
decode_msg_2_doit(server, Bin, TrUserData) ->
    id(decode_msg_server(Bin, TrUserData), TrUserData);
decode_msg_2_doit(duration, Bin, TrUserData) ->
    id(decode_msg_duration(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timestamp, Bin, TrUserData) ->
    id(decode_msg_timestamp(Bin, TrUserData), TrUserData).



decode_msg_load_balance_request(Bin, TrUserData) ->
    dfp_read_field_def_load_balance_request(Bin, 0, 0,
					    id('$undef', TrUserData),
					    TrUserData).

dfp_read_field_def_load_balance_request(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_load_balance_request_initial_request(Rest, Z1,
						 Z2, F@_1, TrUserData);
dfp_read_field_def_load_balance_request(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_load_balance_request_client_stats(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_load_balance_request(<<>>, 0, 0,
					F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{load_balance_request_type => F@_1}
    end;
dfp_read_field_def_load_balance_request(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_load_balance_request(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_load_balance_request(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_load_balance_request(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_load_balance_request(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_load_balance_request_initial_request(Rest, 0, 0,
						       F@_1, TrUserData);
      18 ->
	  d_field_load_balance_request_client_stats(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_load_balance_request(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_load_balance_request(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_load_balance_request(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_load_balance_request(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_load_balance_request(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_load_balance_request(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{load_balance_request_type => F@_1}
    end.

d_field_load_balance_request_initial_request(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_load_balance_request_initial_request(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
d_field_load_balance_request_initial_request(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_initial_load_balance_request(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_balance_request(RestF, 0, 0,
					    case Prev of
					      '$undef' ->
						  id({initial_request,
						      NewFValue},
						     TrUserData);
					      {initial_request, MVPrev} ->
						  id({initial_request,
						      merge_msg_initial_load_balance_request(MVPrev,
											     NewFValue,
											     TrUserData)},
						     TrUserData);
					      _ ->
						  id({initial_request,
						      NewFValue},
						     TrUserData)
					    end,
					    TrUserData).

d_field_load_balance_request_client_stats(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_load_balance_request_client_stats(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_load_balance_request_client_stats(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_client_stats(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_balance_request(RestF, 0, 0,
					    case Prev of
					      '$undef' ->
						  id({client_stats, NewFValue},
						     TrUserData);
					      {client_stats, MVPrev} ->
						  id({client_stats,
						      merge_msg_client_stats(MVPrev,
									     NewFValue,
									     TrUserData)},
						     TrUserData);
					      _ ->
						  id({client_stats, NewFValue},
						     TrUserData)
					    end,
					    TrUserData).

skip_varint_load_balance_request(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_load_balance_request(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_load_balance_request(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_balance_request(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_load_balance_request(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_load_balance_request(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_load_balance_request(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_load_balance_request(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_load_balance_request(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_load_balance_request(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_load_balance_request(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_balance_request(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_load_balance_request(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_balance_request(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_initial_load_balance_request(Bin,
					TrUserData) ->
    dfp_read_field_def_initial_load_balance_request(Bin, 0,
						    0, id(<<>>, TrUserData),
						    TrUserData).

dfp_read_field_def_initial_load_balance_request(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_initial_load_balance_request_name(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_initial_load_balance_request(<<>>, 0,
						0, F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_initial_load_balance_request(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_initial_load_balance_request(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_initial_load_balance_request(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_initial_load_balance_request(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_initial_load_balance_request(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_initial_load_balance_request_name(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_initial_load_balance_request(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_initial_load_balance_request(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_initial_load_balance_request(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_initial_load_balance_request(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_initial_load_balance_request(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_initial_load_balance_request(<<>>, 0,
					       0, F@_1, _) ->
    #{name => F@_1}.

d_field_initial_load_balance_request_name(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_initial_load_balance_request_name(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_initial_load_balance_request_name(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_initial_load_balance_request(RestF,
						    0, 0, NewFValue,
						    TrUserData).

skip_varint_initial_load_balance_request(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_initial_load_balance_request(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_initial_load_balance_request(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_initial_load_balance_request(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_initial_load_balance_request(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_initial_load_balance_request(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_initial_load_balance_request(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_initial_load_balance_request(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_initial_load_balance_request(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_initial_load_balance_request(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_initial_load_balance_request(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_initial_load_balance_request(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_initial_load_balance_request(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_initial_load_balance_request(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_client_stats_per_token(Bin, TrUserData) ->
    dfp_read_field_def_client_stats_per_token(Bin, 0, 0,
					      id(<<>>, TrUserData),
					      id(0, TrUserData), TrUserData).

dfp_read_field_def_client_stats_per_token(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_client_stats_per_token_load_balance_token(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
dfp_read_field_def_client_stats_per_token(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_client_stats_per_token_num_calls(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_client_stats_per_token(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    #{load_balance_token => F@_1, num_calls => F@_2};
dfp_read_field_def_client_stats_per_token(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    dg_read_field_def_client_stats_per_token(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

dg_read_field_def_client_stats_per_token(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_stats_per_token(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
dg_read_field_def_client_stats_per_token(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_client_stats_per_token_load_balance_token(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      16 ->
	  d_field_client_stats_per_token_num_calls(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_client_stats_per_token(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		skip_64_client_stats_per_token(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		skip_length_delimited_client_stats_per_token(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		skip_group_client_stats_per_token(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_client_stats_per_token(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
dg_read_field_def_client_stats_per_token(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    #{load_balance_token => F@_1, num_calls => F@_2}.

d_field_client_stats_per_token_load_balance_token(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    d_field_client_stats_per_token_load_balance_token(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
d_field_client_stats_per_token_load_balance_token(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, F@_2,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_client_stats_per_token(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

d_field_client_stats_per_token_num_calls(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_client_stats_per_token_num_calls(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_client_stats_per_token_num_calls(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_client_stats_per_token(RestF, 0, 0,
					      F@_1, NewFValue, TrUserData).

skip_varint_client_stats_per_token(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_client_stats_per_token(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
skip_varint_client_stats_per_token(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_stats_per_token(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_length_delimited_client_stats_per_token(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_client_stats_per_token(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
skip_length_delimited_client_stats_per_token(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_stats_per_token(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

skip_group_client_stats_per_token(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_stats_per_token(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

skip_32_client_stats_per_token(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_stats_per_token(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_64_client_stats_per_token(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_stats_per_token(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

decode_msg_client_stats(Bin, TrUserData) ->
    dfp_read_field_def_client_stats(Bin, 0, 0,
				    id('$undef', TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id([], TrUserData),
				    TrUserData).

dfp_read_field_def_client_stats(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    d_field_client_stats_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_client_stats(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    d_field_client_stats_num_calls_started(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
dfp_read_field_def_client_stats(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    d_field_client_stats_num_calls_finished(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
dfp_read_field_def_client_stats(<<48, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    d_field_client_stats_num_calls_finished_with_client_failed_to_send(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       F@_6,
								       TrUserData);
dfp_read_field_def_client_stats(<<56, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    d_field_client_stats_num_calls_finished_known_received(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, TrUserData);
dfp_read_field_def_client_stats(<<66, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    d_field_client_stats_calls_finished_with_drop(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, TrUserData);
dfp_read_field_def_client_stats(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, R1, TrUserData) ->
    S1 = #{num_calls_started => F@_2,
	   num_calls_finished => F@_3,
	   num_calls_finished_with_client_failed_to_send => F@_4,
	   num_calls_finished_known_received => F@_5},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{timestamp => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true ->
	   S2#{calls_finished_with_drop =>
		   lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_client_stats(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_client_stats(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_client_stats(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_stats(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
dg_read_field_def_client_stats(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_client_stats_timestamp(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
      16 ->
	  d_field_client_stats_num_calls_started(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      24 ->
	  d_field_client_stats_num_calls_finished(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, TrUserData);
      48 ->
	  d_field_client_stats_num_calls_finished_with_client_failed_to_send(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     TrUserData);
      56 ->
	  d_field_client_stats_num_calls_finished_known_received(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6,
								 TrUserData);
      66 ->
	  d_field_client_stats_calls_finished_with_drop(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6,
							TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_client_stats(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_client_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_client_stats(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   TrUserData);
	    3 ->
		skip_group_client_stats(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_client_stats(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_client_stats(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, R1, TrUserData) ->
    S1 = #{num_calls_started => F@_2,
	   num_calls_finished => F@_3,
	   num_calls_finished_with_client_failed_to_send => F@_4,
	   num_calls_finished_known_received => F@_5},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{timestamp => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true ->
	   S2#{calls_finished_with_drop =>
		   lists_reverse(R1, TrUserData)}
    end.

d_field_client_stats_timestamp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    d_field_client_stats_timestamp(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
d_field_client_stats_timestamp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_client_stats(RestF, 0, 0,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_timestamp(Prev, NewFValue,
							       TrUserData)
				    end,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_client_stats_num_calls_started(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    d_field_client_stats_num_calls_started(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
d_field_client_stats_num_calls_started(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_client_stats(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, F@_5, F@_6,
				    TrUserData).

d_field_client_stats_num_calls_finished(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, TrUserData)
    when N < 57 ->
    d_field_client_stats_num_calls_finished(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, TrUserData);
d_field_client_stats_num_calls_finished(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
					TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_client_stats(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_client_stats_num_calls_finished_with_client_failed_to_send(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6,
								   TrUserData)
    when N < 57 ->
    d_field_client_stats_num_calls_finished_with_client_failed_to_send(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       F@_6,
								       TrUserData);
d_field_client_stats_num_calls_finished_with_client_failed_to_send(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   _, F@_5,
								   F@_6,
								   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_client_stats(RestF, 0, 0, F@_1, F@_2,
				    F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_client_stats_num_calls_finished_known_received(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       TrUserData)
    when N < 57 ->
    d_field_client_stats_num_calls_finished_known_received(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   TrUserData);
d_field_client_stats_num_calls_finished_known_received(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, _, F@_6,
						       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_client_stats(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_client_stats_calls_finished_with_drop(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_client_stats_calls_finished_with_drop(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  TrUserData);
d_field_client_stats_calls_finished_with_drop(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_client_stats_per_token(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_client_stats(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5,
				    cons(NewFValue, Prev, TrUserData),
				    TrUserData).

skip_varint_client_stats(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_client_stats(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
skip_varint_client_stats(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_client_stats(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_client_stats(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    skip_length_delimited_client_stats(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
skip_length_delimited_client_stats(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_stats(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_client_stats(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_stats(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_client_stats(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_client_stats(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_client_stats(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_client_stats(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_load_balance_response(Bin, TrUserData) ->
    dfp_read_field_def_load_balance_response(Bin, 0, 0,
					     id('$undef', TrUserData),
					     TrUserData).

dfp_read_field_def_load_balance_response(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_load_balance_response_initial_response(Rest, Z1,
						   Z2, F@_1, TrUserData);
dfp_read_field_def_load_balance_response(<<18,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_load_balance_response_server_list(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_load_balance_response(<<>>, 0, 0,
					 F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{load_balance_response_type => F@_1}
    end;
dfp_read_field_def_load_balance_response(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_load_balance_response(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_load_balance_response(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_load_balance_response(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_load_balance_response(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_load_balance_response_initial_response(Rest, 0,
							 0, F@_1, TrUserData);
      18 ->
	  d_field_load_balance_response_server_list(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_load_balance_response(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_load_balance_response(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_load_balance_response(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_load_balance_response(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_load_balance_response(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_load_balance_response(<<>>, 0, 0,
					F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{load_balance_response_type => F@_1}
    end.

d_field_load_balance_response_initial_response(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_load_balance_response_initial_response(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
d_field_load_balance_response_initial_response(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_initial_load_balance_response(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_balance_response(RestF, 0, 0,
					     case Prev of
					       '$undef' ->
						   id({initial_response,
						       NewFValue},
						      TrUserData);
					       {initial_response, MVPrev} ->
						   id({initial_response,
						       merge_msg_initial_load_balance_response(MVPrev,
											       NewFValue,
											       TrUserData)},
						      TrUserData);
					       _ ->
						   id({initial_response,
						       NewFValue},
						      TrUserData)
					     end,
					     TrUserData).

d_field_load_balance_response_server_list(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_load_balance_response_server_list(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_load_balance_response_server_list(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_server_list(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_balance_response(RestF, 0, 0,
					     case Prev of
					       '$undef' ->
						   id({server_list, NewFValue},
						      TrUserData);
					       {server_list, MVPrev} ->
						   id({server_list,
						       merge_msg_server_list(MVPrev,
									     NewFValue,
									     TrUserData)},
						      TrUserData);
					       _ ->
						   id({server_list, NewFValue},
						      TrUserData)
					     end,
					     TrUserData).

skip_varint_load_balance_response(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_load_balance_response(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_load_balance_response(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_balance_response(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_load_balance_response(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_load_balance_response(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_load_balance_response(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_load_balance_response(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_load_balance_response(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_load_balance_response(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_load_balance_response(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_balance_response(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_load_balance_response(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_balance_response(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_initial_load_balance_response(Bin,
					 TrUserData) ->
    dfp_read_field_def_initial_load_balance_response(Bin, 0,
						     0, id(<<>>, TrUserData),
						     id('$undef', TrUserData),
						     TrUserData).

dfp_read_field_def_initial_load_balance_response(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_initial_load_balance_response_load_balancer_delegate(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
dfp_read_field_def_initial_load_balance_response(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_initial_load_balance_response_client_stats_report_interval(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData);
dfp_read_field_def_initial_load_balance_response(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    S1 = #{load_balancer_delegate => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{client_stats_report_interval => F@_2}
    end;
dfp_read_field_def_initial_load_balance_response(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    dg_read_field_def_initial_load_balance_response(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

dg_read_field_def_initial_load_balance_response(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_initial_load_balance_response(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
dg_read_field_def_initial_load_balance_response(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_initial_load_balance_response_load_balancer_delegate(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      18 ->
	  d_field_initial_load_balance_response_client_stats_report_interval(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_initial_load_balance_response(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		skip_64_initial_load_balance_response(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		skip_length_delimited_initial_load_balance_response(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		skip_group_initial_load_balance_response(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		skip_32_initial_load_balance_response(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
dg_read_field_def_initial_load_balance_response(<<>>, 0,
						0, F@_1, F@_2, _) ->
    S1 = #{load_balancer_delegate => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{client_stats_report_interval => F@_2}
    end.

d_field_initial_load_balance_response_load_balancer_delegate(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    d_field_initial_load_balance_response_load_balancer_delegate(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
d_field_initial_load_balance_response_load_balancer_delegate(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, _, F@_2,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_initial_load_balance_response(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

d_field_initial_load_balance_response_client_stats_report_interval(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData)
    when N < 57 ->
    d_field_initial_load_balance_response_client_stats_report_interval(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       TrUserData);
d_field_initial_load_balance_response_client_stats_report_interval(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_duration(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_initial_load_balance_response(RestF,
						     0, 0, F@_1,
						     if Prev == '$undef' ->
							    NewFValue;
							true ->
							    merge_msg_duration(Prev,
									       NewFValue,
									       TrUserData)
						     end,
						     TrUserData).

skip_varint_initial_load_balance_response(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_initial_load_balance_response(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
skip_varint_initial_load_balance_response(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_initial_load_balance_response(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_length_delimited_initial_load_balance_response(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    skip_length_delimited_initial_load_balance_response(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
skip_length_delimited_initial_load_balance_response(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_initial_load_balance_response(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

skip_group_initial_load_balance_response(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_initial_load_balance_response(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

skip_32_initial_load_balance_response(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_initial_load_balance_response(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_64_initial_load_balance_response(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_initial_load_balance_response(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

decode_msg_server_list(Bin, TrUserData) ->
    dfp_read_field_def_server_list(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_server_list(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_server_list_servers(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_server_list(<<>>, 0, 0, R1,
			       TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{servers => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_server_list(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_server_list(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_server_list(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_list(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_server_list(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_server_list_servers(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server_list(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_server_list(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_server_list(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_server_list(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_server_list(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_server_list(<<>>, 0, 0, R1,
			      TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{servers => lists_reverse(R1, TrUserData)}
    end.

d_field_server_list_servers(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_server_list_servers(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_server_list_servers(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_server(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_server_list(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_server_list(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_server_list(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_server_list(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_server_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_server_list(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_server_list(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_server_list(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_list(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_server_list(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server_list(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_server_list(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_server_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_server_list(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_server_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_server(Bin, TrUserData) ->
    dfp_read_field_def_server(Bin, 0, 0,
			      id(<<>>, TrUserData), id(0, TrUserData),
			      id(<<>>, TrUserData), id(false, TrUserData),
			      TrUserData).

dfp_read_field_def_server(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_server_ip_address(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_server(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_server_port(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_server(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_server_load_balance_token(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_server(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_server_drop(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_server(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #{ip_address => F@_1, port => F@_2,
      load_balance_token => F@_3, drop => F@_4};
dfp_read_field_def_server(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_server(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_server(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_server(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_server_ip_address(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      16 ->
	  d_field_server_port(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      26 ->
	  d_field_server_load_balance_token(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_server_drop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_server(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_server(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_server(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_server(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_server(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, _) ->
    #{ip_address => F@_1, port => F@_2,
      load_balance_token => F@_3, drop => F@_4}.

d_field_server_ip_address(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_server_ip_address(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_server_ip_address(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_server(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_server_port(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_server_port(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_server_port(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_server(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_server_load_balance_token(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_server_load_balance_token(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_server_load_balance_token(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_server(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, TrUserData).

d_field_server_drop(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_server_drop(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_server_drop(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_server(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, TrUserData).

skip_varint_server(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_server(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_server(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_server(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_server(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_server(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_server(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_server(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_server(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_server(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_server(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_server(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

decode_msg_duration(Bin, TrUserData) ->
    dfp_read_field_def_duration(Bin, 0, 0,
				id(0, TrUserData), id(0, TrUserData),
				TrUserData).

dfp_read_field_def_duration(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_duration_seconds(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_duration(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_duration_nanos(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_duration(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_duration(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_duration(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_duration(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_duration(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_duration(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_duration_seconds(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      16 ->
	  d_field_duration_nanos(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_duration(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_duration(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_duration(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_duration(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_duration(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_duration(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_duration_seconds(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_duration_seconds(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_duration_seconds(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_duration(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_duration_nanos(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_duration_nanos(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_duration_nanos(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_duration(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_duration(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_duration(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_duration(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_duration(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_duration(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_duration(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_duration(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_duration(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_duration(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_duration(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_duration(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_timestamp(Bin, TrUserData) ->
    dfp_read_field_def_timestamp(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_timestamp(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_timestamp_seconds(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_timestamp(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_nanos(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_timestamp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_timestamp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_timestamp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_timestamp_seconds(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_timestamp_nanos(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_timestamp(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_timestamp(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_timestamp(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_timestamp_seconds(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_seconds(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_timestamp_seconds(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_timestamp_nanos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_nanos(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_timestamp_nanos(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_timestamp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_timestamp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_timestamp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_timestamp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_timestamp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_timestamp(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_timestamp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_timestamp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      load_balance_request ->
	  merge_msg_load_balance_request(Prev, New, TrUserData);
      initial_load_balance_request ->
	  merge_msg_initial_load_balance_request(Prev, New,
						 TrUserData);
      client_stats_per_token ->
	  merge_msg_client_stats_per_token(Prev, New, TrUserData);
      client_stats ->
	  merge_msg_client_stats(Prev, New, TrUserData);
      load_balance_response ->
	  merge_msg_load_balance_response(Prev, New, TrUserData);
      initial_load_balance_response ->
	  merge_msg_initial_load_balance_response(Prev, New,
						  TrUserData);
      server_list ->
	  merge_msg_server_list(Prev, New, TrUserData);
      server -> merge_msg_server(Prev, New, TrUserData);
      duration -> merge_msg_duration(Prev, New, TrUserData);
      timestamp -> merge_msg_timestamp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_load_balance_request/3}).
merge_msg_load_balance_request(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{load_balance_request_type :=
	     {initial_request, OPFload_balance_request_type}},
       #{load_balance_request_type :=
	     {initial_request, ONFload_balance_request_type}}} ->
	  S1#{load_balance_request_type =>
		  {initial_request,
		   merge_msg_initial_load_balance_request(OPFload_balance_request_type,
							  ONFload_balance_request_type,
							  TrUserData)}};
      {#{load_balance_request_type :=
	     {client_stats, OPFload_balance_request_type}},
       #{load_balance_request_type :=
	     {client_stats, ONFload_balance_request_type}}} ->
	  S1#{load_balance_request_type =>
		  {client_stats,
		   merge_msg_client_stats(OPFload_balance_request_type,
					  ONFload_balance_request_type,
					  TrUserData)}};
      {_,
       #{load_balance_request_type :=
	     NFload_balance_request_type}} ->
	  S1#{load_balance_request_type =>
		  NFload_balance_request_type};
      {#{load_balance_request_type :=
	     PFload_balance_request_type},
       _} ->
	  S1#{load_balance_request_type =>
		  PFload_balance_request_type};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_initial_load_balance_request/3}).
merge_msg_initial_load_balance_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S1#{name => NFname};
      {#{name := PFname}, _} -> S1#{name => PFname};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_client_stats_per_token/3}).
merge_msg_client_stats_per_token(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{load_balance_token := NFload_balance_token}} ->
	       S1#{load_balance_token => NFload_balance_token};
	   {#{load_balance_token := PFload_balance_token}, _} ->
	       S1#{load_balance_token => PFload_balance_token};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{num_calls := NFnum_calls}} ->
	  S2#{num_calls => NFnum_calls};
      {#{num_calls := PFnum_calls}, _} ->
	  S2#{num_calls => PFnum_calls};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_client_stats/3}).
merge_msg_client_stats(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{timestamp := PFtimestamp},
	    #{timestamp := NFtimestamp}} ->
	       S1#{timestamp =>
		       merge_msg_timestamp(PFtimestamp, NFtimestamp,
					   TrUserData)};
	   {_, #{timestamp := NFtimestamp}} ->
	       S1#{timestamp => NFtimestamp};
	   {#{timestamp := PFtimestamp}, _} ->
	       S1#{timestamp => PFtimestamp};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{num_calls_started := NFnum_calls_started}} ->
	       S2#{num_calls_started => NFnum_calls_started};
	   {#{num_calls_started := PFnum_calls_started}, _} ->
	       S2#{num_calls_started => PFnum_calls_started};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{num_calls_finished := NFnum_calls_finished}} ->
	       S3#{num_calls_finished => NFnum_calls_finished};
	   {#{num_calls_finished := PFnum_calls_finished}, _} ->
	       S3#{num_calls_finished => PFnum_calls_finished};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_,
	    #{num_calls_finished_with_client_failed_to_send :=
		  NFnum_calls_finished_with_client_failed_to_send}} ->
	       S4#{num_calls_finished_with_client_failed_to_send =>
		       NFnum_calls_finished_with_client_failed_to_send};
	   {#{num_calls_finished_with_client_failed_to_send :=
		  PFnum_calls_finished_with_client_failed_to_send},
	    _} ->
	       S4#{num_calls_finished_with_client_failed_to_send =>
		       PFnum_calls_finished_with_client_failed_to_send};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_,
	    #{num_calls_finished_known_received :=
		  NFnum_calls_finished_known_received}} ->
	       S5#{num_calls_finished_known_received =>
		       NFnum_calls_finished_known_received};
	   {#{num_calls_finished_known_received :=
		  PFnum_calls_finished_known_received},
	    _} ->
	       S5#{num_calls_finished_known_received =>
		       PFnum_calls_finished_known_received};
	   _ -> S5
	 end,
    case {PMsg, NMsg} of
      {#{calls_finished_with_drop :=
	     PFcalls_finished_with_drop},
       #{calls_finished_with_drop :=
	     NFcalls_finished_with_drop}} ->
	  S6#{calls_finished_with_drop =>
		  'erlang_++'(PFcalls_finished_with_drop,
			      NFcalls_finished_with_drop, TrUserData)};
      {_,
       #{calls_finished_with_drop :=
	     NFcalls_finished_with_drop}} ->
	  S6#{calls_finished_with_drop =>
		  NFcalls_finished_with_drop};
      {#{calls_finished_with_drop :=
	     PFcalls_finished_with_drop},
       _} ->
	  S6#{calls_finished_with_drop =>
		  PFcalls_finished_with_drop};
      {_, _} -> S6
    end.

-compile({nowarn_unused_function,merge_msg_load_balance_response/3}).
merge_msg_load_balance_response(PMsg, NMsg,
				TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{load_balance_response_type :=
	     {initial_response, OPFload_balance_response_type}},
       #{load_balance_response_type :=
	     {initial_response, ONFload_balance_response_type}}} ->
	  S1#{load_balance_response_type =>
		  {initial_response,
		   merge_msg_initial_load_balance_response(OPFload_balance_response_type,
							   ONFload_balance_response_type,
							   TrUserData)}};
      {#{load_balance_response_type :=
	     {server_list, OPFload_balance_response_type}},
       #{load_balance_response_type :=
	     {server_list, ONFload_balance_response_type}}} ->
	  S1#{load_balance_response_type =>
		  {server_list,
		   merge_msg_server_list(OPFload_balance_response_type,
					 ONFload_balance_response_type,
					 TrUserData)}};
      {_,
       #{load_balance_response_type :=
	     NFload_balance_response_type}} ->
	  S1#{load_balance_response_type =>
		  NFload_balance_response_type};
      {#{load_balance_response_type :=
	     PFload_balance_response_type},
       _} ->
	  S1#{load_balance_response_type =>
		  PFload_balance_response_type};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_initial_load_balance_response/3}).
merge_msg_initial_load_balance_response(PMsg, NMsg,
					TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_,
	    #{load_balancer_delegate :=
		  NFload_balancer_delegate}} ->
	       S1#{load_balancer_delegate => NFload_balancer_delegate};
	   {#{load_balancer_delegate := PFload_balancer_delegate},
	    _} ->
	       S1#{load_balancer_delegate => PFload_balancer_delegate};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{client_stats_report_interval :=
	     PFclient_stats_report_interval},
       #{client_stats_report_interval :=
	     NFclient_stats_report_interval}} ->
	  S2#{client_stats_report_interval =>
		  merge_msg_duration(PFclient_stats_report_interval,
				     NFclient_stats_report_interval,
				     TrUserData)};
      {_,
       #{client_stats_report_interval :=
	     NFclient_stats_report_interval}} ->
	  S2#{client_stats_report_interval =>
		  NFclient_stats_report_interval};
      {#{client_stats_report_interval :=
	     PFclient_stats_report_interval},
       _} ->
	  S2#{client_stats_report_interval =>
		  PFclient_stats_report_interval};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_server_list/3}).
merge_msg_server_list(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{servers := PFservers}, #{servers := NFservers}} ->
	  S1#{servers =>
		  'erlang_++'(PFservers, NFservers, TrUserData)};
      {_, #{servers := NFservers}} ->
	  S1#{servers => NFservers};
      {#{servers := PFservers}, _} ->
	  S1#{servers => PFservers};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_server/3}).
merge_msg_server(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{ip_address := NFip_address}} ->
	       S1#{ip_address => NFip_address};
	   {#{ip_address := PFip_address}, _} ->
	       S1#{ip_address => PFip_address};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{port := NFport}} -> S2#{port => NFport};
	   {#{port := PFport}, _} -> S2#{port => PFport};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{load_balance_token := NFload_balance_token}} ->
	       S3#{load_balance_token => NFload_balance_token};
	   {#{load_balance_token := PFload_balance_token}, _} ->
	       S3#{load_balance_token => PFload_balance_token};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{drop := NFdrop}} -> S4#{drop => NFdrop};
      {#{drop := PFdrop}, _} -> S4#{drop => PFdrop};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_duration/3}).
merge_msg_duration(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_timestamp/3}).
merge_msg_timestamp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      load_balance_request ->
	  v_msg_load_balance_request(Msg, [MsgName], TrUserData);
      initial_load_balance_request ->
	  v_msg_initial_load_balance_request(Msg, [MsgName],
					     TrUserData);
      client_stats_per_token ->
	  v_msg_client_stats_per_token(Msg, [MsgName],
				       TrUserData);
      client_stats ->
	  v_msg_client_stats(Msg, [MsgName], TrUserData);
      load_balance_response ->
	  v_msg_load_balance_response(Msg, [MsgName], TrUserData);
      initial_load_balance_response ->
	  v_msg_initial_load_balance_response(Msg, [MsgName],
					      TrUserData);
      server_list ->
	  v_msg_server_list(Msg, [MsgName], TrUserData);
      server -> v_msg_server(Msg, [MsgName], TrUserData);
      duration -> v_msg_duration(Msg, [MsgName], TrUserData);
      timestamp ->
	  v_msg_timestamp(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_load_balance_request/3}).
-dialyzer({nowarn_function,v_msg_load_balance_request/3}).
v_msg_load_balance_request(#{} = M, Path, TrUserData) ->
    case M of
      #{load_balance_request_type :=
	    {initial_request, OF1}} ->
	  v_msg_initial_load_balance_request(OF1,
					     [initial_request,
					      load_balance_request_type
					      | Path],
					     TrUserData);
      #{load_balance_request_type := {client_stats, OF1}} ->
	  v_msg_client_stats(OF1,
			     [client_stats, load_balance_request_type | Path],
			     TrUserData);
      #{load_balance_request_type := F1} ->
	  mk_type_error(invalid_oneof, F1,
			[load_balance_request_type | Path]);
      _ -> ok
    end,
    lists:foreach(fun (load_balance_request_type) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_load_balance_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   load_balance_request},
		  M, Path);
v_msg_load_balance_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, load_balance_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_initial_load_balance_request/3}).
-dialyzer({nowarn_function,v_msg_initial_load_balance_request/3}).
v_msg_initial_load_balance_request(#{} = M, Path,
				   TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_initial_load_balance_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   initial_load_balance_request},
		  M, Path);
v_msg_initial_load_balance_request(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   initial_load_balance_request},
		  X, Path).

-compile({nowarn_unused_function,v_msg_client_stats_per_token/3}).
-dialyzer({nowarn_function,v_msg_client_stats_per_token/3}).
v_msg_client_stats_per_token(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{load_balance_token := F1} ->
	  v_type_string(F1, [load_balance_token | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls := F2} ->
	  v_type_int64(F2, [num_calls | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (load_balance_token) -> ok;
		      (num_calls) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_client_stats_per_token(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   client_stats_per_token},
		  M, Path);
v_msg_client_stats_per_token(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_stats_per_token}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_client_stats/3}).
-dialyzer({nowarn_function,v_msg_client_stats/3}).
v_msg_client_stats(#{} = M, Path, TrUserData) ->
    case M of
      #{timestamp := F1} ->
	  v_msg_timestamp(F1, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_started := F2} ->
	  v_type_int64(F2, [num_calls_started | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_finished := F3} ->
	  v_type_int64(F3, [num_calls_finished | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_finished_with_client_failed_to_send :=
	    F4} ->
	  v_type_int64(F4,
		       [num_calls_finished_with_client_failed_to_send | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_finished_known_received := F5} ->
	  v_type_int64(F5,
		       [num_calls_finished_known_received | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_finished_with_drop := F6} ->
	  if is_list(F6) ->
		 _ = [v_msg_client_stats_per_token(Elem,
						   [calls_finished_with_drop
						    | Path],
						   TrUserData)
		      || Elem <- F6],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, client_stats_per_token}},
			       F6, [calls_finished_with_drop | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (timestamp) -> ok;
		      (num_calls_started) -> ok;
		      (num_calls_finished) -> ok;
		      (num_calls_finished_with_client_failed_to_send) -> ok;
		      (num_calls_finished_known_received) -> ok;
		      (calls_finished_with_drop) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_client_stats(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   client_stats},
		  M, Path);
v_msg_client_stats(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_stats}, X, Path).

-compile({nowarn_unused_function,v_msg_load_balance_response/3}).
-dialyzer({nowarn_function,v_msg_load_balance_response/3}).
v_msg_load_balance_response(#{} = M, Path,
			    TrUserData) ->
    case M of
      #{load_balance_response_type :=
	    {initial_response, OF1}} ->
	  v_msg_initial_load_balance_response(OF1,
					      [initial_response,
					       load_balance_response_type
					       | Path],
					      TrUserData);
      #{load_balance_response_type := {server_list, OF1}} ->
	  v_msg_server_list(OF1,
			    [server_list, load_balance_response_type | Path],
			    TrUserData);
      #{load_balance_response_type := F1} ->
	  mk_type_error(invalid_oneof, F1,
			[load_balance_response_type | Path]);
      _ -> ok
    end,
    lists:foreach(fun (load_balance_response_type) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_load_balance_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   load_balance_response},
		  M, Path);
v_msg_load_balance_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, load_balance_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_initial_load_balance_response/3}).
-dialyzer({nowarn_function,v_msg_initial_load_balance_response/3}).
v_msg_initial_load_balance_response(#{} = M, Path,
				    TrUserData) ->
    case M of
      #{load_balancer_delegate := F1} ->
	  v_type_string(F1, [load_balancer_delegate | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{client_stats_report_interval := F2} ->
	  v_msg_duration(F2,
			 [client_stats_report_interval | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (load_balancer_delegate) -> ok;
		      (client_stats_report_interval) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_initial_load_balance_response(M, Path,
				    _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   initial_load_balance_response},
		  M, Path);
v_msg_initial_load_balance_response(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   initial_load_balance_response},
		  X, Path).

-compile({nowarn_unused_function,v_msg_server_list/3}).
-dialyzer({nowarn_function,v_msg_server_list/3}).
v_msg_server_list(#{} = M, Path, TrUserData) ->
    case M of
      #{servers := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_server(Elem, [servers | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, server}}, F1,
			       [servers | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (servers) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_server_list(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   server_list},
		  M, Path);
v_msg_server_list(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_list}, X, Path).

-compile({nowarn_unused_function,v_msg_server/3}).
-dialyzer({nowarn_function,v_msg_server/3}).
v_msg_server(#{} = M, Path, TrUserData) ->
    case M of
      #{ip_address := F1} ->
	  v_type_bytes(F1, [ip_address | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{port := F2} ->
	  v_type_int32(F2, [port | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{load_balance_token := F3} ->
	  v_type_string(F3, [load_balance_token | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{drop := F4} ->
	  v_type_bool(F4, [drop | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (ip_address) -> ok;
		      (port) -> ok;
		      (load_balance_token) -> ok;
		      (drop) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_server(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   server},
		  M, Path);
v_msg_server(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server}, X, Path).

-compile({nowarn_unused_function,v_msg_duration/3}).
-dialyzer({nowarn_function,v_msg_duration/3}).
v_msg_duration(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_duration(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   duration},
		  M, Path);
v_msg_duration(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, duration}, X, Path).

-compile({nowarn_unused_function,v_msg_timestamp/3}).
-dialyzer({nowarn_function,v_msg_timestamp/3}).
v_msg_timestamp(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_timestamp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   timestamp},
		  M, Path);
v_msg_timestamp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, timestamp}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, load_balance_request},
      [#{name => load_balance_request_type, rnum => 2,
	 fields =>
	     [#{name => initial_request, fnum => 1, rnum => 2,
		type => {msg, initial_load_balance_request},
		occurrence => optional, opts => []},
	      #{name => client_stats, fnum => 2, rnum => 2,
		type => {msg, client_stats}, occurrence => optional,
		opts => []}]}]},
     {{msg, initial_load_balance_request},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, client_stats_per_token},
      [#{name => load_balance_token, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => num_calls, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, client_stats},
      [#{name => timestamp, fnum => 1, rnum => 2,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => num_calls_started, fnum => 2, rnum => 3,
	 type => int64, occurrence => optional, opts => []},
       #{name => num_calls_finished, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []},
       #{name => num_calls_finished_with_client_failed_to_send,
	 fnum => 6, rnum => 5, type => int64,
	 occurrence => optional, opts => []},
       #{name => num_calls_finished_known_received, fnum => 7,
	 rnum => 6, type => int64, occurrence => optional,
	 opts => []},
       #{name => calls_finished_with_drop, fnum => 8,
	 rnum => 7, type => {msg, client_stats_per_token},
	 occurrence => repeated, opts => []}]},
     {{msg, load_balance_response},
      [#{name => load_balance_response_type, rnum => 2,
	 fields =>
	     [#{name => initial_response, fnum => 1, rnum => 2,
		type => {msg, initial_load_balance_response},
		occurrence => optional, opts => []},
	      #{name => server_list, fnum => 2, rnum => 2,
		type => {msg, server_list}, occurrence => optional,
		opts => []}]}]},
     {{msg, initial_load_balance_response},
      [#{name => load_balancer_delegate, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => client_stats_report_interval, fnum => 2,
	 rnum => 3, type => {msg, duration},
	 occurrence => optional, opts => []}]},
     {{msg, server_list},
      [#{name => servers, fnum => 1, rnum => 2,
	 type => {msg, server}, occurrence => repeated,
	 opts => []}]},
     {{msg, server},
      [#{name => ip_address, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []},
       #{name => load_balance_token, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => drop, fnum => 4, rnum => 5, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, duration},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, timestamp},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [load_balance_request, initial_load_balance_request,
     client_stats_per_token, client_stats,
     load_balance_response, initial_load_balance_response,
     server_list, server, duration, timestamp].


get_group_names() -> [].


get_msg_or_group_names() ->
    [load_balance_request, initial_load_balance_request,
     client_stats_per_token, client_stats,
     load_balance_response, initial_load_balance_response,
     server_list, server, duration, timestamp].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(load_balance_request) ->
    [#{name => load_balance_request_type, rnum => 2,
       fields =>
	   [#{name => initial_request, fnum => 1, rnum => 2,
	      type => {msg, initial_load_balance_request},
	      occurrence => optional, opts => []},
	    #{name => client_stats, fnum => 2, rnum => 2,
	      type => {msg, client_stats}, occurrence => optional,
	      opts => []}]}];
find_msg_def(initial_load_balance_request) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(client_stats_per_token) ->
    [#{name => load_balance_token, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => num_calls, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(client_stats) ->
    [#{name => timestamp, fnum => 1, rnum => 2,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => num_calls_started, fnum => 2, rnum => 3,
       type => int64, occurrence => optional, opts => []},
     #{name => num_calls_finished, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []},
     #{name => num_calls_finished_with_client_failed_to_send,
       fnum => 6, rnum => 5, type => int64,
       occurrence => optional, opts => []},
     #{name => num_calls_finished_known_received, fnum => 7,
       rnum => 6, type => int64, occurrence => optional,
       opts => []},
     #{name => calls_finished_with_drop, fnum => 8,
       rnum => 7, type => {msg, client_stats_per_token},
       occurrence => repeated, opts => []}];
find_msg_def(load_balance_response) ->
    [#{name => load_balance_response_type, rnum => 2,
       fields =>
	   [#{name => initial_response, fnum => 1, rnum => 2,
	      type => {msg, initial_load_balance_response},
	      occurrence => optional, opts => []},
	    #{name => server_list, fnum => 2, rnum => 2,
	      type => {msg, server_list}, occurrence => optional,
	      opts => []}]}];
find_msg_def(initial_load_balance_response) ->
    [#{name => load_balancer_delegate, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => client_stats_report_interval, fnum => 2,
       rnum => 3, type => {msg, duration},
       occurrence => optional, opts => []}];
find_msg_def(server_list) ->
    [#{name => servers, fnum => 1, rnum => 2,
       type => {msg, server}, occurrence => repeated,
       opts => []}];
find_msg_def(server) ->
    [#{name => ip_address, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []},
     #{name => load_balance_token, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => drop, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(duration) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(timestamp) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['grpc.lb.v1.LoadBalancer'].


get_service_def('grpc.lb.v1.LoadBalancer') ->
    {{service, 'grpc.lb.v1.LoadBalancer'},
     [#{name => 'BalanceLoad', input => load_balance_request,
	output => load_balance_response, input_stream => true,
	output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('grpc.lb.v1.LoadBalancer') ->
    ['BalanceLoad'];
get_rpc_names(_) -> error.


find_rpc_def('grpc.lb.v1.LoadBalancer', RpcName) ->
    'find_rpc_def_grpc.lb.v1.LoadBalancer'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_grpc.lb.v1.LoadBalancer'('BalanceLoad') ->
    #{name => 'BalanceLoad', input => load_balance_request,
      output => load_balance_response, input_stream => true,
      output_stream => true, opts => []};
'find_rpc_def_grpc.lb.v1.LoadBalancer'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"grpc.lb.v1.LoadBalancer">>) ->
    'grpc.lb.v1.LoadBalancer';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('grpc.lb.v1.LoadBalancer') ->
    <<"grpc.lb.v1.LoadBalancer">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"grpc.lb.v1.LoadBalancer">>, <<"BalanceLoad">>) ->
    {'grpc.lb.v1.LoadBalancer', 'BalanceLoad'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('grpc.lb.v1.LoadBalancer',
			       'BalanceLoad') ->
    {<<"grpc.lb.v1.LoadBalancer">>, <<"BalanceLoad">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"grpc.lb.v1.LoadBalanceRequest">>) -> load_balance_request;
fqbin_to_msg_name(<<"grpc.lb.v1.InitialLoadBalanceRequest">>) ->
    initial_load_balance_request;
fqbin_to_msg_name(<<"grpc.lb.v1.ClientStatsPerToken">>) -> client_stats_per_token;
fqbin_to_msg_name(<<"grpc.lb.v1.ClientStats">>) -> client_stats;
fqbin_to_msg_name(<<"grpc.lb.v1.LoadBalanceResponse">>) -> load_balance_response;
fqbin_to_msg_name(<<"grpc.lb.v1.InitialLoadBalanceResponse">>) ->
    initial_load_balance_response;
fqbin_to_msg_name(<<"grpc.lb.v1.ServerList">>) -> server_list;
fqbin_to_msg_name(<<"grpc.lb.v1.Server">>) -> server;
fqbin_to_msg_name(<<"google.protobuf.Duration">>) -> duration;
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> timestamp;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(load_balance_request) -> <<"grpc.lb.v1.LoadBalanceRequest">>;
msg_name_to_fqbin(initial_load_balance_request) ->
    <<"grpc.lb.v1.InitialLoadBalanceRequest">>;
msg_name_to_fqbin(client_stats_per_token) -> <<"grpc.lb.v1.ClientStatsPerToken">>;
msg_name_to_fqbin(client_stats) -> <<"grpc.lb.v1.ClientStats">>;
msg_name_to_fqbin(load_balance_response) -> <<"grpc.lb.v1.LoadBalanceResponse">>;
msg_name_to_fqbin(initial_load_balance_response) ->
    <<"grpc.lb.v1.InitialLoadBalanceResponse">>;
msg_name_to_fqbin(server_list) -> <<"grpc.lb.v1.ServerList">>;
msg_name_to_fqbin(server) -> <<"grpc.lb.v1.Server">>;
msg_name_to_fqbin(duration) -> <<"google.protobuf.Duration">>;
msg_name_to_fqbin(timestamp) -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'grpc.lb.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "load_balancer.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["load_balancer.proto", "duration.proto",
     "timestamp.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["load_balancer", "duration", "timestamp"].


get_msg_containment("load_balancer") ->
    [client_stats, client_stats_per_token,
     initial_load_balance_request,
     initial_load_balance_response, load_balance_request,
     load_balance_response, server, server_list];
get_msg_containment("duration") -> [duration];
get_msg_containment("timestamp") -> [timestamp];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("load_balancer") -> 'grpc.lb.v1';
get_pkg_containment("duration") -> 'google.protobuf';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("load_balancer") ->
    ['grpc.lb.v1.LoadBalancer'];
get_service_containment("duration") -> [];
get_service_containment("timestamp") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("load_balancer") ->
    [{'grpc.lb.v1.LoadBalancer', 'BalanceLoad'}];
get_rpc_containment("duration") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("load_balancer") -> [];
get_enum_containment("duration") -> [];
get_enum_containment("timestamp") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.Server">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.ClientStats">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.ServerList">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.LoadBalanceRequest">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.InitialLoadBalanceRequest">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.LoadBalanceResponse">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.InitialLoadBalanceResponse">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Duration">>) -> "duration";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.ClientStatsPerToken">>) ->
    "load_balancer";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"grpc.lb.v1.LoadBalancer">>) ->
    "load_balancer";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"grpc.lb.v1">>) ->
    ["load_balancer"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["duration", "timestamp"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).


descriptor() ->
    <<10, 252, 8, 10, 30, 103, 114, 112, 99, 47, 108, 98,
      47, 118, 49, 47, 108, 111, 97, 100, 95, 98, 97, 108, 97,
      110, 99, 101, 114, 46, 112, 114, 111, 116, 111, 18, 10,
      103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 34, 152, 2,
      10, 11, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116,
      115, 18, 45, 10, 9, 116, 105, 109, 101, 115, 116, 97,
      109, 112, 24, 1, 32, 1, 40, 11, 50, 26, 46, 103, 111,
      111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98,
      117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 112,
      18, 25, 10, 17, 110, 117, 109, 95, 99, 97, 108, 108,
      115, 95, 115, 116, 97, 114, 116, 101, 100, 24, 2, 32, 1,
      40, 3, 18, 26, 10, 18, 110, 117, 109, 95, 99, 97, 108,
      108, 115, 95, 102, 105, 110, 105, 115, 104, 101, 100,
      24, 3, 32, 1, 40, 3, 18, 53, 10, 45, 110, 117, 109, 95,
      99, 97, 108, 108, 115, 95, 102, 105, 110, 105, 115, 104,
      101, 100, 95, 119, 105, 116, 104, 95, 99, 108, 105, 101,
      110, 116, 95, 102, 97, 105, 108, 101, 100, 95, 116, 111,
      95, 115, 101, 110, 100, 24, 6, 32, 1, 40, 3, 18, 41, 10,
      33, 110, 117, 109, 95, 99, 97, 108, 108, 115, 95, 102,
      105, 110, 105, 115, 104, 101, 100, 95, 107, 110, 111,
      119, 110, 95, 114, 101, 99, 101, 105, 118, 101, 100, 24,
      7, 32, 1, 40, 3, 18, 65, 10, 24, 99, 97, 108, 108, 115,
      95, 102, 105, 110, 105, 115, 104, 101, 100, 95, 119,
      105, 116, 104, 95, 100, 114, 111, 112, 24, 8, 32, 3, 40,
      11, 50, 31, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118,
      49, 46, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116,
      115, 80, 101, 114, 84, 111, 107, 101, 110, 34, 68, 10,
      19, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 115,
      80, 101, 114, 84, 111, 107, 101, 110, 18, 26, 10, 18,
      108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99, 101,
      95, 116, 111, 107, 101, 110, 24, 1, 32, 1, 40, 9, 18,
      17, 10, 9, 110, 117, 109, 95, 99, 97, 108, 108, 115, 24,
      2, 32, 1, 40, 3, 34, 41, 10, 25, 73, 110, 105, 116, 105,
      97, 108, 76, 111, 97, 100, 66, 97, 108, 97, 110, 99,
      101, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4,
      110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 34, 125, 10, 26,
      73, 110, 105, 116, 105, 97, 108, 76, 111, 97, 100, 66,
      97, 108, 97, 110, 99, 101, 82, 101, 115, 112, 111, 110,
      115, 101, 18, 30, 10, 22, 108, 111, 97, 100, 95, 98, 97,
      108, 97, 110, 99, 101, 114, 95, 100, 101, 108, 101, 103,
      97, 116, 101, 24, 1, 32, 1, 40, 9, 18, 63, 10, 28, 99,
      108, 105, 101, 110, 116, 95, 115, 116, 97, 116, 115, 95,
      114, 101, 112, 111, 114, 116, 95, 105, 110, 116, 101,
      114, 118, 97, 108, 24, 2, 32, 1, 40, 11, 50, 25, 46,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 46, 68, 117, 114, 97, 116, 105, 111,
      110, 34, 164, 1, 10, 18, 76, 111, 97, 100, 66, 97, 108,
      97, 110, 99, 101, 82, 101, 113, 117, 101, 115, 116, 18,
      64, 10, 15, 105, 110, 105, 116, 105, 97, 108, 95, 114,
      101, 113, 117, 101, 115, 116, 24, 1, 32, 1, 40, 11, 50,
      37, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 46,
      73, 110, 105, 116, 105, 97, 108, 76, 111, 97, 100, 66,
      97, 108, 97, 110, 99, 101, 82, 101, 113, 117, 101, 115,
      116, 72, 0, 18, 47, 10, 12, 99, 108, 105, 101, 110, 116,
      95, 115, 116, 97, 116, 115, 24, 2, 32, 1, 40, 11, 50,
      23, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 46,
      67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 115, 72,
      0, 66, 27, 10, 25, 108, 111, 97, 100, 95, 98, 97, 108,
      97, 110, 99, 101, 95, 114, 101, 113, 117, 101, 115, 116,
      95, 116, 121, 112, 101, 34, 166, 1, 10, 19, 76, 111, 97,
      100, 66, 97, 108, 97, 110, 99, 101, 82, 101, 115, 112,
      111, 110, 115, 101, 18, 66, 10, 16, 105, 110, 105, 116,
      105, 97, 108, 95, 114, 101, 115, 112, 111, 110, 115,
      101, 24, 1, 32, 1, 40, 11, 50, 38, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 73, 110, 105, 116,
      105, 97, 108, 76, 111, 97, 100, 66, 97, 108, 97, 110,
      99, 101, 82, 101, 115, 112, 111, 110, 115, 101, 72, 0,
      18, 45, 10, 11, 115, 101, 114, 118, 101, 114, 95, 108,
      105, 115, 116, 24, 2, 32, 1, 40, 11, 50, 22, 46, 103,
      114, 112, 99, 46, 108, 98, 46, 118, 49, 46, 83, 101,
      114, 118, 101, 114, 76, 105, 115, 116, 72, 0, 66, 28,
      10, 26, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 95, 114, 101, 115, 112, 111, 110, 115, 101, 95,
      116, 121, 112, 101, 34, 84, 10, 6, 83, 101, 114, 118,
      101, 114, 18, 18, 10, 10, 105, 112, 95, 97, 100, 100,
      114, 101, 115, 115, 24, 1, 32, 1, 40, 12, 18, 12, 10, 4,
      112, 111, 114, 116, 24, 2, 32, 1, 40, 5, 18, 26, 10, 18,
      108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99, 101,
      95, 116, 111, 107, 101, 110, 24, 3, 32, 1, 40, 9, 18,
      12, 10, 4, 100, 114, 111, 112, 24, 4, 32, 1, 40, 8, 34,
      49, 10, 10, 83, 101, 114, 118, 101, 114, 76, 105, 115,
      116, 18, 35, 10, 7, 115, 101, 114, 118, 101, 114, 115,
      24, 1, 32, 3, 40, 11, 50, 18, 46, 103, 114, 112, 99, 46,
      108, 98, 46, 118, 49, 46, 83, 101, 114, 118, 101, 114,
      50, 98, 10, 12, 76, 111, 97, 100, 66, 97, 108, 97, 110,
      99, 101, 114, 18, 82, 10, 11, 66, 97, 108, 97, 110, 99,
      101, 76, 111, 97, 100, 18, 30, 46, 103, 114, 112, 99,
      46, 108, 98, 46, 118, 49, 46, 76, 111, 97, 100, 66, 97,
      108, 97, 110, 99, 101, 82, 101, 113, 117, 101, 115, 116,
      26, 31, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49,
      46, 76, 111, 97, 100, 66, 97, 108, 97, 110, 99, 101, 82,
      101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 98, 6,
      112, 114, 111, 116, 111, 51, 10, 101, 10, 30, 103, 111,
      111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98,
      117, 102, 47, 100, 117, 114, 97, 116, 105, 111, 110, 46,
      112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103,
      108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34,
      42, 10, 8, 68, 117, 114, 97, 116, 105, 111, 110, 18, 15,
      10, 7, 115, 101, 99, 111, 110, 100, 115, 24, 1, 32, 1,
      40, 3, 18, 13, 10, 5, 110, 97, 110, 111, 115, 24, 2, 32,
      1, 40, 5, 98, 6, 112, 114, 111, 116, 111, 51, 10, 103,
      10, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111,
      116, 111, 98, 117, 102, 47, 116, 105, 109, 101, 115,
      116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 18, 15,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 34, 43, 10, 9, 84, 105, 109, 101,
      115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101, 99,
      111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13, 10, 5,
      110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112,
      114, 111, 116, 111, 51>>.

descriptor("load_balancer") ->
    <<10, 30, 103, 114, 112, 99, 47, 108, 98, 47, 118, 49,
      47, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 114, 46, 112, 114, 111, 116, 111, 18, 10, 103, 114,
      112, 99, 46, 108, 98, 46, 118, 49, 34, 152, 2, 10, 11,
      67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 115, 18,
      45, 10, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112,
      24, 1, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103,
      108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46,
      84, 105, 109, 101, 115, 116, 97, 109, 112, 18, 25, 10,
      17, 110, 117, 109, 95, 99, 97, 108, 108, 115, 95, 115,
      116, 97, 114, 116, 101, 100, 24, 2, 32, 1, 40, 3, 18,
      26, 10, 18, 110, 117, 109, 95, 99, 97, 108, 108, 115,
      95, 102, 105, 110, 105, 115, 104, 101, 100, 24, 3, 32,
      1, 40, 3, 18, 53, 10, 45, 110, 117, 109, 95, 99, 97,
      108, 108, 115, 95, 102, 105, 110, 105, 115, 104, 101,
      100, 95, 119, 105, 116, 104, 95, 99, 108, 105, 101, 110,
      116, 95, 102, 97, 105, 108, 101, 100, 95, 116, 111, 95,
      115, 101, 110, 100, 24, 6, 32, 1, 40, 3, 18, 41, 10, 33,
      110, 117, 109, 95, 99, 97, 108, 108, 115, 95, 102, 105,
      110, 105, 115, 104, 101, 100, 95, 107, 110, 111, 119,
      110, 95, 114, 101, 99, 101, 105, 118, 101, 100, 24, 7,
      32, 1, 40, 3, 18, 65, 10, 24, 99, 97, 108, 108, 115, 95,
      102, 105, 110, 105, 115, 104, 101, 100, 95, 119, 105,
      116, 104, 95, 100, 114, 111, 112, 24, 8, 32, 3, 40, 11,
      50, 31, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49,
      46, 67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 115,
      80, 101, 114, 84, 111, 107, 101, 110, 34, 68, 10, 19,
      67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 115, 80,
      101, 114, 84, 111, 107, 101, 110, 18, 26, 10, 18, 108,
      111, 97, 100, 95, 98, 97, 108, 97, 110, 99, 101, 95,
      116, 111, 107, 101, 110, 24, 1, 32, 1, 40, 9, 18, 17,
      10, 9, 110, 117, 109, 95, 99, 97, 108, 108, 115, 24, 2,
      32, 1, 40, 3, 34, 41, 10, 25, 73, 110, 105, 116, 105,
      97, 108, 76, 111, 97, 100, 66, 97, 108, 97, 110, 99,
      101, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4,
      110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 34, 125, 10, 26,
      73, 110, 105, 116, 105, 97, 108, 76, 111, 97, 100, 66,
      97, 108, 97, 110, 99, 101, 82, 101, 115, 112, 111, 110,
      115, 101, 18, 30, 10, 22, 108, 111, 97, 100, 95, 98, 97,
      108, 97, 110, 99, 101, 114, 95, 100, 101, 108, 101, 103,
      97, 116, 101, 24, 1, 32, 1, 40, 9, 18, 63, 10, 28, 99,
      108, 105, 101, 110, 116, 95, 115, 116, 97, 116, 115, 95,
      114, 101, 112, 111, 114, 116, 95, 105, 110, 116, 101,
      114, 118, 97, 108, 24, 2, 32, 1, 40, 11, 50, 25, 46,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 46, 68, 117, 114, 97, 116, 105, 111,
      110, 34, 164, 1, 10, 18, 76, 111, 97, 100, 66, 97, 108,
      97, 110, 99, 101, 82, 101, 113, 117, 101, 115, 116, 18,
      64, 10, 15, 105, 110, 105, 116, 105, 97, 108, 95, 114,
      101, 113, 117, 101, 115, 116, 24, 1, 32, 1, 40, 11, 50,
      37, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 46,
      73, 110, 105, 116, 105, 97, 108, 76, 111, 97, 100, 66,
      97, 108, 97, 110, 99, 101, 82, 101, 113, 117, 101, 115,
      116, 72, 0, 18, 47, 10, 12, 99, 108, 105, 101, 110, 116,
      95, 115, 116, 97, 116, 115, 24, 2, 32, 1, 40, 11, 50,
      23, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 46,
      67, 108, 105, 101, 110, 116, 83, 116, 97, 116, 115, 72,
      0, 66, 27, 10, 25, 108, 111, 97, 100, 95, 98, 97, 108,
      97, 110, 99, 101, 95, 114, 101, 113, 117, 101, 115, 116,
      95, 116, 121, 112, 101, 34, 166, 1, 10, 19, 76, 111, 97,
      100, 66, 97, 108, 97, 110, 99, 101, 82, 101, 115, 112,
      111, 110, 115, 101, 18, 66, 10, 16, 105, 110, 105, 116,
      105, 97, 108, 95, 114, 101, 115, 112, 111, 110, 115,
      101, 24, 1, 32, 1, 40, 11, 50, 38, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 73, 110, 105, 116,
      105, 97, 108, 76, 111, 97, 100, 66, 97, 108, 97, 110,
      99, 101, 82, 101, 115, 112, 111, 110, 115, 101, 72, 0,
      18, 45, 10, 11, 115, 101, 114, 118, 101, 114, 95, 108,
      105, 115, 116, 24, 2, 32, 1, 40, 11, 50, 22, 46, 103,
      114, 112, 99, 46, 108, 98, 46, 118, 49, 46, 83, 101,
      114, 118, 101, 114, 76, 105, 115, 116, 72, 0, 66, 28,
      10, 26, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 95, 114, 101, 115, 112, 111, 110, 115, 101, 95,
      116, 121, 112, 101, 34, 84, 10, 6, 83, 101, 114, 118,
      101, 114, 18, 18, 10, 10, 105, 112, 95, 97, 100, 100,
      114, 101, 115, 115, 24, 1, 32, 1, 40, 12, 18, 12, 10, 4,
      112, 111, 114, 116, 24, 2, 32, 1, 40, 5, 18, 26, 10, 18,
      108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99, 101,
      95, 116, 111, 107, 101, 110, 24, 3, 32, 1, 40, 9, 18,
      12, 10, 4, 100, 114, 111, 112, 24, 4, 32, 1, 40, 8, 34,
      49, 10, 10, 83, 101, 114, 118, 101, 114, 76, 105, 115,
      116, 18, 35, 10, 7, 115, 101, 114, 118, 101, 114, 115,
      24, 1, 32, 3, 40, 11, 50, 18, 46, 103, 114, 112, 99, 46,
      108, 98, 46, 118, 49, 46, 83, 101, 114, 118, 101, 114,
      50, 98, 10, 12, 76, 111, 97, 100, 66, 97, 108, 97, 110,
      99, 101, 114, 18, 82, 10, 11, 66, 97, 108, 97, 110, 99,
      101, 76, 111, 97, 100, 18, 30, 46, 103, 114, 112, 99,
      46, 108, 98, 46, 118, 49, 46, 76, 111, 97, 100, 66, 97,
      108, 97, 110, 99, 101, 82, 101, 113, 117, 101, 115, 116,
      26, 31, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49,
      46, 76, 111, 97, 100, 66, 97, 108, 97, 110, 99, 101, 82,
      101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 98, 6,
      112, 114, 111, 116, 111, 51>>;
descriptor("duration") ->
    <<10, 30, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 100, 117, 114, 97, 116,
      105, 111, 110, 46, 112, 114, 111, 116, 111, 18, 15, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 34, 42, 10, 8, 68, 117, 114, 97, 116, 105,
      111, 110, 18, 15, 10, 7, 115, 101, 99, 111, 110, 100,
      115, 24, 1, 32, 1, 40, 3, 18, 13, 10, 5, 110, 97, 110,
      111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112, 114, 111,
      116, 111, 51>>;
descriptor("timestamp") ->
    <<10, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 116, 105, 109, 101,
      115, 116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 18,
      15, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 34, 43, 10, 9, 84, 105, 109,
      101, 115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101,
      99, 111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13, 10,
      5, 110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6,
      112, 114, 111, 116, 111, 51>>;
descriptor(X) -> error({gpb_error, {badname, X}}).


gpb_version_as_string() ->
    "4.7.2".

gpb_version_as_list() ->
    [4,7,2].
