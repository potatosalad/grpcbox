%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.2
-module(grpcbox_load_reporter_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_initial_load_report_response.ImplementationIdentifier'/1, 'enum_value_by_symbol_initial_load_report_response.ImplementationIdentifier'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([descriptor/0, descriptor/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'initial_load_report_response.ImplementationIdentifier'() :: 'IMPL_UNSPECIFIED' | 'CPP' | 'JAVA' | 'GO'.
-export_type(['initial_load_report_response.ImplementationIdentifier'/0]).

%% message types
-type load_report_request() ::
      #{initial_request         => initial_load_report_request() % = 1
       }.

-type initial_load_report_request() ::
      #{load_balanced_hostname  => iodata(),        % = 1
        load_key                => iodata(),        % = 2
        load_report_interval    => duration()       % = 3
       }.

-type load_report_response() ::
      #{initial_response        => initial_load_report_response(), % = 1
        load_balancing_feedback => load_balancing_feedback(), % = 2
        load                    => [load()]         % = 3
       }.

-type initial_load_report_response() ::
      #{load_balancer_id        => iodata(),        % = 1
        implementation_id       => 'IMPL_UNSPECIFIED' | 'CPP' | 'JAVA' | 'GO' | integer(), % = 2, enum initial_load_report_response.ImplementationIdentifier
        server_version          => integer()        % = 3, 32 bits
       }.

-type load_balancing_feedback() ::
      #{server_utilization      => float() | integer() | infinity | '-infinity' | nan, % = 1
        calls_per_second        => float() | integer() | infinity | '-infinity' | nan, % = 2
        errors_per_second       => float() | integer() | infinity | '-infinity' | nan % = 3
       }.

-type load() ::
      #{load_balance_tag        => iodata(),        % = 1
        user_id                 => iodata(),        % = 3
        client_ip_address       => iodata(),        % = 15
        num_calls_started       => integer(),       % = 4, 32 bits
        in_progress_report      => {num_calls_in_progress, integer()}, % oneof
        num_calls_finished_without_error => integer(), % = 6, 32 bits
        num_calls_finished_with_error => integer(), % = 7, 32 bits
        num_calls_finished_with_server_error => integer(), % = 16, 32 bits
        total_bytes_sent        => integer(),       % = 8, 32 bits
        total_bytes_received    => integer(),       % = 9, 32 bits
        total_latency           => duration(),      % = 10
        metric_data             => [call_metric_data()], % = 11
        orphaned_load           => {load_key, iodata()} | {load_key_unknown, boolean() | 0 | 1} | {orphaned_load_identifier, orphaned_load_identifier()} % oneof
       }.

-type call_metric_data() ::
      #{metric_name             => iodata(),        % = 1
        num_calls_finished_with_metric => integer(), % = 2, 32 bits
        total_metric_value      => float() | integer() | infinity | '-infinity' | nan % = 3
       }.

-type orphaned_load_identifier() ::
      #{load_key                => iodata(),        % = 1
        load_balancer_id        => iodata()         % = 2
       }.

-type duration() ::
      #{seconds                 => integer(),       % = 1, 32 bits
        nanos                   => integer()        % = 2, 32 bits
       }.

-export_type(['load_report_request'/0, 'initial_load_report_request'/0, 'load_report_response'/0, 'initial_load_report_response'/0, 'load_balancing_feedback'/0, 'load'/0, 'call_metric_data'/0, 'orphaned_load_identifier'/0, 'duration'/0]).

-spec encode_msg(load_report_request() | initial_load_report_request() | load_report_response() | initial_load_report_response() | load_balancing_feedback() | load() | call_metric_data() | orphaned_load_identifier() | duration(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(load_report_request() | initial_load_report_request() | load_report_response() | initial_load_report_response() | load_balancing_feedback() | load() | call_metric_data() | orphaned_load_identifier() | duration(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      load_report_request ->
	  encode_msg_load_report_request(id(Msg, TrUserData),
					 TrUserData);
      initial_load_report_request ->
	  encode_msg_initial_load_report_request(id(Msg,
						    TrUserData),
						 TrUserData);
      load_report_response ->
	  encode_msg_load_report_response(id(Msg, TrUserData),
					  TrUserData);
      initial_load_report_response ->
	  encode_msg_initial_load_report_response(id(Msg,
						     TrUserData),
						  TrUserData);
      load_balancing_feedback ->
	  encode_msg_load_balancing_feedback(id(Msg, TrUserData),
					     TrUserData);
      load ->
	  encode_msg_load(id(Msg, TrUserData), TrUserData);
      call_metric_data ->
	  encode_msg_call_metric_data(id(Msg, TrUserData),
				      TrUserData);
      orphaned_load_identifier ->
	  encode_msg_orphaned_load_identifier(id(Msg, TrUserData),
					      TrUserData);
      duration ->
	  encode_msg_duration(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_load_report_request(Msg, TrUserData) ->
    encode_msg_load_report_request(Msg, <<>>, TrUserData).


encode_msg_load_report_request(#{} = M, Bin,
			       TrUserData) ->
    case M of
      #{initial_request := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_load_report_request_initial_request(TrF1,
								<<Bin/binary,
								  10>>,
								TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_initial_load_report_request(Msg,
				       TrUserData) ->
    encode_msg_initial_load_report_request(Msg, <<>>,
					   TrUserData).


encode_msg_initial_load_report_request(#{} = M, Bin,
				       TrUserData) ->
    B1 = case M of
	   #{load_balanced_hostname := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{load_key := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{load_report_interval := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_initial_load_report_request_load_report_interval(TrF3,
									     <<B2/binary,
									       26>>,
									     TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_load_report_response(Msg, TrUserData) ->
    encode_msg_load_report_response(Msg, <<>>, TrUserData).


encode_msg_load_report_response(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{initial_response := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_load_report_response_initial_response(TrF1,
								       <<Bin/binary,
									 10>>,
								       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{load_balancing_feedback := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_load_report_response_load_balancing_feedback(TrF2,
									      <<B1/binary,
										18>>,
									      TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{load := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_load_report_response_load(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_initial_load_report_response(Msg,
					TrUserData) ->
    encode_msg_initial_load_report_response(Msg, <<>>,
					    TrUserData).


encode_msg_initial_load_report_response(#{} = M, Bin,
					TrUserData) ->
    B1 = case M of
	   #{load_balancer_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{implementation_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 'IMPL_UNSPECIFIED'; TrF2 =:= 0 -> B1;
		    true ->
			'e_enum_initial_load_report_response.ImplementationIdentifier'(TrF2,
										       <<B1/binary,
											 16>>,
										       'MaybeTrUserData')
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{server_version := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true ->
		   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_load_balancing_feedback(Msg, TrUserData) ->
    encode_msg_load_balancing_feedback(Msg, <<>>,
				       TrUserData).


encode_msg_load_balancing_feedback(#{} = M, Bin,
				   TrUserData) ->
    B1 = case M of
	   #{server_utilization := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0.0 -> Bin;
		    true ->
			e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{calls_per_second := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0.0 -> B1;
		    true ->
			e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{errors_per_second := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0.0 -> B2;
	       true ->
		   e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_load(Msg, TrUserData) ->
    encode_msg_load(Msg, <<>>, TrUserData).


encode_msg_load(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{load_balance_tag := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{user_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{client_ip_address := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case iolist_size(TrF3) of
		   0 -> B2;
		   _ -> e_type_bytes(TrF3, <<B2/binary, 122>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{num_calls_started := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{in_progress_report := F5} ->
	       case id(F5, TrUserData) of
		 {num_calls_in_progress, TF5} ->
		     begin
		       TrTF5 = id(TF5, TrUserData),
		       e_type_int64(TrTF5, <<B4/binary, 40>>, TrUserData)
		     end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{num_calls_finished_without_error := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 0 -> B5;
		    true ->
			e_type_int64(TrF6, <<B5/binary, 48>>, TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{num_calls_finished_with_error := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= 0 -> B6;
		    true ->
			e_type_int64(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{num_calls_finished_with_server_error := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= 0 -> B7;
		    true ->
			e_type_int64(TrF8, <<B7/binary, 128, 1>>, TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{total_bytes_sent := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= 0 -> B8;
		    true ->
			e_type_int64(TrF9, <<B8/binary, 64>>, TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{total_bytes_received := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  if TrF10 =:= 0 -> B9;
		     true ->
			 e_type_int64(TrF10, <<B9/binary, 72>>, TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    B11 = case M of
	    #{total_latency := F11} ->
		begin
		  TrF11 = id(F11, TrUserData),
		  if TrF11 =:= undefined -> B10;
		     true ->
			 e_mfield_load_total_latency(TrF11, <<B10/binary, 82>>,
						     TrUserData)
		  end
		end;
	    _ -> B10
	  end,
    B12 = case M of
	    #{metric_data := F12} ->
		TrF12 = id(F12, TrUserData),
		if TrF12 == [] -> B11;
		   true -> e_field_load_metric_data(TrF12, B11, TrUserData)
		end;
	    _ -> B11
	  end,
    case M of
      #{orphaned_load := F13} ->
	  case id(F13, TrUserData) of
	    {load_key, TF13} ->
		begin
		  TrTF13 = id(TF13, TrUserData),
		  e_type_bytes(TrTF13, <<B12/binary, 98>>, TrUserData)
		end;
	    {load_key_unknown, TF13} ->
		begin
		  TrTF13 = id(TF13, TrUserData),
		  e_type_bool(TrTF13, <<B12/binary, 104>>, TrUserData)
		end;
	    {orphaned_load_identifier, TF13} ->
		begin
		  TrTF13 = id(TF13, TrUserData),
		  e_mfield_load_orphaned_load_identifier(TrTF13,
							 <<B12/binary, 114>>,
							 TrUserData)
		end
	  end;
      _ -> B12
    end.

encode_msg_call_metric_data(Msg, TrUserData) ->
    encode_msg_call_metric_data(Msg, <<>>, TrUserData).


encode_msg_call_metric_data(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{metric_name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{num_calls_finished_with_metric := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{total_metric_value := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0.0 -> B2;
	       true ->
		   e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_orphaned_load_identifier(Msg, TrUserData) ->
    encode_msg_orphaned_load_identifier(Msg, <<>>,
					TrUserData).


encode_msg_orphaned_load_identifier(#{} = M, Bin,
				    TrUserData) ->
    B1 = case M of
	   #{load_key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{load_balancer_id := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_duration(Msg, TrUserData) ->
    encode_msg_duration(Msg, <<>>, TrUserData).


encode_msg_duration(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_mfield_load_report_request_initial_request(Msg, Bin,
					     TrUserData) ->
    SubBin = encode_msg_initial_load_report_request(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_initial_load_report_request_load_report_interval(Msg,
							  Bin, TrUserData) ->
    SubBin = encode_msg_duration(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_load_report_response_initial_response(Msg, Bin,
					       TrUserData) ->
    SubBin = encode_msg_initial_load_report_response(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_load_report_response_load_balancing_feedback(Msg,
						      Bin, TrUserData) ->
    SubBin = encode_msg_load_balancing_feedback(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_load_report_response_load(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_load(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_load_report_response_load([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_load_report_response_load(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_load_report_response_load(Rest, Bin3,
				      TrUserData);
e_field_load_report_response_load([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_load_total_latency(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_duration(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_load_metric_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_call_metric_data(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_load_metric_data([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_mfield_load_metric_data(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_load_metric_data(Rest, Bin3, TrUserData);
e_field_load_metric_data([], Bin, _TrUserData) -> Bin.

e_mfield_load_orphaned_load_identifier(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_orphaned_load_identifier(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_initial_load_report_response.ImplementationIdentifier'('IMPL_UNSPECIFIED',
							       Bin,
							       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_initial_load_report_response.ImplementationIdentifier'('CPP',
							       Bin,
							       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_initial_load_report_response.ImplementationIdentifier'('JAVA',
							       Bin,
							       _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_initial_load_report_response.ImplementationIdentifier'('GO',
							       Bin,
							       _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_initial_load_report_response.ImplementationIdentifier'(V,
							       Bin,
							       _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(load_report_request, Bin,
		  TrUserData) ->
    id(decode_msg_load_report_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(initial_load_report_request, Bin,
		  TrUserData) ->
    id(decode_msg_initial_load_report_request(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(load_report_response, Bin,
		  TrUserData) ->
    id(decode_msg_load_report_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(initial_load_report_response, Bin,
		  TrUserData) ->
    id(decode_msg_initial_load_report_response(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(load_balancing_feedback, Bin,
		  TrUserData) ->
    id(decode_msg_load_balancing_feedback(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(load, Bin, TrUserData) ->
    id(decode_msg_load(Bin, TrUserData), TrUserData);
decode_msg_2_doit(call_metric_data, Bin, TrUserData) ->
    id(decode_msg_call_metric_data(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(orphaned_load_identifier, Bin,
		  TrUserData) ->
    id(decode_msg_orphaned_load_identifier(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(duration, Bin, TrUserData) ->
    id(decode_msg_duration(Bin, TrUserData), TrUserData).



decode_msg_load_report_request(Bin, TrUserData) ->
    dfp_read_field_def_load_report_request(Bin, 0, 0,
					   id('$undef', TrUserData),
					   TrUserData).

dfp_read_field_def_load_report_request(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_load_report_request_initial_request(Rest, Z1,
						Z2, F@_1, TrUserData);
dfp_read_field_def_load_report_request(<<>>, 0, 0, F@_1,
				       _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{initial_request => F@_1}
    end;
dfp_read_field_def_load_report_request(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_load_report_request(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_load_report_request(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_load_report_request(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_load_report_request(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_load_report_request_initial_request(Rest, 0, 0,
						      F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_load_report_request(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_load_report_request(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_load_report_request(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_load_report_request(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_load_report_request(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_load_report_request(<<>>, 0, 0, F@_1,
				      _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{initial_request => F@_1}
    end.

d_field_load_report_request_initial_request(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_load_report_request_initial_request(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
d_field_load_report_request_initial_request(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_initial_load_report_request(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_report_request(RestF, 0, 0,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_initial_load_report_request(Prev,
											NewFValue,
											TrUserData)
					   end,
					   TrUserData).

skip_varint_load_report_request(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_load_report_request(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_load_report_request(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_report_request(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_load_report_request(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_load_report_request(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_load_report_request(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_load_report_request(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_load_report_request(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_load_report_request(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_load_report_request(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_report_request(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_load_report_request(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_load_report_request(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_initial_load_report_request(Bin,
				       TrUserData) ->
    dfp_read_field_def_initial_load_report_request(Bin, 0,
						   0, id(<<>>, TrUserData),
						   id(<<>>, TrUserData),
						   id('$undef', TrUserData),
						   TrUserData).

dfp_read_field_def_initial_load_report_request(<<10,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    d_field_initial_load_report_request_load_balanced_hostname(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData);
dfp_read_field_def_initial_load_report_request(<<18,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    d_field_initial_load_report_request_load_key(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
dfp_read_field_def_initial_load_report_request(<<26,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    d_field_initial_load_report_request_load_report_interval(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, TrUserData);
dfp_read_field_def_initial_load_report_request(<<>>, 0,
					       0, F@_1, F@_2, F@_3, _) ->
    S1 = #{load_balanced_hostname => F@_1,
	   load_key => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{load_report_interval => F@_3}
    end;
dfp_read_field_def_initial_load_report_request(Other,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    dg_read_field_def_initial_load_report_request(Other, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

dg_read_field_def_initial_load_report_request(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_initial_load_report_request(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
dg_read_field_def_initial_load_report_request(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_initial_load_report_request_load_balanced_hostname(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
      18 ->
	  d_field_initial_load_report_request_load_key(Rest, 0, 0,
						       F@_1, F@_2, F@_3,
						       TrUserData);
      26 ->
	  d_field_initial_load_report_request_load_report_interval(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_initial_load_report_request(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    1 ->
		skip_64_initial_load_report_request(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_initial_load_report_request(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  TrUserData);
	    3 ->
		skip_group_initial_load_report_request(Rest, Key bsr 3,
						       0, F@_1, F@_2, F@_3,
						       TrUserData);
	    5 ->
		skip_32_initial_load_report_request(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_initial_load_report_request(<<>>, 0,
					      0, F@_1, F@_2, F@_3, _) ->
    S1 = #{load_balanced_hostname => F@_1,
	   load_key => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{load_report_interval => F@_3}
    end.

d_field_initial_load_report_request_load_balanced_hostname(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData)
    when N < 57 ->
    d_field_initial_load_report_request_load_balanced_hostname(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       TrUserData);
d_field_initial_load_report_request_load_balanced_hostname(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, _, F@_2,
							   F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_initial_load_report_request(RestF, 0,
						   0, NewFValue, F@_2, F@_3,
						   TrUserData).

d_field_initial_load_report_request_load_key(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    d_field_initial_load_report_request_load_key(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
d_field_initial_load_report_request_load_key(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, F@_3,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_initial_load_report_request(RestF, 0,
						   0, F@_1, NewFValue, F@_3,
						   TrUserData).

d_field_initial_load_report_request_load_report_interval(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, TrUserData)
    when N < 57 ->
    d_field_initial_load_report_request_load_report_interval(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     TrUserData);
d_field_initial_load_report_request_load_report_interval(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_duration(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_initial_load_report_request(RestF, 0,
						   0, F@_1, F@_2,
						   if Prev == '$undef' ->
							  NewFValue;
						      true ->
							  merge_msg_duration(Prev,
									     NewFValue,
									     TrUserData)
						   end,
						   TrUserData).

skip_varint_initial_load_report_request(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_initial_load_report_request(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
skip_varint_initial_load_report_request(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_initial_load_report_request(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

skip_length_delimited_initial_load_report_request(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    skip_length_delimited_initial_load_report_request(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
skip_length_delimited_initial_load_report_request(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_initial_load_report_request(Rest2, 0,
						   0, F@_1, F@_2, F@_3,
						   TrUserData).

skip_group_initial_load_report_request(Bin, FNum, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_initial_load_report_request(Rest, 0,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

skip_32_initial_load_report_request(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_initial_load_report_request(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

skip_64_initial_load_report_request(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_initial_load_report_request(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

decode_msg_load_report_response(Bin, TrUserData) ->
    dfp_read_field_def_load_report_response(Bin, 0, 0,
					    id('$undef', TrUserData),
					    id('$undef', TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_load_report_response(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_load_report_response_initial_response(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
dfp_read_field_def_load_report_response(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_load_report_response_load_balancing_feedback(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData);
dfp_read_field_def_load_report_response(<<26,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_load_report_response_load(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_load_report_response(<<>>, 0, 0,
					F@_1, F@_2, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{initial_response => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{load_balancing_feedback => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true -> S3#{load => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_load_report_response(Other, Z1, Z2,
					F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_load_report_response(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_load_report_response(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_load_report_response(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
dg_read_field_def_load_report_response(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_load_report_response_initial_response(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      18 ->
	  d_field_load_report_response_load_balancing_feedback(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
      26 ->
	  d_field_load_report_response_load(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_load_report_response(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    1 ->
		skip_64_load_report_response(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    2 ->
		skip_length_delimited_load_report_response(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   TrUserData);
	    3 ->
		skip_group_load_report_response(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_load_report_response(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData)
	  end
    end;
dg_read_field_def_load_report_response(<<>>, 0, 0, F@_1,
				       F@_2, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{initial_response => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{load_balancing_feedback => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true -> S3#{load => lists_reverse(R1, TrUserData)}
    end.

d_field_load_report_response_initial_response(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    d_field_load_report_response_initial_response(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
d_field_load_report_response_initial_response(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, Prev, F@_2, F@_3,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_initial_load_report_response(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_report_response(RestF, 0, 0,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_initial_load_report_response(Prev,
											  NewFValue,
											  TrUserData)
					    end,
					    F@_2, F@_3, TrUserData).

d_field_load_report_response_load_balancing_feedback(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData)
    when N < 57 ->
    d_field_load_report_response_load_balancing_feedback(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3,
							 TrUserData);
d_field_load_report_response_load_balancing_feedback(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, Prev, F@_3,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_load_balancing_feedback(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_report_response(RestF, 0, 0,
					    F@_1,
					    if Prev == '$undef' -> NewFValue;
					       true ->
						   merge_msg_load_balancing_feedback(Prev,
										     NewFValue,
										     TrUserData)
					    end,
					    F@_3, TrUserData).

d_field_load_report_response_load(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_load_report_response_load(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_load_report_response_load(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_load(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load_report_response(RestF, 0, 0,
					    F@_1, F@_2,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_load_report_response(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_load_report_response(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
skip_varint_load_report_response(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_load_report_response(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_load_report_response(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_load_report_response(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
skip_length_delimited_load_report_response(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_load_report_response(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, TrUserData).

skip_group_load_report_response(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_load_report_response(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_32_load_report_response(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_load_report_response(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_64_load_report_response(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_load_report_response(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

decode_msg_initial_load_report_response(Bin,
					TrUserData) ->
    dfp_read_field_def_initial_load_report_response(Bin, 0,
						    0, id(<<>>, TrUserData),
						    id('IMPL_UNSPECIFIED',
						       TrUserData),
						    id(0, TrUserData),
						    TrUserData).

dfp_read_field_def_initial_load_report_response(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_initial_load_report_response_load_balancer_id(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, TrUserData);
dfp_read_field_def_initial_load_report_response(<<16,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_initial_load_report_response_implementation_id(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData);
dfp_read_field_def_initial_load_report_response(<<24,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_initial_load_report_response_server_version(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
dfp_read_field_def_initial_load_report_response(<<>>, 0,
						0, F@_1, F@_2, F@_3, _) ->
    #{load_balancer_id => F@_1, implementation_id => F@_2,
      server_version => F@_3};
dfp_read_field_def_initial_load_report_response(Other,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    dg_read_field_def_initial_load_report_response(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData).

dg_read_field_def_initial_load_report_response(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_initial_load_report_response(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
dg_read_field_def_initial_load_report_response(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_initial_load_report_response_load_balancer_id(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData);
      16 ->
	  d_field_initial_load_report_response_implementation_id(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
      24 ->
	  d_field_initial_load_report_response_server_version(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_initial_load_report_response(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    1 ->
		skip_64_initial_load_report_response(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_initial_load_report_response(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData);
	    3 ->
		skip_group_initial_load_report_response(Rest, Key bsr 3,
							0, F@_1, F@_2, F@_3,
							TrUserData);
	    5 ->
		skip_32_initial_load_report_response(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_initial_load_report_response(<<>>, 0,
					       0, F@_1, F@_2, F@_3, _) ->
    #{load_balancer_id => F@_1, implementation_id => F@_2,
      server_version => F@_3}.

d_field_initial_load_report_response_load_balancer_id(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    d_field_initial_load_report_response_load_balancer_id(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
d_field_initial_load_report_response_load_balancer_id(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, F@_2, F@_3,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_initial_load_report_response(RestF,
						    0, 0, NewFValue, F@_2, F@_3,
						    TrUserData).

d_field_initial_load_report_response_implementation_id(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData)
    when N < 57 ->
    d_field_initial_load_report_response_implementation_id(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   TrUserData);
d_field_initial_load_report_response_implementation_id(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, _, F@_3,
						       TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_initial_load_report_response.ImplementationIdentifier'(begin
									     <<Res:32/signed-native>> =
										 <<(X
										      bsl
										      N
										      +
										      Acc):32/unsigned-native>>,
									     id(Res,
										TrUserData)
									   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_initial_load_report_response(RestF,
						    0, 0, F@_1, NewFValue, F@_3,
						    TrUserData).

d_field_initial_load_report_response_server_version(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    d_field_initial_load_report_response_server_version(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
d_field_initial_load_report_response_server_version(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, _,
						    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_initial_load_report_response(RestF,
						    0, 0, F@_1, F@_2, NewFValue,
						    TrUserData).

skip_varint_initial_load_report_response(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    skip_varint_initial_load_report_response(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
skip_varint_initial_load_report_response(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    dfp_read_field_def_initial_load_report_response(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_length_delimited_initial_load_report_response(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    skip_length_delimited_initial_load_report_response(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
skip_length_delimited_initial_load_report_response(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_initial_load_report_response(Rest2,
						    0, 0, F@_1, F@_2, F@_3,
						    TrUserData).

skip_group_initial_load_report_response(Bin, FNum, Z2,
					F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_initial_load_report_response(Rest, 0,
						    Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_32_initial_load_report_response(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_initial_load_report_response(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_64_initial_load_report_response(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_initial_load_report_response(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

decode_msg_load_balancing_feedback(Bin, TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Bin, 0, 0,
					       id(0.0, TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData), TrUserData).

dfp_read_field_def_load_balancing_feedback(<<13,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    d_field_load_balancing_feedback_server_utilization(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
dfp_read_field_def_load_balancing_feedback(<<21,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    d_field_load_balancing_feedback_calls_per_second(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData);
dfp_read_field_def_load_balancing_feedback(<<29,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    d_field_load_balancing_feedback_errors_per_second(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
dfp_read_field_def_load_balancing_feedback(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #{server_utilization => F@_1, calls_per_second => F@_2,
      errors_per_second => F@_3};
dfp_read_field_def_load_balancing_feedback(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_load_balancing_feedback(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_load_balancing_feedback(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_load_balancing_feedback(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
dg_read_field_def_load_balancing_feedback(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_load_balancing_feedback_server_utilization(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      21 ->
	  d_field_load_balancing_feedback_calls_per_second(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, TrUserData);
      29 ->
	  d_field_load_balancing_feedback_errors_per_second(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_load_balancing_feedback(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_load_balancing_feedback(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    2 ->
		skip_length_delimited_load_balancing_feedback(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, TrUserData);
	    3 ->
		skip_group_load_balancing_feedback(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
	    5 ->
		skip_32_load_balancing_feedback(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData)
	  end
    end;
dg_read_field_def_load_balancing_feedback(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, _) ->
    #{server_utilization => F@_1, calls_per_second => F@_2,
      errors_per_second => F@_3}.

d_field_load_balancing_feedback_server_utilization(<<0:16,
						     128, 127, Rest/binary>>,
						   Z1, Z2, _, F@_2, F@_3,
						   TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       id(infinity, TrUserData), F@_2,
					       F@_3, TrUserData);
d_field_load_balancing_feedback_server_utilization(<<0:16,
						     128, 255, Rest/binary>>,
						   Z1, Z2, _, F@_2, F@_3,
						   TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       id('-infinity', TrUserData),
					       F@_2, F@_3, TrUserData);
d_field_load_balancing_feedback_server_utilization(<<_:16,
						     1:1, _:7, _:1, 127:7,
						     Rest/binary>>,
						   Z1, Z2, _, F@_2, F@_3,
						   TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       id(nan, TrUserData), F@_2, F@_3,
					       TrUserData);
d_field_load_balancing_feedback_server_utilization(<<Value:32/little-float,
						     Rest/binary>>,
						   Z1, Z2, _, F@_2, F@_3,
						   TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       id(Value, TrUserData), F@_2,
					       F@_3, TrUserData).

d_field_load_balancing_feedback_calls_per_second(<<0:16,
						   128, 127, Rest/binary>>,
						 Z1, Z2, F@_1, _, F@_3,
						 TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, id(infinity, TrUserData),
					       F@_3, TrUserData);
d_field_load_balancing_feedback_calls_per_second(<<0:16,
						   128, 255, Rest/binary>>,
						 Z1, Z2, F@_1, _, F@_3,
						 TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1,
					       id('-infinity', TrUserData),
					       F@_3, TrUserData);
d_field_load_balancing_feedback_calls_per_second(<<_:16,
						   1:1, _:7, _:1, 127:7,
						   Rest/binary>>,
						 Z1, Z2, F@_1, _, F@_3,
						 TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, id(nan, TrUserData), F@_3,
					       TrUserData);
d_field_load_balancing_feedback_calls_per_second(<<Value:32/little-float,
						   Rest/binary>>,
						 Z1, Z2, F@_1, _, F@_3,
						 TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, id(Value, TrUserData),
					       F@_3, TrUserData).

d_field_load_balancing_feedback_errors_per_second(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, _,
						  TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id(infinity, TrUserData),
					       TrUserData);
d_field_load_balancing_feedback_errors_per_second(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, _,
						  TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id('-infinity', TrUserData),
					       TrUserData);
d_field_load_balancing_feedback_errors_per_second(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, _,
						  TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, F@_2, id(nan, TrUserData),
					       TrUserData);
d_field_load_balancing_feedback_errors_per_second(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, _,
						  TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id(Value, TrUserData),
					       TrUserData).

skip_varint_load_balancing_feedback(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_load_balancing_feedback(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
skip_varint_load_balancing_feedback(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_load_balancing_feedback(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    skip_length_delimited_load_balancing_feedback(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
skip_length_delimited_load_balancing_feedback(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_load_balancing_feedback(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, TrUserData).

skip_group_load_balancing_feedback(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_load_balancing_feedback(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, TrUserData).

skip_32_load_balancing_feedback(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData).

skip_64_load_balancing_feedback(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_load_balancing_feedback(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData).

decode_msg_load(Bin, TrUserData) ->
    dfp_read_field_def_load(Bin, 0, 0, id(<<>>, TrUserData),
			    id(<<>>, TrUserData), id(<<>>, TrUserData),
			    id(0, TrUserData), id('$undef', TrUserData),
			    id(0, TrUserData), id(0, TrUserData),
			    id(0, TrUserData), id(0, TrUserData),
			    id(0, TrUserData), id('$undef', TrUserData),
			    id([], TrUserData), id('$undef', TrUserData),
			    TrUserData).

dfp_read_field_def_load(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_load_balance_tag(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<26, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_user_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<122, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_client_ip_address(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_num_calls_started(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<40, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_num_calls_in_progress(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, F@_13,
				       TrUserData);
dfp_read_field_def_load(<<48, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_num_calls_finished_without_error(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, F@_12, F@_13,
						  TrUserData);
dfp_read_field_def_load(<<56, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_num_calls_finished_with_error(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<128, 1, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_num_calls_finished_with_server_error(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_total_bytes_sent(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<72, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_total_bytes_received(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, F@_13,
				      TrUserData);
dfp_read_field_def_load(<<82, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_total_latency(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<90, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_metric_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<98, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_load_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<104, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_load_key_unknown(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_load(<<114, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_load_orphaned_load_identifier(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, TrUserData);
dfp_read_field_def_load(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, R1,
			F@_13, TrUserData) ->
    S1 = #{load_balance_tag => F@_1, user_id => F@_2,
	   client_ip_address => F@_3, num_calls_started => F@_4,
	   num_calls_finished_without_error => F@_6,
	   num_calls_finished_with_error => F@_7,
	   num_calls_finished_with_server_error => F@_8,
	   total_bytes_sent => F@_9,
	   total_bytes_received => F@_10},
    S2 = if F@_5 == '$undef' -> S1;
	    true -> S1#{in_progress_report => F@_5}
	 end,
    S3 = if F@_11 == '$undef' -> S2;
	    true -> S2#{total_latency => F@_11}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{metric_data => lists_reverse(R1, TrUserData)}
	 end,
    if F@_13 == '$undef' -> S4;
       true -> S4#{orphaned_load => F@_13}
    end;
dfp_read_field_def_load(Other, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, TrUserData) ->
    dg_read_field_def_load(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, TrUserData).

dg_read_field_def_load(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_load(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_load(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_load_load_balance_tag(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13,
					TrUserData);
      26 ->
	  d_field_load_user_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData);
      122 ->
	  d_field_load_client_ip_address(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
      32 ->
	  d_field_load_num_calls_started(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
      40 ->
	  d_field_load_num_calls_in_progress(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11, F@_12,
					     F@_13, TrUserData);
      48 ->
	  d_field_load_num_calls_finished_without_error(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							TrUserData);
      56 ->
	  d_field_load_num_calls_finished_with_error(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, TrUserData);
      128 ->
	  d_field_load_num_calls_finished_with_server_error(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13,
							    TrUserData);
      64 ->
	  d_field_load_total_bytes_sent(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13,
					TrUserData);
      72 ->
	  d_field_load_total_bytes_received(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11, F@_12,
					    F@_13, TrUserData);
      82 ->
	  d_field_load_total_latency(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, TrUserData);
      90 ->
	  d_field_load_metric_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      98 ->
	  d_field_load_load_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      104 ->
	  d_field_load_load_key_unknown(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13,
					TrUserData);
      114 ->
	  d_field_load_orphaned_load_identifier(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						F@_12, F@_13, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_load(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				 F@_12, F@_13, TrUserData);
	    1 ->
		skip_64_load(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			     TrUserData);
	    2 ->
		skip_length_delimited_load(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, F@_12, F@_13,
					   TrUserData);
	    3 ->
		skip_group_load(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
	    5 ->
		skip_32_load(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			     TrUserData)
	  end
    end;
dg_read_field_def_load(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, R1,
		       F@_13, TrUserData) ->
    S1 = #{load_balance_tag => F@_1, user_id => F@_2,
	   client_ip_address => F@_3, num_calls_started => F@_4,
	   num_calls_finished_without_error => F@_6,
	   num_calls_finished_with_error => F@_7,
	   num_calls_finished_with_server_error => F@_8,
	   total_bytes_sent => F@_9,
	   total_bytes_received => F@_10},
    S2 = if F@_5 == '$undef' -> S1;
	    true -> S1#{in_progress_report => F@_5}
	 end,
    S3 = if F@_11 == '$undef' -> S2;
	    true -> S2#{total_latency => F@_11}
	 end,
    S4 = if R1 == '$undef' -> S3;
	    true ->
		S3#{metric_data => lists_reverse(R1, TrUserData)}
	 end,
    if F@_13 == '$undef' -> S4;
       true -> S4#{orphaned_load => F@_13}
    end.

d_field_load_load_balance_tag(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData)
    when N < 57 ->
    d_field_load_load_balance_tag(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData);
d_field_load_load_balance_tag(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_load(RestF, 0, 0, NewFValue, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_user_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_load_user_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, TrUserData);
d_field_load_user_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_load(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_client_ip_address(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData)
    when N < 57 ->
    d_field_load_client_ip_address(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, TrUserData);
d_field_load_client_ip_address(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			    F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_load_num_calls_started(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData)
    when N < 57 ->
    d_field_load_num_calls_started(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, TrUserData);
d_field_load_num_calls_started(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_num_calls_in_progress(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData)
    when N < 57 ->
    d_field_load_num_calls_in_progress(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, TrUserData);
d_field_load_num_calls_in_progress(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4,
			    id({num_calls_in_progress, NewFValue}, TrUserData),
			    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			    TrUserData).

d_field_load_num_calls_finished_without_error(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, F@_12, F@_13,
					      TrUserData)
    when N < 57 ->
    d_field_load_num_calls_finished_without_error(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13,
						  TrUserData);
d_field_load_num_calls_finished_without_error(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13,
					      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_num_calls_finished_with_error(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_load_num_calls_finished_with_error(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       TrUserData);
d_field_load_num_calls_finished_with_error(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, _, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_num_calls_finished_with_server_error(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, TrUserData)
    when N < 57 ->
    d_field_load_num_calls_finished_with_server_error(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, TrUserData);
d_field_load_num_calls_finished_with_server_error(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, _,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_total_bytes_sent(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData)
    when N < 57 ->
    d_field_load_total_bytes_sent(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData);
d_field_load_total_bytes_sent(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, _, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_total_bytes_received(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData)
    when N < 57 ->
    d_field_load_total_bytes_received(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, TrUserData);
d_field_load_total_bytes_received(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue,
			    F@_11, F@_12, F@_13, TrUserData).

d_field_load_total_latency(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_load_total_latency(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_load_total_latency(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, Prev, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_duration(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_duration(Prev, NewFValue,
						      TrUserData)
			    end,
			    F@_12, F@_13, TrUserData).

d_field_load_metric_data(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_load_metric_data(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_load_metric_data(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, Prev, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_call_metric_data(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    cons(NewFValue, Prev, TrUserData), F@_13,
			    TrUserData).

d_field_load_load_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_load_load_key(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, TrUserData);
d_field_load_load_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, id({load_key, NewFValue}, TrUserData),
			    TrUserData).

d_field_load_load_key_unknown(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData)
    when N < 57 ->
    d_field_load_load_key_unknown(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData);
d_field_load_load_key_unknown(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12,
			    id({load_key_unknown, NewFValue}, TrUserData),
			    TrUserData).

d_field_load_orphaned_load_identifier(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_load_orphaned_load_identifier(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, F@_13, TrUserData);
d_field_load_orphaned_load_identifier(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_orphaned_load_identifier(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_load(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12,
			    case Prev of
			      '$undef' ->
				  id({orphaned_load_identifier, NewFValue},
				     TrUserData);
			      {orphaned_load_identifier, MVPrev} ->
				  id({orphaned_load_identifier,
				      merge_msg_orphaned_load_identifier(MVPrev,
									 NewFValue,
									 TrUserData)},
				     TrUserData);
			      _ ->
				  id({orphaned_load_identifier, NewFValue},
				     TrUserData)
			    end,
			    TrUserData).

skip_varint_load(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		 F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_load(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		     F@_13, TrUserData);
skip_varint_load(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		 F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_load(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData).

skip_length_delimited_load(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    skip_length_delimited_load(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_length_delimited_load(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_load(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData).

skip_group_load(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_load(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData).

skip_32_load(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
	     F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_load(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData).

skip_64_load(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
	     F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_load(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData).

decode_msg_call_metric_data(Bin, TrUserData) ->
    dfp_read_field_def_call_metric_data(Bin, 0, 0,
					id(<<>>, TrUserData), id(0, TrUserData),
					id(0.0, TrUserData), TrUserData).

dfp_read_field_def_call_metric_data(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_call_metric_data_metric_name(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_call_metric_data(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_call_metric_data_num_calls_finished_with_metric(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData);
dfp_read_field_def_call_metric_data(<<25, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_call_metric_data_total_metric_value(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
dfp_read_field_def_call_metric_data(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    #{metric_name => F@_1,
      num_calls_finished_with_metric => F@_2,
      total_metric_value => F@_3};
dfp_read_field_def_call_metric_data(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    dg_read_field_def_call_metric_data(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

dg_read_field_def_call_metric_data(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_call_metric_data(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
dg_read_field_def_call_metric_data(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_call_metric_data_metric_name(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      16 ->
	  d_field_call_metric_data_num_calls_finished_with_metric(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  TrUserData);
      25 ->
	  d_field_call_metric_data_total_metric_value(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_call_metric_data(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    1 ->
		skip_64_call_metric_data(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    2 ->
		skip_length_delimited_call_metric_data(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_call_metric_data(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_call_metric_data(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData)
	  end
    end;
dg_read_field_def_call_metric_data(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, _) ->
    #{metric_name => F@_1,
      num_calls_finished_with_metric => F@_2,
      total_metric_value => F@_3}.

d_field_call_metric_data_metric_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_call_metric_data_metric_name(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_call_metric_data_metric_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_call_metric_data(RestF, 0, 0,
					NewFValue, F@_2, F@_3, TrUserData).

d_field_call_metric_data_num_calls_finished_with_metric(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData)
    when N < 57 ->
    d_field_call_metric_data_num_calls_finished_with_metric(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3,
							    TrUserData);
d_field_call_metric_data_num_calls_finished_with_metric(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, _, F@_3,
							TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_call_metric_data(RestF, 0, 0, F@_1,
					NewFValue, F@_3, TrUserData).

d_field_call_metric_data_total_metric_value(<<0:48, 240,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _,
					    TrUserData) ->
    dfp_read_field_def_call_metric_data(Rest, Z1, Z2, F@_1,
					F@_2, id(infinity, TrUserData),
					TrUserData);
d_field_call_metric_data_total_metric_value(<<0:48, 240,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _,
					    TrUserData) ->
    dfp_read_field_def_call_metric_data(Rest, Z1, Z2, F@_1,
					F@_2, id('-infinity', TrUserData),
					TrUserData);
d_field_call_metric_data_total_metric_value(<<_:48,
					      15:4, _:4, _:1, 127:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _,
					    TrUserData) ->
    dfp_read_field_def_call_metric_data(Rest, Z1, Z2, F@_1,
					F@_2, id(nan, TrUserData), TrUserData);
d_field_call_metric_data_total_metric_value(<<Value:64/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _,
					    TrUserData) ->
    dfp_read_field_def_call_metric_data(Rest, Z1, Z2, F@_1,
					F@_2, id(Value, TrUserData),
					TrUserData).

skip_varint_call_metric_data(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_call_metric_data(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
skip_varint_call_metric_data(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_call_metric_data(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_length_delimited_call_metric_data(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_call_metric_data(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
skip_length_delimited_call_metric_data(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_call_metric_data(Rest2, 0, 0, F@_1,
					F@_2, F@_3, TrUserData).

skip_group_call_metric_data(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_call_metric_data(Rest, 0, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_32_call_metric_data(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_call_metric_data(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_64_call_metric_data(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_call_metric_data(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

decode_msg_orphaned_load_identifier(Bin, TrUserData) ->
    dfp_read_field_def_orphaned_load_identifier(Bin, 0, 0,
						id(<<>>, TrUserData),
						id(<<>>, TrUserData),
						TrUserData).

dfp_read_field_def_orphaned_load_identifier(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_orphaned_load_identifier_load_key(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_orphaned_load_identifier(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_orphaned_load_identifier_load_balancer_id(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
dfp_read_field_def_orphaned_load_identifier(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #{load_key => F@_1, load_balancer_id => F@_2};
dfp_read_field_def_orphaned_load_identifier(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_orphaned_load_identifier(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_orphaned_load_identifier(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_orphaned_load_identifier(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_orphaned_load_identifier(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_orphaned_load_identifier_load_key(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      18 ->
	  d_field_orphaned_load_identifier_load_balancer_id(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_orphaned_load_identifier(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_orphaned_load_identifier(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_orphaned_load_identifier(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_orphaned_load_identifier(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_orphaned_load_identifier(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_orphaned_load_identifier(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #{load_key => F@_1, load_balancer_id => F@_2}.

d_field_orphaned_load_identifier_load_key(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_orphaned_load_identifier_load_key(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_orphaned_load_identifier_load_key(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_orphaned_load_identifier(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_orphaned_load_identifier_load_balancer_id(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    d_field_orphaned_load_identifier_load_balancer_id(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
d_field_orphaned_load_identifier_load_balancer_id(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_orphaned_load_identifier(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_orphaned_load_identifier(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_orphaned_load_identifier(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_orphaned_load_identifier(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_orphaned_load_identifier(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_orphaned_load_identifier(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_orphaned_load_identifier(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_orphaned_load_identifier(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_orphaned_load_identifier(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_orphaned_load_identifier(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_orphaned_load_identifier(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_orphaned_load_identifier(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_orphaned_load_identifier(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_orphaned_load_identifier(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_orphaned_load_identifier(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_duration(Bin, TrUserData) ->
    dfp_read_field_def_duration(Bin, 0, 0,
				id(0, TrUserData), id(0, TrUserData),
				TrUserData).

dfp_read_field_def_duration(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_duration_seconds(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_duration(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_duration_nanos(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_duration(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_duration(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_duration(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_duration(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_duration(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_duration(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_duration_seconds(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      16 ->
	  d_field_duration_nanos(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_duration(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_duration(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_duration(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_duration(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_duration(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_duration(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_duration_seconds(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_duration_seconds(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_duration_seconds(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_duration(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_duration_nanos(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_duration_nanos(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_duration_nanos(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_duration(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_duration(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_duration(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_duration(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_duration(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_duration(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_duration(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_duration(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_duration(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_duration(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_duration(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_duration(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_duration(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

'd_enum_initial_load_report_response.ImplementationIdentifier'(0) ->
    'IMPL_UNSPECIFIED';
'd_enum_initial_load_report_response.ImplementationIdentifier'(1) ->
    'CPP';
'd_enum_initial_load_report_response.ImplementationIdentifier'(2) ->
    'JAVA';
'd_enum_initial_load_report_response.ImplementationIdentifier'(3) ->
    'GO';
'd_enum_initial_load_report_response.ImplementationIdentifier'(V) ->
    V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      load_report_request ->
	  merge_msg_load_report_request(Prev, New, TrUserData);
      initial_load_report_request ->
	  merge_msg_initial_load_report_request(Prev, New,
						TrUserData);
      load_report_response ->
	  merge_msg_load_report_response(Prev, New, TrUserData);
      initial_load_report_response ->
	  merge_msg_initial_load_report_response(Prev, New,
						 TrUserData);
      load_balancing_feedback ->
	  merge_msg_load_balancing_feedback(Prev, New,
					    TrUserData);
      load -> merge_msg_load(Prev, New, TrUserData);
      call_metric_data ->
	  merge_msg_call_metric_data(Prev, New, TrUserData);
      orphaned_load_identifier ->
	  merge_msg_orphaned_load_identifier(Prev, New,
					     TrUserData);
      duration -> merge_msg_duration(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_load_report_request/3}).
merge_msg_load_report_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{initial_request := PFinitial_request},
       #{initial_request := NFinitial_request}} ->
	  S1#{initial_request =>
		  merge_msg_initial_load_report_request(PFinitial_request,
							NFinitial_request,
							TrUserData)};
      {_, #{initial_request := NFinitial_request}} ->
	  S1#{initial_request => NFinitial_request};
      {#{initial_request := PFinitial_request}, _} ->
	  S1#{initial_request => PFinitial_request};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_initial_load_report_request/3}).
merge_msg_initial_load_report_request(PMsg, NMsg,
				      TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_,
	    #{load_balanced_hostname :=
		  NFload_balanced_hostname}} ->
	       S1#{load_balanced_hostname => NFload_balanced_hostname};
	   {#{load_balanced_hostname := PFload_balanced_hostname},
	    _} ->
	       S1#{load_balanced_hostname => PFload_balanced_hostname};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{load_key := NFload_key}} ->
	       S2#{load_key => NFload_key};
	   {#{load_key := PFload_key}, _} ->
	       S2#{load_key => PFload_key};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{load_report_interval := PFload_report_interval},
       #{load_report_interval := NFload_report_interval}} ->
	  S3#{load_report_interval =>
		  merge_msg_duration(PFload_report_interval,
				     NFload_report_interval, TrUserData)};
      {_,
       #{load_report_interval := NFload_report_interval}} ->
	  S3#{load_report_interval => NFload_report_interval};
      {#{load_report_interval := PFload_report_interval},
       _} ->
	  S3#{load_report_interval => PFload_report_interval};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_load_report_response/3}).
merge_msg_load_report_response(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{initial_response := PFinitial_response},
	    #{initial_response := NFinitial_response}} ->
	       S1#{initial_response =>
		       merge_msg_initial_load_report_response(PFinitial_response,
							      NFinitial_response,
							      TrUserData)};
	   {_, #{initial_response := NFinitial_response}} ->
	       S1#{initial_response => NFinitial_response};
	   {#{initial_response := PFinitial_response}, _} ->
	       S1#{initial_response => PFinitial_response};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{load_balancing_feedback :=
		  PFload_balancing_feedback},
	    #{load_balancing_feedback :=
		  NFload_balancing_feedback}} ->
	       S2#{load_balancing_feedback =>
		       merge_msg_load_balancing_feedback(PFload_balancing_feedback,
							 NFload_balancing_feedback,
							 TrUserData)};
	   {_,
	    #{load_balancing_feedback :=
		  NFload_balancing_feedback}} ->
	       S2#{load_balancing_feedback =>
		       NFload_balancing_feedback};
	   {#{load_balancing_feedback :=
		  PFload_balancing_feedback},
	    _} ->
	       S2#{load_balancing_feedback =>
		       PFload_balancing_feedback};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{load := PFload}, #{load := NFload}} ->
	  S3#{load => 'erlang_++'(PFload, NFload, TrUserData)};
      {_, #{load := NFload}} -> S3#{load => NFload};
      {#{load := PFload}, _} -> S3#{load => PFload};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_initial_load_report_response/3}).
merge_msg_initial_load_report_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{load_balancer_id := NFload_balancer_id}} ->
	       S1#{load_balancer_id => NFload_balancer_id};
	   {#{load_balancer_id := PFload_balancer_id}, _} ->
	       S1#{load_balancer_id => PFload_balancer_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{implementation_id := NFimplementation_id}} ->
	       S2#{implementation_id => NFimplementation_id};
	   {#{implementation_id := PFimplementation_id}, _} ->
	       S2#{implementation_id => PFimplementation_id};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{server_version := NFserver_version}} ->
	  S3#{server_version => NFserver_version};
      {#{server_version := PFserver_version}, _} ->
	  S3#{server_version => PFserver_version};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_load_balancing_feedback/3}).
merge_msg_load_balancing_feedback(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{server_utilization := NFserver_utilization}} ->
	       S1#{server_utilization => NFserver_utilization};
	   {#{server_utilization := PFserver_utilization}, _} ->
	       S1#{server_utilization => PFserver_utilization};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{calls_per_second := NFcalls_per_second}} ->
	       S2#{calls_per_second => NFcalls_per_second};
	   {#{calls_per_second := PFcalls_per_second}, _} ->
	       S2#{calls_per_second => PFcalls_per_second};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{errors_per_second := NFerrors_per_second}} ->
	  S3#{errors_per_second => NFerrors_per_second};
      {#{errors_per_second := PFerrors_per_second}, _} ->
	  S3#{errors_per_second => PFerrors_per_second};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_load/3}).
merge_msg_load(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{load_balance_tag := NFload_balance_tag}} ->
	       S1#{load_balance_tag => NFload_balance_tag};
	   {#{load_balance_tag := PFload_balance_tag}, _} ->
	       S1#{load_balance_tag => PFload_balance_tag};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{user_id := NFuser_id}} ->
	       S2#{user_id => NFuser_id};
	   {#{user_id := PFuser_id}, _} ->
	       S2#{user_id => PFuser_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{client_ip_address := NFclient_ip_address}} ->
	       S3#{client_ip_address => NFclient_ip_address};
	   {#{client_ip_address := PFclient_ip_address}, _} ->
	       S3#{client_ip_address => PFclient_ip_address};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{num_calls_started := NFnum_calls_started}} ->
	       S4#{num_calls_started => NFnum_calls_started};
	   {#{num_calls_started := PFnum_calls_started}, _} ->
	       S4#{num_calls_started => PFnum_calls_started};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{in_progress_report := NFin_progress_report}} ->
	       S5#{in_progress_report => NFin_progress_report};
	   {#{in_progress_report := PFin_progress_report}, _} ->
	       S5#{in_progress_report => PFin_progress_report};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_,
	    #{num_calls_finished_without_error :=
		  NFnum_calls_finished_without_error}} ->
	       S6#{num_calls_finished_without_error =>
		       NFnum_calls_finished_without_error};
	   {#{num_calls_finished_without_error :=
		  PFnum_calls_finished_without_error},
	    _} ->
	       S6#{num_calls_finished_without_error =>
		       PFnum_calls_finished_without_error};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_,
	    #{num_calls_finished_with_error :=
		  NFnum_calls_finished_with_error}} ->
	       S7#{num_calls_finished_with_error =>
		       NFnum_calls_finished_with_error};
	   {#{num_calls_finished_with_error :=
		  PFnum_calls_finished_with_error},
	    _} ->
	       S7#{num_calls_finished_with_error =>
		       PFnum_calls_finished_with_error};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {_,
	    #{num_calls_finished_with_server_error :=
		  NFnum_calls_finished_with_server_error}} ->
	       S8#{num_calls_finished_with_server_error =>
		       NFnum_calls_finished_with_server_error};
	   {#{num_calls_finished_with_server_error :=
		  PFnum_calls_finished_with_server_error},
	    _} ->
	       S8#{num_calls_finished_with_server_error =>
		       PFnum_calls_finished_with_server_error};
	   _ -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {_, #{total_bytes_sent := NFtotal_bytes_sent}} ->
		S9#{total_bytes_sent => NFtotal_bytes_sent};
	    {#{total_bytes_sent := PFtotal_bytes_sent}, _} ->
		S9#{total_bytes_sent => PFtotal_bytes_sent};
	    _ -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {_,
	     #{total_bytes_received := NFtotal_bytes_received}} ->
		S10#{total_bytes_received => NFtotal_bytes_received};
	    {#{total_bytes_received := PFtotal_bytes_received},
	     _} ->
		S10#{total_bytes_received => PFtotal_bytes_received};
	    _ -> S10
	  end,
    S12 = case {PMsg, NMsg} of
	    {#{total_latency := PFtotal_latency},
	     #{total_latency := NFtotal_latency}} ->
		S11#{total_latency =>
			 merge_msg_duration(PFtotal_latency, NFtotal_latency,
					    TrUserData)};
	    {_, #{total_latency := NFtotal_latency}} ->
		S11#{total_latency => NFtotal_latency};
	    {#{total_latency := PFtotal_latency}, _} ->
		S11#{total_latency => PFtotal_latency};
	    {_, _} -> S11
	  end,
    S13 = case {PMsg, NMsg} of
	    {#{metric_data := PFmetric_data},
	     #{metric_data := NFmetric_data}} ->
		S12#{metric_data =>
			 'erlang_++'(PFmetric_data, NFmetric_data, TrUserData)};
	    {_, #{metric_data := NFmetric_data}} ->
		S12#{metric_data => NFmetric_data};
	    {#{metric_data := PFmetric_data}, _} ->
		S12#{metric_data => PFmetric_data};
	    {_, _} -> S12
	  end,
    case {PMsg, NMsg} of
      {#{orphaned_load :=
	     {orphaned_load_identifier, OPForphaned_load}},
       #{orphaned_load :=
	     {orphaned_load_identifier, ONForphaned_load}}} ->
	  S13#{orphaned_load =>
		   {orphaned_load_identifier,
		    merge_msg_orphaned_load_identifier(OPForphaned_load,
						       ONForphaned_load,
						       TrUserData)}};
      {_, #{orphaned_load := NForphaned_load}} ->
	  S13#{orphaned_load => NForphaned_load};
      {#{orphaned_load := PForphaned_load}, _} ->
	  S13#{orphaned_load => PForphaned_load};
      {_, _} -> S13
    end.

-compile({nowarn_unused_function,merge_msg_call_metric_data/3}).
merge_msg_call_metric_data(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{metric_name := NFmetric_name}} ->
	       S1#{metric_name => NFmetric_name};
	   {#{metric_name := PFmetric_name}, _} ->
	       S1#{metric_name => PFmetric_name};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_,
	    #{num_calls_finished_with_metric :=
		  NFnum_calls_finished_with_metric}} ->
	       S2#{num_calls_finished_with_metric =>
		       NFnum_calls_finished_with_metric};
	   {#{num_calls_finished_with_metric :=
		  PFnum_calls_finished_with_metric},
	    _} ->
	       S2#{num_calls_finished_with_metric =>
		       PFnum_calls_finished_with_metric};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{total_metric_value := NFtotal_metric_value}} ->
	  S3#{total_metric_value => NFtotal_metric_value};
      {#{total_metric_value := PFtotal_metric_value}, _} ->
	  S3#{total_metric_value => PFtotal_metric_value};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_orphaned_load_identifier/3}).
merge_msg_orphaned_load_identifier(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{load_key := NFload_key}} ->
	       S1#{load_key => NFload_key};
	   {#{load_key := PFload_key}, _} ->
	       S1#{load_key => PFload_key};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{load_balancer_id := NFload_balancer_id}} ->
	  S2#{load_balancer_id => NFload_balancer_id};
      {#{load_balancer_id := PFload_balancer_id}, _} ->
	  S2#{load_balancer_id => PFload_balancer_id};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_duration/3}).
merge_msg_duration(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      load_report_request ->
	  v_msg_load_report_request(Msg, [MsgName], TrUserData);
      initial_load_report_request ->
	  v_msg_initial_load_report_request(Msg, [MsgName],
					    TrUserData);
      load_report_response ->
	  v_msg_load_report_response(Msg, [MsgName], TrUserData);
      initial_load_report_response ->
	  v_msg_initial_load_report_response(Msg, [MsgName],
					     TrUserData);
      load_balancing_feedback ->
	  v_msg_load_balancing_feedback(Msg, [MsgName],
					TrUserData);
      load -> v_msg_load(Msg, [MsgName], TrUserData);
      call_metric_data ->
	  v_msg_call_metric_data(Msg, [MsgName], TrUserData);
      orphaned_load_identifier ->
	  v_msg_orphaned_load_identifier(Msg, [MsgName],
					 TrUserData);
      duration -> v_msg_duration(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_load_report_request/3}).
-dialyzer({nowarn_function,v_msg_load_report_request/3}).
v_msg_load_report_request(#{} = M, Path, TrUserData) ->
    case M of
      #{initial_request := F1} ->
	  v_msg_initial_load_report_request(F1,
					    [initial_request | Path],
					    TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (initial_request) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_load_report_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   load_report_request},
		  M, Path);
v_msg_load_report_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, load_report_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_initial_load_report_request/3}).
-dialyzer({nowarn_function,v_msg_initial_load_report_request/3}).
v_msg_initial_load_report_request(#{} = M, Path,
				  TrUserData) ->
    case M of
      #{load_balanced_hostname := F1} ->
	  v_type_string(F1, [load_balanced_hostname | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{load_key := F2} ->
	  v_type_bytes(F2, [load_key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{load_report_interval := F3} ->
	  v_msg_duration(F3, [load_report_interval | Path],
			 TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (load_balanced_hostname) -> ok;
		      (load_key) -> ok;
		      (load_report_interval) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_initial_load_report_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   initial_load_report_request},
		  M, Path);
v_msg_initial_load_report_request(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   initial_load_report_request},
		  X, Path).

-compile({nowarn_unused_function,v_msg_load_report_response/3}).
-dialyzer({nowarn_function,v_msg_load_report_response/3}).
v_msg_load_report_response(#{} = M, Path, TrUserData) ->
    case M of
      #{initial_response := F1} ->
	  v_msg_initial_load_report_response(F1,
					     [initial_response | Path],
					     TrUserData);
      _ -> ok
    end,
    case M of
      #{load_balancing_feedback := F2} ->
	  v_msg_load_balancing_feedback(F2,
					[load_balancing_feedback | Path],
					TrUserData);
      _ -> ok
    end,
    case M of
      #{load := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_load(Elem, [load | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, load}}, F3,
			       [load | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (initial_response) -> ok;
		      (load_balancing_feedback) -> ok;
		      (load) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_load_report_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   load_report_response},
		  M, Path);
v_msg_load_report_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, load_report_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_initial_load_report_response/3}).
-dialyzer({nowarn_function,v_msg_initial_load_report_response/3}).
v_msg_initial_load_report_response(#{} = M, Path,
				   TrUserData) ->
    case M of
      #{load_balancer_id := F1} ->
	  v_type_string(F1, [load_balancer_id | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{implementation_id := F2} ->
	  'v_enum_initial_load_report_response.ImplementationIdentifier'(F2,
									 [implementation_id
									  | Path],
									 TrUserData);
      _ -> ok
    end,
    case M of
      #{server_version := F3} ->
	  v_type_int64(F3, [server_version | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (load_balancer_id) -> ok;
		      (implementation_id) -> ok;
		      (server_version) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_initial_load_report_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   initial_load_report_response},
		  M, Path);
v_msg_initial_load_report_response(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   initial_load_report_response},
		  X, Path).

-compile({nowarn_unused_function,v_msg_load_balancing_feedback/3}).
-dialyzer({nowarn_function,v_msg_load_balancing_feedback/3}).
v_msg_load_balancing_feedback(#{} = M, Path,
			      TrUserData) ->
    case M of
      #{server_utilization := F1} ->
	  v_type_float(F1, [server_utilization | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{calls_per_second := F2} ->
	  v_type_float(F2, [calls_per_second | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{errors_per_second := F3} ->
	  v_type_float(F3, [errors_per_second | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (server_utilization) -> ok;
		      (calls_per_second) -> ok;
		      (errors_per_second) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_load_balancing_feedback(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   load_balancing_feedback},
		  M, Path);
v_msg_load_balancing_feedback(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, load_balancing_feedback},
		  X, Path).

-compile({nowarn_unused_function,v_msg_load/3}).
-dialyzer({nowarn_function,v_msg_load/3}).
v_msg_load(#{} = M, Path, TrUserData) ->
    case M of
      #{load_balance_tag := F1} ->
	  v_type_string(F1, [load_balance_tag | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{user_id := F2} ->
	  v_type_string(F2, [user_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{client_ip_address := F3} ->
	  v_type_bytes(F3, [client_ip_address | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_started := F4} ->
	  v_type_int64(F4, [num_calls_started | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{in_progress_report := {num_calls_in_progress, OF5}} ->
	  v_type_int64(OF5,
		       [num_calls_in_progress, in_progress_report | Path],
		       TrUserData);
      #{in_progress_report := F5} ->
	  mk_type_error(invalid_oneof, F5,
			[in_progress_report | Path]);
      _ -> ok
    end,
    case M of
      #{num_calls_finished_without_error := F6} ->
	  v_type_int64(F6,
		       [num_calls_finished_without_error | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_finished_with_error := F7} ->
	  v_type_int64(F7, [num_calls_finished_with_error | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_finished_with_server_error := F8} ->
	  v_type_int64(F8,
		       [num_calls_finished_with_server_error | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{total_bytes_sent := F9} ->
	  v_type_int64(F9, [total_bytes_sent | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{total_bytes_received := F10} ->
	  v_type_int64(F10, [total_bytes_received | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{total_latency := F11} ->
	  v_msg_duration(F11, [total_latency | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{metric_data := F12} ->
	  if is_list(F12) ->
		 _ = [v_msg_call_metric_data(Elem, [metric_data | Path],
					     TrUserData)
		      || Elem <- F12],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, call_metric_data}},
			       F12, [metric_data | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{orphaned_load := {load_key, OF13}} ->
	  v_type_bytes(OF13, [load_key, orphaned_load | Path],
		       TrUserData);
      #{orphaned_load := {load_key_unknown, OF13}} ->
	  v_type_bool(OF13,
		      [load_key_unknown, orphaned_load | Path], TrUserData);
      #{orphaned_load := {orphaned_load_identifier, OF13}} ->
	  v_msg_orphaned_load_identifier(OF13,
					 [orphaned_load_identifier,
					  orphaned_load
					  | Path],
					 TrUserData);
      #{orphaned_load := F13} ->
	  mk_type_error(invalid_oneof, F13,
			[orphaned_load | Path]);
      _ -> ok
    end,
    lists:foreach(fun (load_balance_tag) -> ok;
		      (user_id) -> ok;
		      (client_ip_address) -> ok;
		      (num_calls_started) -> ok;
		      (in_progress_report) -> ok;
		      (num_calls_finished_without_error) -> ok;
		      (num_calls_finished_with_error) -> ok;
		      (num_calls_finished_with_server_error) -> ok;
		      (total_bytes_sent) -> ok;
		      (total_bytes_received) -> ok;
		      (total_latency) -> ok;
		      (metric_data) -> ok;
		      (orphaned_load) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_load(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   load},
		  M, Path);
v_msg_load(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, load}, X, Path).

-compile({nowarn_unused_function,v_msg_call_metric_data/3}).
-dialyzer({nowarn_function,v_msg_call_metric_data/3}).
v_msg_call_metric_data(#{} = M, Path, TrUserData) ->
    case M of
      #{metric_name := F1} ->
	  v_type_string(F1, [metric_name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{num_calls_finished_with_metric := F2} ->
	  v_type_int64(F2,
		       [num_calls_finished_with_metric | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{total_metric_value := F3} ->
	  v_type_double(F3, [total_metric_value | Path],
			TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (metric_name) -> ok;
		      (num_calls_finished_with_metric) -> ok;
		      (total_metric_value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_call_metric_data(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   call_metric_data},
		  M, Path);
v_msg_call_metric_data(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, call_metric_data}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_orphaned_load_identifier/3}).
-dialyzer({nowarn_function,v_msg_orphaned_load_identifier/3}).
v_msg_orphaned_load_identifier(#{} = M, Path,
			       TrUserData) ->
    case M of
      #{load_key := F1} ->
	  v_type_bytes(F1, [load_key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{load_balancer_id := F2} ->
	  v_type_string(F2, [load_balancer_id | Path],
			TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (load_key) -> ok;
		      (load_balancer_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_orphaned_load_identifier(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   orphaned_load_identifier},
		  M, Path);
v_msg_orphaned_load_identifier(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, orphaned_load_identifier},
		  X, Path).

-compile({nowarn_unused_function,v_msg_duration/3}).
-dialyzer({nowarn_function,v_msg_duration/3}).
v_msg_duration(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_duration(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   duration},
		  M, Path);
v_msg_duration(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, duration}, X, Path).

-compile({nowarn_unused_function,'v_enum_initial_load_report_response.ImplementationIdentifier'/3}).
-dialyzer({nowarn_function,'v_enum_initial_load_report_response.ImplementationIdentifier'/3}).
'v_enum_initial_load_report_response.ImplementationIdentifier'('IMPL_UNSPECIFIED',
							       _Path,
							       _TrUserData) ->
    ok;
'v_enum_initial_load_report_response.ImplementationIdentifier'('CPP',
							       _Path,
							       _TrUserData) ->
    ok;
'v_enum_initial_load_report_response.ImplementationIdentifier'('JAVA',
							       _Path,
							       _TrUserData) ->
    ok;
'v_enum_initial_load_report_response.ImplementationIdentifier'('GO',
							       _Path,
							       _TrUserData) ->
    ok;
'v_enum_initial_load_report_response.ImplementationIdentifier'(V,
							       Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_initial_load_report_response.ImplementationIdentifier'(X,
							       Path,
							       _TrUserData) ->
    mk_type_error({invalid_enum,
		   'initial_load_report_response.ImplementationIdentifier'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum,
       'initial_load_report_response.ImplementationIdentifier'},
      [{'IMPL_UNSPECIFIED', 0}, {'CPP', 1}, {'JAVA', 2},
       {'GO', 3}]},
     {{msg, load_report_request},
      [#{name => initial_request, fnum => 1, rnum => 2,
	 type => {msg, initial_load_report_request},
	 occurrence => optional, opts => []}]},
     {{msg, initial_load_report_request},
      [#{name => load_balanced_hostname, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => load_key, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => load_report_interval, fnum => 3, rnum => 4,
	 type => {msg, duration}, occurrence => optional,
	 opts => []}]},
     {{msg, load_report_response},
      [#{name => initial_response, fnum => 1, rnum => 2,
	 type => {msg, initial_load_report_response},
	 occurrence => optional, opts => []},
       #{name => load_balancing_feedback, fnum => 2, rnum => 3,
	 type => {msg, load_balancing_feedback},
	 occurrence => optional, opts => []},
       #{name => load, fnum => 3, rnum => 4,
	 type => {msg, load}, occurrence => repeated,
	 opts => []}]},
     {{msg, initial_load_report_response},
      [#{name => load_balancer_id, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => implementation_id, fnum => 2, rnum => 3,
	 type =>
	     {enum,
	      'initial_load_report_response.ImplementationIdentifier'},
	 occurrence => optional, opts => []},
       #{name => server_version, fnum => 3, rnum => 4,
	 type => int64, occurrence => optional, opts => []}]},
     {{msg, load_balancing_feedback},
      [#{name => server_utilization, fnum => 1, rnum => 2,
	 type => float, occurrence => optional, opts => []},
       #{name => calls_per_second, fnum => 2, rnum => 3,
	 type => float, occurrence => optional, opts => []},
       #{name => errors_per_second, fnum => 3, rnum => 4,
	 type => float, occurrence => optional, opts => []}]},
     {{msg, load},
      [#{name => load_balance_tag, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => user_id, fnum => 3, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => client_ip_address, fnum => 15, rnum => 4,
	 type => bytes, occurrence => optional, opts => []},
       #{name => num_calls_started, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => in_progress_report, rnum => 6,
	 fields =>
	     [#{name => num_calls_in_progress, fnum => 5, rnum => 6,
		type => int64, occurrence => optional, opts => []}]},
       #{name => num_calls_finished_without_error, fnum => 6,
	 rnum => 7, type => int64, occurrence => optional,
	 opts => []},
       #{name => num_calls_finished_with_error, fnum => 7,
	 rnum => 8, type => int64, occurrence => optional,
	 opts => []},
       #{name => num_calls_finished_with_server_error,
	 fnum => 16, rnum => 9, type => int64,
	 occurrence => optional, opts => []},
       #{name => total_bytes_sent, fnum => 8, rnum => 10,
	 type => int64, occurrence => optional, opts => []},
       #{name => total_bytes_received, fnum => 9, rnum => 11,
	 type => int64, occurrence => optional, opts => []},
       #{name => total_latency, fnum => 10, rnum => 12,
	 type => {msg, duration}, occurrence => optional,
	 opts => []},
       #{name => metric_data, fnum => 11, rnum => 13,
	 type => {msg, call_metric_data}, occurrence => repeated,
	 opts => []},
       #{name => orphaned_load, rnum => 14,
	 fields =>
	     [#{name => load_key, fnum => 12, rnum => 14,
		type => bytes, occurrence => optional,
		opts => [deprecated]},
	      #{name => load_key_unknown, fnum => 13, rnum => 14,
		type => bool, occurrence => optional, opts => []},
	      #{name => orphaned_load_identifier, fnum => 14,
		rnum => 14, type => {msg, orphaned_load_identifier},
		occurrence => optional, opts => []}]}]},
     {{msg, call_metric_data},
      [#{name => metric_name, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => num_calls_finished_with_metric, fnum => 2,
	 rnum => 3, type => int64, occurrence => optional,
	 opts => []},
       #{name => total_metric_value, fnum => 3, rnum => 4,
	 type => double, occurrence => optional, opts => []}]},
     {{msg, orphaned_load_identifier},
      [#{name => load_key, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => load_balancer_id, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, duration},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [load_report_request, initial_load_report_request,
     load_report_response, initial_load_report_response,
     load_balancing_feedback, load, call_metric_data,
     orphaned_load_identifier, duration].


get_group_names() -> [].


get_msg_or_group_names() ->
    [load_report_request, initial_load_report_request,
     load_report_response, initial_load_report_response,
     load_balancing_feedback, load, call_metric_data,
     orphaned_load_identifier, duration].


get_enum_names() ->
    ['initial_load_report_response.ImplementationIdentifier'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(load_report_request) ->
    [#{name => initial_request, fnum => 1, rnum => 2,
       type => {msg, initial_load_report_request},
       occurrence => optional, opts => []}];
find_msg_def(initial_load_report_request) ->
    [#{name => load_balanced_hostname, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => load_key, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => load_report_interval, fnum => 3, rnum => 4,
       type => {msg, duration}, occurrence => optional,
       opts => []}];
find_msg_def(load_report_response) ->
    [#{name => initial_response, fnum => 1, rnum => 2,
       type => {msg, initial_load_report_response},
       occurrence => optional, opts => []},
     #{name => load_balancing_feedback, fnum => 2, rnum => 3,
       type => {msg, load_balancing_feedback},
       occurrence => optional, opts => []},
     #{name => load, fnum => 3, rnum => 4,
       type => {msg, load}, occurrence => repeated,
       opts => []}];
find_msg_def(initial_load_report_response) ->
    [#{name => load_balancer_id, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => implementation_id, fnum => 2, rnum => 3,
       type =>
	   {enum,
	    'initial_load_report_response.ImplementationIdentifier'},
       occurrence => optional, opts => []},
     #{name => server_version, fnum => 3, rnum => 4,
       type => int64, occurrence => optional, opts => []}];
find_msg_def(load_balancing_feedback) ->
    [#{name => server_utilization, fnum => 1, rnum => 2,
       type => float, occurrence => optional, opts => []},
     #{name => calls_per_second, fnum => 2, rnum => 3,
       type => float, occurrence => optional, opts => []},
     #{name => errors_per_second, fnum => 3, rnum => 4,
       type => float, occurrence => optional, opts => []}];
find_msg_def(load) ->
    [#{name => load_balance_tag, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => user_id, fnum => 3, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => client_ip_address, fnum => 15, rnum => 4,
       type => bytes, occurrence => optional, opts => []},
     #{name => num_calls_started, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => in_progress_report, rnum => 6,
       fields =>
	   [#{name => num_calls_in_progress, fnum => 5, rnum => 6,
	      type => int64, occurrence => optional, opts => []}]},
     #{name => num_calls_finished_without_error, fnum => 6,
       rnum => 7, type => int64, occurrence => optional,
       opts => []},
     #{name => num_calls_finished_with_error, fnum => 7,
       rnum => 8, type => int64, occurrence => optional,
       opts => []},
     #{name => num_calls_finished_with_server_error,
       fnum => 16, rnum => 9, type => int64,
       occurrence => optional, opts => []},
     #{name => total_bytes_sent, fnum => 8, rnum => 10,
       type => int64, occurrence => optional, opts => []},
     #{name => total_bytes_received, fnum => 9, rnum => 11,
       type => int64, occurrence => optional, opts => []},
     #{name => total_latency, fnum => 10, rnum => 12,
       type => {msg, duration}, occurrence => optional,
       opts => []},
     #{name => metric_data, fnum => 11, rnum => 13,
       type => {msg, call_metric_data}, occurrence => repeated,
       opts => []},
     #{name => orphaned_load, rnum => 14,
       fields =>
	   [#{name => load_key, fnum => 12, rnum => 14,
	      type => bytes, occurrence => optional,
	      opts => [deprecated]},
	    #{name => load_key_unknown, fnum => 13, rnum => 14,
	      type => bool, occurrence => optional, opts => []},
	    #{name => orphaned_load_identifier, fnum => 14,
	      rnum => 14, type => {msg, orphaned_load_identifier},
	      occurrence => optional, opts => []}]}];
find_msg_def(call_metric_data) ->
    [#{name => metric_name, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => num_calls_finished_with_metric, fnum => 2,
       rnum => 3, type => int64, occurrence => optional,
       opts => []},
     #{name => total_metric_value, fnum => 3, rnum => 4,
       type => double, occurrence => optional, opts => []}];
find_msg_def(orphaned_load_identifier) ->
    [#{name => load_key, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => load_balancer_id, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def(duration) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('initial_load_report_response.ImplementationIdentifier') ->
    [{'IMPL_UNSPECIFIED', 0}, {'CPP', 1}, {'JAVA', 2},
     {'GO', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('initial_load_report_response.ImplementationIdentifier',
		     Value) ->
    'enum_symbol_by_value_initial_load_report_response.ImplementationIdentifier'(Value).


enum_value_by_symbol('initial_load_report_response.ImplementationIdentifier',
		     Sym) ->
    'enum_value_by_symbol_initial_load_report_response.ImplementationIdentifier'(Sym).


'enum_symbol_by_value_initial_load_report_response.ImplementationIdentifier'(0) ->
    'IMPL_UNSPECIFIED';
'enum_symbol_by_value_initial_load_report_response.ImplementationIdentifier'(1) ->
    'CPP';
'enum_symbol_by_value_initial_load_report_response.ImplementationIdentifier'(2) ->
    'JAVA';
'enum_symbol_by_value_initial_load_report_response.ImplementationIdentifier'(3) ->
    'GO'.


'enum_value_by_symbol_initial_load_report_response.ImplementationIdentifier'('IMPL_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_initial_load_report_response.ImplementationIdentifier'('CPP') ->
    1;
'enum_value_by_symbol_initial_load_report_response.ImplementationIdentifier'('JAVA') ->
    2;
'enum_value_by_symbol_initial_load_report_response.ImplementationIdentifier'('GO') ->
    3.


get_service_names() -> ['grpc.lb.v1.LoadReporter'].


get_service_def('grpc.lb.v1.LoadReporter') ->
    {{service, 'grpc.lb.v1.LoadReporter'},
     [#{name => 'ReportLoad', input => load_report_request,
	output => load_report_response, input_stream => true,
	output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('grpc.lb.v1.LoadReporter') ->
    ['ReportLoad'];
get_rpc_names(_) -> error.


find_rpc_def('grpc.lb.v1.LoadReporter', RpcName) ->
    'find_rpc_def_grpc.lb.v1.LoadReporter'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_grpc.lb.v1.LoadReporter'('ReportLoad') ->
    #{name => 'ReportLoad', input => load_report_request,
      output => load_report_response, input_stream => true,
      output_stream => true, opts => []};
'find_rpc_def_grpc.lb.v1.LoadReporter'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"grpc.lb.v1.LoadReporter">>) ->
    'grpc.lb.v1.LoadReporter';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('grpc.lb.v1.LoadReporter') ->
    <<"grpc.lb.v1.LoadReporter">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"grpc.lb.v1.LoadReporter">>, <<"ReportLoad">>) ->
    {'grpc.lb.v1.LoadReporter', 'ReportLoad'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('grpc.lb.v1.LoadReporter',
			       'ReportLoad') ->
    {<<"grpc.lb.v1.LoadReporter">>, <<"ReportLoad">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"grpc.lb.v1.LoadReportRequest">>) -> load_report_request;
fqbin_to_msg_name(<<"grpc.lb.v1.InitialLoadReportRequest">>) ->
    initial_load_report_request;
fqbin_to_msg_name(<<"grpc.lb.v1.LoadReportResponse">>) -> load_report_response;
fqbin_to_msg_name(<<"grpc.lb.v1.InitialLoadReportResponse">>) ->
    initial_load_report_response;
fqbin_to_msg_name(<<"grpc.lb.v1.LoadBalancingFeedback">>) -> load_balancing_feedback;
fqbin_to_msg_name(<<"grpc.lb.v1.Load">>) -> load;
fqbin_to_msg_name(<<"grpc.lb.v1.CallMetricData">>) -> call_metric_data;
fqbin_to_msg_name(<<"grpc.lb.v1.OrphanedLoadIdentifier">>) -> orphaned_load_identifier;
fqbin_to_msg_name(<<"google.protobuf.Duration">>) -> duration;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(load_report_request) -> <<"grpc.lb.v1.LoadReportRequest">>;
msg_name_to_fqbin(initial_load_report_request) ->
    <<"grpc.lb.v1.InitialLoadReportRequest">>;
msg_name_to_fqbin(load_report_response) -> <<"grpc.lb.v1.LoadReportResponse">>;
msg_name_to_fqbin(initial_load_report_response) ->
    <<"grpc.lb.v1.InitialLoadReportResponse">>;
msg_name_to_fqbin(load_balancing_feedback) -> <<"grpc.lb.v1.LoadBalancingFeedback">>;
msg_name_to_fqbin(load) -> <<"grpc.lb.v1.Load">>;
msg_name_to_fqbin(call_metric_data) -> <<"grpc.lb.v1.CallMetricData">>;
msg_name_to_fqbin(orphaned_load_identifier) -> <<"grpc.lb.v1.OrphanedLoadIdentifier">>;
msg_name_to_fqbin(duration) -> <<"google.protobuf.Duration">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier">>) ->
    'initial_load_report_response.ImplementationIdentifier';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('initial_load_report_response.ImplementationIdentifier') ->
    <<"grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'grpc.lb.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "load_reporter.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["load_reporter.proto", "duration.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["load_reporter", "duration"].


get_msg_containment("load_reporter") ->
    [call_metric_data, initial_load_report_request,
     initial_load_report_response, load,
     load_balancing_feedback, load_report_request,
     load_report_response, orphaned_load_identifier];
get_msg_containment("duration") -> [duration];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("load_reporter") -> 'grpc.lb.v1';
get_pkg_containment("duration") -> 'google.protobuf';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("load_reporter") ->
    ['grpc.lb.v1.LoadReporter'];
get_service_containment("duration") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("load_reporter") ->
    [{'grpc.lb.v1.LoadReporter', 'ReportLoad'}];
get_rpc_containment("duration") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("load_reporter") ->
    ['initial_load_report_response.ImplementationIdentifier'];
get_enum_containment("duration") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.CallMetricData">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.OrphanedLoadIdentifier">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.LoadReportRequest">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.Load">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.InitialLoadReportRequest">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.LoadReportResponse">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.InitialLoadReportResponse">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"grpc.lb.v1.LoadBalancingFeedback">>) ->
    "load_reporter";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Duration">>) -> "duration";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"grpc.lb.v1.LoadReporter">>) ->
    "load_reporter";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"grpc.lb.v1.InitialLoadReportResponse.ImplementationIdentifier">>) ->
    "load_reporter";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"grpc.lb.v1">>) ->
    ["load_reporter"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["duration"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).


descriptor() ->
    <<10, 144, 13, 10, 30, 103, 114, 112, 99, 47, 108, 98,
      47, 118, 49, 47, 108, 111, 97, 100, 95, 114, 101, 112,
      111, 114, 116, 101, 114, 46, 112, 114, 111, 116, 111,
      18, 10, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 34,
      105, 10, 14, 67, 97, 108, 108, 77, 101, 116, 114, 105,
      99, 68, 97, 116, 97, 18, 19, 10, 11, 109, 101, 116, 114,
      105, 99, 95, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 18,
      38, 10, 30, 110, 117, 109, 95, 99, 97, 108, 108, 115,
      95, 102, 105, 110, 105, 115, 104, 101, 100, 95, 119,
      105, 116, 104, 95, 109, 101, 116, 114, 105, 99, 24, 2,
      32, 1, 40, 3, 18, 26, 10, 18, 116, 111, 116, 97, 108,
      95, 109, 101, 116, 114, 105, 99, 95, 118, 97, 108, 117,
      101, 24, 3, 32, 1, 40, 1, 34, 133, 1, 10, 24, 73, 110,
      105, 116, 105, 97, 108, 76, 111, 97, 100, 82, 101, 112,
      111, 114, 116, 82, 101, 113, 117, 101, 115, 116, 18, 30,
      10, 22, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 100, 95, 104, 111, 115, 116, 110, 97, 109, 101, 24,
      1, 32, 1, 40, 9, 18, 16, 10, 8, 108, 111, 97, 100, 95,
      107, 101, 121, 24, 2, 32, 1, 40, 12, 18, 55, 10, 20,
      108, 111, 97, 100, 95, 114, 101, 112, 111, 114, 116, 95,
      105, 110, 116, 101, 114, 118, 97, 108, 24, 3, 32, 1, 40,
      11, 50, 25, 46, 103, 111, 111, 103, 108, 101, 46, 112,
      114, 111, 116, 111, 98, 117, 102, 46, 68, 117, 114, 97,
      116, 105, 111, 110, 34, 245, 1, 10, 25, 73, 110, 105,
      116, 105, 97, 108, 76, 111, 97, 100, 82, 101, 112, 111,
      114, 116, 82, 101, 115, 112, 111, 110, 115, 101, 18, 24,
      10, 16, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 114, 95, 105, 100, 24, 1, 32, 1, 40, 9, 18, 89, 10,
      17, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97,
      116, 105, 111, 110, 95, 105, 100, 24, 2, 32, 1, 40, 14,
      50, 62, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49,
      46, 73, 110, 105, 116, 105, 97, 108, 76, 111, 97, 100,
      82, 101, 112, 111, 114, 116, 82, 101, 115, 112, 111,
      110, 115, 101, 46, 73, 109, 112, 108, 101, 109, 101,
      110, 116, 97, 116, 105, 111, 110, 73, 100, 101, 110,
      116, 105, 102, 105, 101, 114, 18, 22, 10, 14, 115, 101,
      114, 118, 101, 114, 95, 118, 101, 114, 115, 105, 111,
      110, 24, 3, 32, 1, 40, 3, 34, 75, 10, 24, 73, 109, 112,
      108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110,
      73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 18, 20,
      10, 16, 73, 77, 80, 76, 95, 85, 78, 83, 80, 69, 67, 73,
      70, 73, 69, 68, 16, 0, 18, 7, 10, 3, 67, 80, 80, 16, 1,
      18, 8, 10, 4, 74, 65, 86, 65, 16, 2, 18, 6, 10, 2, 71,
      79, 16, 3, 34, 205, 4, 10, 4, 76, 111, 97, 100, 18, 24,
      10, 16, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 95, 116, 97, 103, 24, 1, 32, 1, 40, 9, 18, 15, 10,
      7, 117, 115, 101, 114, 95, 105, 100, 24, 3, 32, 1, 40,
      9, 18, 25, 10, 17, 99, 108, 105, 101, 110, 116, 95, 105,
      112, 95, 97, 100, 100, 114, 101, 115, 115, 24, 15, 32,
      1, 40, 12, 18, 25, 10, 17, 110, 117, 109, 95, 99, 97,
      108, 108, 115, 95, 115, 116, 97, 114, 116, 101, 100, 24,
      4, 32, 1, 40, 3, 18, 31, 10, 21, 110, 117, 109, 95, 99,
      97, 108, 108, 115, 95, 105, 110, 95, 112, 114, 111, 103,
      114, 101, 115, 115, 24, 5, 32, 1, 40, 3, 72, 0, 18, 40,
      10, 32, 110, 117, 109, 95, 99, 97, 108, 108, 115, 95,
      102, 105, 110, 105, 115, 104, 101, 100, 95, 119, 105,
      116, 104, 111, 117, 116, 95, 101, 114, 114, 111, 114,
      24, 6, 32, 1, 40, 3, 18, 37, 10, 29, 110, 117, 109, 95,
      99, 97, 108, 108, 115, 95, 102, 105, 110, 105, 115, 104,
      101, 100, 95, 119, 105, 116, 104, 95, 101, 114, 114,
      111, 114, 24, 7, 32, 1, 40, 3, 18, 44, 10, 36, 110, 117,
      109, 95, 99, 97, 108, 108, 115, 95, 102, 105, 110, 105,
      115, 104, 101, 100, 95, 119, 105, 116, 104, 95, 115,
      101, 114, 118, 101, 114, 95, 101, 114, 114, 111, 114,
      24, 16, 32, 1, 40, 3, 18, 24, 10, 16, 116, 111, 116, 97,
      108, 95, 98, 121, 116, 101, 115, 95, 115, 101, 110, 116,
      24, 8, 32, 1, 40, 3, 18, 28, 10, 20, 116, 111, 116, 97,
      108, 95, 98, 121, 116, 101, 115, 95, 114, 101, 99, 101,
      105, 118, 101, 100, 24, 9, 32, 1, 40, 3, 18, 48, 10, 13,
      116, 111, 116, 97, 108, 95, 108, 97, 116, 101, 110, 99,
      121, 24, 10, 32, 1, 40, 11, 50, 25, 46, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 46, 68, 117, 114, 97, 116, 105, 111, 110, 18, 47,
      10, 11, 109, 101, 116, 114, 105, 99, 95, 100, 97, 116,
      97, 24, 11, 32, 3, 40, 11, 50, 26, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 67, 97, 108, 108, 77,
      101, 116, 114, 105, 99, 68, 97, 116, 97, 18, 30, 10, 8,
      108, 111, 97, 100, 95, 107, 101, 121, 24, 12, 32, 1, 40,
      12, 72, 1, 66, 10, 8, 0, 48, 0, 40, 0, 24, 1, 80, 0, 18,
      26, 10, 16, 108, 111, 97, 100, 95, 107, 101, 121, 95,
      117, 110, 107, 110, 111, 119, 110, 24, 13, 32, 1, 40, 8,
      72, 1, 18, 70, 10, 24, 111, 114, 112, 104, 97, 110, 101,
      100, 95, 108, 111, 97, 100, 95, 105, 100, 101, 110, 116,
      105, 102, 105, 101, 114, 24, 14, 32, 1, 40, 11, 50, 34,
      46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 46, 79,
      114, 112, 104, 97, 110, 101, 100, 76, 111, 97, 100, 73,
      100, 101, 110, 116, 105, 102, 105, 101, 114, 72, 1, 66,
      20, 10, 18, 105, 110, 95, 112, 114, 111, 103, 114, 101,
      115, 115, 95, 114, 101, 112, 111, 114, 116, 66, 15, 10,
      13, 111, 114, 112, 104, 97, 110, 101, 100, 95, 108, 111,
      97, 100, 34, 104, 10, 21, 76, 111, 97, 100, 66, 97, 108,
      97, 110, 99, 105, 110, 103, 70, 101, 101, 100, 98, 97,
      99, 107, 18, 26, 10, 18, 115, 101, 114, 118, 101, 114,
      95, 117, 116, 105, 108, 105, 122, 97, 116, 105, 111,
      110, 24, 1, 32, 1, 40, 2, 18, 24, 10, 16, 99, 97, 108,
      108, 115, 95, 112, 101, 114, 95, 115, 101, 99, 111, 110,
      100, 24, 2, 32, 1, 40, 2, 18, 25, 10, 17, 101, 114, 114,
      111, 114, 115, 95, 112, 101, 114, 95, 115, 101, 99, 111,
      110, 100, 24, 3, 32, 1, 40, 2, 34, 82, 10, 17, 76, 111,
      97, 100, 82, 101, 112, 111, 114, 116, 82, 101, 113, 117,
      101, 115, 116, 18, 61, 10, 15, 105, 110, 105, 116, 105,
      97, 108, 95, 114, 101, 113, 117, 101, 115, 116, 24, 1,
      32, 1, 40, 11, 50, 36, 46, 103, 114, 112, 99, 46, 108,
      98, 46, 118, 49, 46, 73, 110, 105, 116, 105, 97, 108,
      76, 111, 97, 100, 82, 101, 112, 111, 114, 116, 82, 101,
      113, 117, 101, 115, 116, 34, 185, 1, 10, 18, 76, 111,
      97, 100, 82, 101, 112, 111, 114, 116, 82, 101, 115, 112,
      111, 110, 115, 101, 18, 63, 10, 16, 105, 110, 105, 116,
      105, 97, 108, 95, 114, 101, 115, 112, 111, 110, 115,
      101, 24, 1, 32, 1, 40, 11, 50, 37, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 73, 110, 105, 116,
      105, 97, 108, 76, 111, 97, 100, 82, 101, 112, 111, 114,
      116, 82, 101, 115, 112, 111, 110, 115, 101, 18, 66, 10,
      23, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      105, 110, 103, 95, 102, 101, 101, 100, 98, 97, 99, 107,
      24, 2, 32, 1, 40, 11, 50, 33, 46, 103, 114, 112, 99, 46,
      108, 98, 46, 118, 49, 46, 76, 111, 97, 100, 66, 97, 108,
      97, 110, 99, 105, 110, 103, 70, 101, 101, 100, 98, 97,
      99, 107, 18, 30, 10, 4, 108, 111, 97, 100, 24, 3, 32, 3,
      40, 11, 50, 16, 46, 103, 114, 112, 99, 46, 108, 98, 46,
      118, 49, 46, 76, 111, 97, 100, 34, 68, 10, 22, 79, 114,
      112, 104, 97, 110, 101, 100, 76, 111, 97, 100, 73, 100,
      101, 110, 116, 105, 102, 105, 101, 114, 18, 16, 10, 8,
      108, 111, 97, 100, 95, 107, 101, 121, 24, 1, 32, 1, 40,
      12, 18, 24, 10, 16, 108, 111, 97, 100, 95, 98, 97, 108,
      97, 110, 99, 101, 114, 95, 105, 100, 24, 2, 32, 1, 40,
      9, 50, 95, 10, 12, 76, 111, 97, 100, 82, 101, 112, 111,
      114, 116, 101, 114, 18, 79, 10, 10, 82, 101, 112, 111,
      114, 116, 76, 111, 97, 100, 18, 29, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 76, 111, 97, 100, 82,
      101, 112, 111, 114, 116, 82, 101, 113, 117, 101, 115,
      116, 26, 30, 46, 103, 114, 112, 99, 46, 108, 98, 46,
      118, 49, 46, 76, 111, 97, 100, 82, 101, 112, 111, 114,
      116, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48,
      0, 98, 6, 112, 114, 111, 116, 111, 51, 10, 101, 10, 30,
      103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116,
      111, 98, 117, 102, 47, 100, 117, 114, 97, 116, 105, 111,
      110, 46, 112, 114, 111, 116, 111, 18, 15, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 34, 42, 10, 8, 68, 117, 114, 97, 116, 105, 111,
      110, 18, 15, 10, 7, 115, 101, 99, 111, 110, 100, 115,
      24, 1, 32, 1, 40, 3, 18, 13, 10, 5, 110, 97, 110, 111,
      115, 24, 2, 32, 1, 40, 5, 98, 6, 112, 114, 111, 116,
      111, 51>>.

descriptor("load_reporter") ->
    <<10, 30, 103, 114, 112, 99, 47, 108, 98, 47, 118, 49,
      47, 108, 111, 97, 100, 95, 114, 101, 112, 111, 114, 116,
      101, 114, 46, 112, 114, 111, 116, 111, 18, 10, 103, 114,
      112, 99, 46, 108, 98, 46, 118, 49, 34, 105, 10, 14, 67,
      97, 108, 108, 77, 101, 116, 114, 105, 99, 68, 97, 116,
      97, 18, 19, 10, 11, 109, 101, 116, 114, 105, 99, 95,
      110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 18, 38, 10, 30,
      110, 117, 109, 95, 99, 97, 108, 108, 115, 95, 102, 105,
      110, 105, 115, 104, 101, 100, 95, 119, 105, 116, 104,
      95, 109, 101, 116, 114, 105, 99, 24, 2, 32, 1, 40, 3,
      18, 26, 10, 18, 116, 111, 116, 97, 108, 95, 109, 101,
      116, 114, 105, 99, 95, 118, 97, 108, 117, 101, 24, 3,
      32, 1, 40, 1, 34, 133, 1, 10, 24, 73, 110, 105, 116,
      105, 97, 108, 76, 111, 97, 100, 82, 101, 112, 111, 114,
      116, 82, 101, 113, 117, 101, 115, 116, 18, 30, 10, 22,
      108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99, 101,
      100, 95, 104, 111, 115, 116, 110, 97, 109, 101, 24, 1,
      32, 1, 40, 9, 18, 16, 10, 8, 108, 111, 97, 100, 95, 107,
      101, 121, 24, 2, 32, 1, 40, 12, 18, 55, 10, 20, 108,
      111, 97, 100, 95, 114, 101, 112, 111, 114, 116, 95, 105,
      110, 116, 101, 114, 118, 97, 108, 24, 3, 32, 1, 40, 11,
      50, 25, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114,
      111, 116, 111, 98, 117, 102, 46, 68, 117, 114, 97, 116,
      105, 111, 110, 34, 245, 1, 10, 25, 73, 110, 105, 116,
      105, 97, 108, 76, 111, 97, 100, 82, 101, 112, 111, 114,
      116, 82, 101, 115, 112, 111, 110, 115, 101, 18, 24, 10,
      16, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 114, 95, 105, 100, 24, 1, 32, 1, 40, 9, 18, 89, 10,
      17, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97,
      116, 105, 111, 110, 95, 105, 100, 24, 2, 32, 1, 40, 14,
      50, 62, 46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49,
      46, 73, 110, 105, 116, 105, 97, 108, 76, 111, 97, 100,
      82, 101, 112, 111, 114, 116, 82, 101, 115, 112, 111,
      110, 115, 101, 46, 73, 109, 112, 108, 101, 109, 101,
      110, 116, 97, 116, 105, 111, 110, 73, 100, 101, 110,
      116, 105, 102, 105, 101, 114, 18, 22, 10, 14, 115, 101,
      114, 118, 101, 114, 95, 118, 101, 114, 115, 105, 111,
      110, 24, 3, 32, 1, 40, 3, 34, 75, 10, 24, 73, 109, 112,
      108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110,
      73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 18, 20,
      10, 16, 73, 77, 80, 76, 95, 85, 78, 83, 80, 69, 67, 73,
      70, 73, 69, 68, 16, 0, 18, 7, 10, 3, 67, 80, 80, 16, 1,
      18, 8, 10, 4, 74, 65, 86, 65, 16, 2, 18, 6, 10, 2, 71,
      79, 16, 3, 34, 205, 4, 10, 4, 76, 111, 97, 100, 18, 24,
      10, 16, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      101, 95, 116, 97, 103, 24, 1, 32, 1, 40, 9, 18, 15, 10,
      7, 117, 115, 101, 114, 95, 105, 100, 24, 3, 32, 1, 40,
      9, 18, 25, 10, 17, 99, 108, 105, 101, 110, 116, 95, 105,
      112, 95, 97, 100, 100, 114, 101, 115, 115, 24, 15, 32,
      1, 40, 12, 18, 25, 10, 17, 110, 117, 109, 95, 99, 97,
      108, 108, 115, 95, 115, 116, 97, 114, 116, 101, 100, 24,
      4, 32, 1, 40, 3, 18, 31, 10, 21, 110, 117, 109, 95, 99,
      97, 108, 108, 115, 95, 105, 110, 95, 112, 114, 111, 103,
      114, 101, 115, 115, 24, 5, 32, 1, 40, 3, 72, 0, 18, 40,
      10, 32, 110, 117, 109, 95, 99, 97, 108, 108, 115, 95,
      102, 105, 110, 105, 115, 104, 101, 100, 95, 119, 105,
      116, 104, 111, 117, 116, 95, 101, 114, 114, 111, 114,
      24, 6, 32, 1, 40, 3, 18, 37, 10, 29, 110, 117, 109, 95,
      99, 97, 108, 108, 115, 95, 102, 105, 110, 105, 115, 104,
      101, 100, 95, 119, 105, 116, 104, 95, 101, 114, 114,
      111, 114, 24, 7, 32, 1, 40, 3, 18, 44, 10, 36, 110, 117,
      109, 95, 99, 97, 108, 108, 115, 95, 102, 105, 110, 105,
      115, 104, 101, 100, 95, 119, 105, 116, 104, 95, 115,
      101, 114, 118, 101, 114, 95, 101, 114, 114, 111, 114,
      24, 16, 32, 1, 40, 3, 18, 24, 10, 16, 116, 111, 116, 97,
      108, 95, 98, 121, 116, 101, 115, 95, 115, 101, 110, 116,
      24, 8, 32, 1, 40, 3, 18, 28, 10, 20, 116, 111, 116, 97,
      108, 95, 98, 121, 116, 101, 115, 95, 114, 101, 99, 101,
      105, 118, 101, 100, 24, 9, 32, 1, 40, 3, 18, 48, 10, 13,
      116, 111, 116, 97, 108, 95, 108, 97, 116, 101, 110, 99,
      121, 24, 10, 32, 1, 40, 11, 50, 25, 46, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 46, 68, 117, 114, 97, 116, 105, 111, 110, 18, 47,
      10, 11, 109, 101, 116, 114, 105, 99, 95, 100, 97, 116,
      97, 24, 11, 32, 3, 40, 11, 50, 26, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 67, 97, 108, 108, 77,
      101, 116, 114, 105, 99, 68, 97, 116, 97, 18, 30, 10, 8,
      108, 111, 97, 100, 95, 107, 101, 121, 24, 12, 32, 1, 40,
      12, 72, 1, 66, 10, 8, 0, 48, 0, 40, 0, 24, 1, 80, 0, 18,
      26, 10, 16, 108, 111, 97, 100, 95, 107, 101, 121, 95,
      117, 110, 107, 110, 111, 119, 110, 24, 13, 32, 1, 40, 8,
      72, 1, 18, 70, 10, 24, 111, 114, 112, 104, 97, 110, 101,
      100, 95, 108, 111, 97, 100, 95, 105, 100, 101, 110, 116,
      105, 102, 105, 101, 114, 24, 14, 32, 1, 40, 11, 50, 34,
      46, 103, 114, 112, 99, 46, 108, 98, 46, 118, 49, 46, 79,
      114, 112, 104, 97, 110, 101, 100, 76, 111, 97, 100, 73,
      100, 101, 110, 116, 105, 102, 105, 101, 114, 72, 1, 66,
      20, 10, 18, 105, 110, 95, 112, 114, 111, 103, 114, 101,
      115, 115, 95, 114, 101, 112, 111, 114, 116, 66, 15, 10,
      13, 111, 114, 112, 104, 97, 110, 101, 100, 95, 108, 111,
      97, 100, 34, 104, 10, 21, 76, 111, 97, 100, 66, 97, 108,
      97, 110, 99, 105, 110, 103, 70, 101, 101, 100, 98, 97,
      99, 107, 18, 26, 10, 18, 115, 101, 114, 118, 101, 114,
      95, 117, 116, 105, 108, 105, 122, 97, 116, 105, 111,
      110, 24, 1, 32, 1, 40, 2, 18, 24, 10, 16, 99, 97, 108,
      108, 115, 95, 112, 101, 114, 95, 115, 101, 99, 111, 110,
      100, 24, 2, 32, 1, 40, 2, 18, 25, 10, 17, 101, 114, 114,
      111, 114, 115, 95, 112, 101, 114, 95, 115, 101, 99, 111,
      110, 100, 24, 3, 32, 1, 40, 2, 34, 82, 10, 17, 76, 111,
      97, 100, 82, 101, 112, 111, 114, 116, 82, 101, 113, 117,
      101, 115, 116, 18, 61, 10, 15, 105, 110, 105, 116, 105,
      97, 108, 95, 114, 101, 113, 117, 101, 115, 116, 24, 1,
      32, 1, 40, 11, 50, 36, 46, 103, 114, 112, 99, 46, 108,
      98, 46, 118, 49, 46, 73, 110, 105, 116, 105, 97, 108,
      76, 111, 97, 100, 82, 101, 112, 111, 114, 116, 82, 101,
      113, 117, 101, 115, 116, 34, 185, 1, 10, 18, 76, 111,
      97, 100, 82, 101, 112, 111, 114, 116, 82, 101, 115, 112,
      111, 110, 115, 101, 18, 63, 10, 16, 105, 110, 105, 116,
      105, 97, 108, 95, 114, 101, 115, 112, 111, 110, 115,
      101, 24, 1, 32, 1, 40, 11, 50, 37, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 73, 110, 105, 116,
      105, 97, 108, 76, 111, 97, 100, 82, 101, 112, 111, 114,
      116, 82, 101, 115, 112, 111, 110, 115, 101, 18, 66, 10,
      23, 108, 111, 97, 100, 95, 98, 97, 108, 97, 110, 99,
      105, 110, 103, 95, 102, 101, 101, 100, 98, 97, 99, 107,
      24, 2, 32, 1, 40, 11, 50, 33, 46, 103, 114, 112, 99, 46,
      108, 98, 46, 118, 49, 46, 76, 111, 97, 100, 66, 97, 108,
      97, 110, 99, 105, 110, 103, 70, 101, 101, 100, 98, 97,
      99, 107, 18, 30, 10, 4, 108, 111, 97, 100, 24, 3, 32, 3,
      40, 11, 50, 16, 46, 103, 114, 112, 99, 46, 108, 98, 46,
      118, 49, 46, 76, 111, 97, 100, 34, 68, 10, 22, 79, 114,
      112, 104, 97, 110, 101, 100, 76, 111, 97, 100, 73, 100,
      101, 110, 116, 105, 102, 105, 101, 114, 18, 16, 10, 8,
      108, 111, 97, 100, 95, 107, 101, 121, 24, 1, 32, 1, 40,
      12, 18, 24, 10, 16, 108, 111, 97, 100, 95, 98, 97, 108,
      97, 110, 99, 101, 114, 95, 105, 100, 24, 2, 32, 1, 40,
      9, 50, 95, 10, 12, 76, 111, 97, 100, 82, 101, 112, 111,
      114, 116, 101, 114, 18, 79, 10, 10, 82, 101, 112, 111,
      114, 116, 76, 111, 97, 100, 18, 29, 46, 103, 114, 112,
      99, 46, 108, 98, 46, 118, 49, 46, 76, 111, 97, 100, 82,
      101, 112, 111, 114, 116, 82, 101, 113, 117, 101, 115,
      116, 26, 30, 46, 103, 114, 112, 99, 46, 108, 98, 46,
      118, 49, 46, 76, 111, 97, 100, 82, 101, 112, 111, 114,
      116, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48,
      0, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor("duration") ->
    <<10, 30, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 100, 117, 114, 97, 116,
      105, 111, 110, 46, 112, 114, 111, 116, 111, 18, 15, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 34, 42, 10, 8, 68, 117, 114, 97, 116, 105,
      111, 110, 18, 15, 10, 7, 115, 101, 99, 111, 110, 100,
      115, 24, 1, 32, 1, 40, 3, 18, 13, 10, 5, 110, 97, 110,
      111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112, 114, 111,
      116, 111, 51>>;
descriptor(X) -> error({gpb_error, {badname, X}}).


gpb_version_as_string() ->
    "4.7.2".

gpb_version_as_list() ->
    [4,7,2].
